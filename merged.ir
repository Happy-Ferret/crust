fn core_num_bswap8 0 0 args 1 x [uint 8] return [uint 8] 0 body ([uint 8] unsafe 1 let __result [uint 8] ([uint 8] var x) ([uint 8] var __result)) 
fn core_num_u8__Int_zero 0 0 args 0 return [uint 8] 1 core_num_Int_zero 0 1 [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] simple_literal 0) ([uint 8] var __result)) 
fn core_num_u8__Int_one 0 0 args 0 return [uint 8] 1 core_num_Int_one 0 1 [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] simple_literal 1) ([uint 8] var __result)) 
fn core_num_u8__Int_min_value 0 0 args 0 return [uint 8] 1 core_num_Int_min_value 0 1 [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] simple_literal 0) ([uint 8] var __result)) 
fn core_num_u8__Int_max_value 0 0 args 0 return [uint 8] 1 core_num_Int_max_value 0 1 [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] unop UnNeg ([uint 8] simple_literal 1)) ([uint 8] var __result)) 
fn core_num_u8__Int_count_ones 0 0 args 1 self [uint 8] return [uint 32] 1 core_num_Int_count_ones 0 1 [uint 8] body ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] unsafe 1 let __result [uint 32] ([uint 32] cast ([uint 8] call core_intrinsics_ctpop8 0 0 1 ([uint 8] cast ([uint 8] var self) [uint 8])) [uint 32]) ([uint 32] var __result)) ([uint 32] var __result_0)) 
fn core_num_u8__Int_leading_zeros 0 0 args 1 self [uint 8] return [uint 32] 1 core_num_Int_leading_zeros 0 1 [uint 8] body ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] unsafe 1 let __result [uint 32] ([uint 32] cast ([uint 8] call core_intrinsics_ctlz8 0 0 1 ([uint 8] cast ([uint 8] var self) [uint 8])) [uint 32]) ([uint 32] var __result)) ([uint 32] var __result_0)) 
fn core_num_u8__Int_trailing_zeros 0 0 args 1 self [uint 8] return [uint 32] 1 core_num_Int_trailing_zeros 0 1 [uint 8] body ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] unsafe 1 let __result [uint 32] ([uint 32] cast ([uint 8] call core_intrinsics_cttz8 0 0 1 ([uint 8] cast ([uint 8] var self) [uint 8])) [uint 32]) ([uint 32] var __result)) ([uint 32] var __result_0)) 
fn core_num_u8__Int_rotate_left 0 0 args 2 self [uint 8] n [uint 32] return [uint 8] 1 core_num_Int_rotate_left 0 1 [uint 8] body ([uint 8] block 2 let n_0 [uint 32] ([uint 32] binop BiRem ([uint 32] var n) ([uint 32] simple_literal 8)) let __result [uint 8] ([uint 8] binop BiBitOr ([uint 8] binop BiShl ([uint 8] var self) ([uint 32] var n_0)) ([uint 8] binop BiShr ([uint 8] var self) ([uint 32] binop BiRem ([uint 32] binop BiSub ([uint 32] simple_literal 8) ([uint 32] var n_0)) ([uint 32] simple_literal 8)))) ([uint 8] var __result)) 
fn core_num_u8__Int_rotate_right 0 0 args 2 self [uint 8] n [uint 32] return [uint 8] 1 core_num_Int_rotate_right 0 1 [uint 8] body ([uint 8] block 2 let n_0 [uint 32] ([uint 32] binop BiRem ([uint 32] var n) ([uint 32] simple_literal 8)) let __result [uint 8] ([uint 8] binop BiBitOr ([uint 8] binop BiShr ([uint 8] var self) ([uint 32] var n_0)) ([uint 8] binop BiShl ([uint 8] var self) ([uint 32] binop BiRem ([uint 32] binop BiSub ([uint 32] simple_literal 8) ([uint 32] var n_0)) ([uint 32] simple_literal 8)))) ([uint 8] var __result)) 
fn core_num_u8__Int_swap_bytes 0 0 args 1 self [uint 8] return [uint 8] 1 core_num_Int_swap_bytes 0 1 [uint 8] body ([uint 8] block 1 let __result_0 [uint 8] ([uint 8] unsafe 1 let __result [uint 8] ([uint 8] cast ([uint 8] call core_num_bswap8 0 0 1 ([uint 8] cast ([uint 8] var self) [uint 8])) [uint 8]) ([uint 8] var __result)) ([uint 8] var __result_0)) 
fn core_num_u8__Int_checked_div 0 0 args 2 self [uint 8] v [uint 8] return [adt core_option_Option 0 1 [uint 8]] 1 core_num_Int_checked_div 0 1 [uint 8] body ([adt core_option_Option 0 1 [uint 8]] block 1 let __result [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] match ([uint 8] var v) 2 ([uint 8] simple_literal 0) ([adt core_option_Option 0 1 [uint 8]] enum_literal core_option_None 0 0) ([uint 8] var v_0) ([adt core_option_Option 0 1 [uint 8]] enum_literal core_option_Some 1 1 ([uint 8] binop BiDiv ([uint 8] var self) ([uint 8] var v_0)))) ([adt core_option_Option 0 1 [uint 8]] var __result)) 
fn core_num_u16__Int_zero 0 0 args 0 return [uint 16] 1 core_num_Int_zero 0 1 [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] simple_literal 0) ([uint 16] var __result)) 
fn core_num_u16__Int_one 0 0 args 0 return [uint 16] 1 core_num_Int_one 0 1 [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] simple_literal 1) ([uint 16] var __result)) 
fn core_num_u16__Int_min_value 0 0 args 0 return [uint 16] 1 core_num_Int_min_value 0 1 [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] simple_literal 0) ([uint 16] var __result)) 
fn core_num_u16__Int_max_value 0 0 args 0 return [uint 16] 1 core_num_Int_max_value 0 1 [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] unop UnNeg ([uint 16] simple_literal 1)) ([uint 16] var __result)) 
fn core_num_u16__Int_count_ones 0 0 args 1 self [uint 16] return [uint 32] 1 core_num_Int_count_ones 0 1 [uint 16] body ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] unsafe 1 let __result [uint 32] ([uint 32] cast ([uint 16] call core_intrinsics_ctpop16 0 0 1 ([uint 16] cast ([uint 16] var self) [uint 16])) [uint 32]) ([uint 32] var __result)) ([uint 32] var __result_0)) 
fn core_num_u16__Int_leading_zeros 0 0 args 1 self [uint 16] return [uint 32] 1 core_num_Int_leading_zeros 0 1 [uint 16] body ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] unsafe 1 let __result [uint 32] ([uint 32] cast ([uint 16] call core_intrinsics_ctlz16 0 0 1 ([uint 16] cast ([uint 16] var self) [uint 16])) [uint 32]) ([uint 32] var __result)) ([uint 32] var __result_0)) 
fn core_num_u16__Int_trailing_zeros 0 0 args 1 self [uint 16] return [uint 32] 1 core_num_Int_trailing_zeros 0 1 [uint 16] body ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] unsafe 1 let __result [uint 32] ([uint 32] cast ([uint 16] call core_intrinsics_cttz16 0 0 1 ([uint 16] cast ([uint 16] var self) [uint 16])) [uint 32]) ([uint 32] var __result)) ([uint 32] var __result_0)) 
fn core_num_u16__Int_rotate_left 0 0 args 2 self [uint 16] n [uint 32] return [uint 16] 1 core_num_Int_rotate_left 0 1 [uint 16] body ([uint 16] block 2 let n_0 [uint 32] ([uint 32] binop BiRem ([uint 32] var n) ([uint 32] simple_literal 16)) let __result [uint 16] ([uint 16] binop BiBitOr ([uint 16] binop BiShl ([uint 16] var self) ([uint 32] var n_0)) ([uint 16] binop BiShr ([uint 16] var self) ([uint 32] binop BiRem ([uint 32] binop BiSub ([uint 32] simple_literal 16) ([uint 32] var n_0)) ([uint 32] simple_literal 16)))) ([uint 16] var __result)) 
fn core_num_u16__Int_rotate_right 0 0 args 2 self [uint 16] n [uint 32] return [uint 16] 1 core_num_Int_rotate_right 0 1 [uint 16] body ([uint 16] block 2 let n_0 [uint 32] ([uint 32] binop BiRem ([uint 32] var n) ([uint 32] simple_literal 16)) let __result [uint 16] ([uint 16] binop BiBitOr ([uint 16] binop BiShr ([uint 16] var self) ([uint 32] var n_0)) ([uint 16] binop BiShl ([uint 16] var self) ([uint 32] binop BiRem ([uint 32] binop BiSub ([uint 32] simple_literal 16) ([uint 32] var n_0)) ([uint 32] simple_literal 16)))) ([uint 16] var __result)) 
fn core_num_u16__Int_swap_bytes 0 0 args 1 self [uint 16] return [uint 16] 1 core_num_Int_swap_bytes 0 1 [uint 16] body ([uint 16] block 1 let __result_0 [uint 16] ([uint 16] unsafe 1 let __result [uint 16] ([uint 16] cast ([uint 16] call core_intrinsics_bswap16 0 0 1 ([uint 16] cast ([uint 16] var self) [uint 16])) [uint 16]) ([uint 16] var __result)) ([uint 16] var __result_0)) 
fn core_num_u16__Int_checked_div 0 0 args 2 self [uint 16] v [uint 16] return [adt core_option_Option 0 1 [uint 16]] 1 core_num_Int_checked_div 0 1 [uint 16] body ([adt core_option_Option 0 1 [uint 16]] block 1 let __result [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] match ([uint 16] var v) 2 ([uint 16] simple_literal 0) ([adt core_option_Option 0 1 [uint 16]] enum_literal core_option_None 0 0) ([uint 16] var v_0) ([adt core_option_Option 0 1 [uint 16]] enum_literal core_option_Some 1 1 ([uint 16] binop BiDiv ([uint 16] var self) ([uint 16] var v_0)))) ([adt core_option_Option 0 1 [uint 16]] var __result)) 
fn core_num_u32__Int_zero 0 0 args 0 return [uint 32] 1 core_num_Int_zero 0 1 [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] simple_literal 0) ([uint 32] var __result)) 
fn core_num_u32__Int_one 0 0 args 0 return [uint 32] 1 core_num_Int_one 0 1 [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] simple_literal 1) ([uint 32] var __result)) 
fn core_num_u32__Int_min_value 0 0 args 0 return [uint 32] 1 core_num_Int_min_value 0 1 [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] simple_literal 0) ([uint 32] var __result)) 
fn core_num_u32__Int_max_value 0 0 args 0 return [uint 32] 1 core_num_Int_max_value 0 1 [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] unop UnNeg ([uint 32] simple_literal 1)) ([uint 32] var __result)) 
fn core_num_u32__Int_count_ones 0 0 args 1 self [uint 32] return [uint 32] 1 core_num_Int_count_ones 0 1 [uint 32] body ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] unsafe 1 let __result [uint 32] ([uint 32] cast ([uint 32] call core_intrinsics_ctpop32 0 0 1 ([uint 32] cast ([uint 32] var self) [uint 32])) [uint 32]) ([uint 32] var __result)) ([uint 32] var __result_0)) 
fn core_num_u32__Int_leading_zeros 0 0 args 1 self [uint 32] return [uint 32] 1 core_num_Int_leading_zeros 0 1 [uint 32] body ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] unsafe 1 let __result [uint 32] ([uint 32] cast ([uint 32] call core_intrinsics_ctlz32 0 0 1 ([uint 32] cast ([uint 32] var self) [uint 32])) [uint 32]) ([uint 32] var __result)) ([uint 32] var __result_0)) 
fn core_num_u32__Int_trailing_zeros 0 0 args 1 self [uint 32] return [uint 32] 1 core_num_Int_trailing_zeros 0 1 [uint 32] body ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] unsafe 1 let __result [uint 32] ([uint 32] cast ([uint 32] call core_intrinsics_cttz32 0 0 1 ([uint 32] cast ([uint 32] var self) [uint 32])) [uint 32]) ([uint 32] var __result)) ([uint 32] var __result_0)) 
fn core_num_u32__Int_rotate_left 0 0 args 2 self [uint 32] n [uint 32] return [uint 32] 1 core_num_Int_rotate_left 0 1 [uint 32] body ([uint 32] block 2 let n_0 [uint 32] ([uint 32] binop BiRem ([uint 32] var n) ([uint 32] simple_literal 32)) let __result [uint 32] ([uint 32] binop BiBitOr ([uint 32] binop BiShl ([uint 32] var self) ([uint 32] var n_0)) ([uint 32] binop BiShr ([uint 32] var self) ([uint 32] binop BiRem ([uint 32] binop BiSub ([uint 32] simple_literal 32) ([uint 32] var n_0)) ([uint 32] simple_literal 32)))) ([uint 32] var __result)) 
fn core_num_u32__Int_rotate_right 0 0 args 2 self [uint 32] n [uint 32] return [uint 32] 1 core_num_Int_rotate_right 0 1 [uint 32] body ([uint 32] block 2 let n_0 [uint 32] ([uint 32] binop BiRem ([uint 32] var n) ([uint 32] simple_literal 32)) let __result [uint 32] ([uint 32] binop BiBitOr ([uint 32] binop BiShr ([uint 32] var self) ([uint 32] var n_0)) ([uint 32] binop BiShl ([uint 32] var self) ([uint 32] binop BiRem ([uint 32] binop BiSub ([uint 32] simple_literal 32) ([uint 32] var n_0)) ([uint 32] simple_literal 32)))) ([uint 32] var __result)) 
fn core_num_u32__Int_swap_bytes 0 0 args 1 self [uint 32] return [uint 32] 1 core_num_Int_swap_bytes 0 1 [uint 32] body ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] unsafe 1 let __result [uint 32] ([uint 32] cast ([uint 32] call core_intrinsics_bswap32 0 0 1 ([uint 32] cast ([uint 32] var self) [uint 32])) [uint 32]) ([uint 32] var __result)) ([uint 32] var __result_0)) 
fn core_num_u32__Int_checked_div 0 0 args 2 self [uint 32] v [uint 32] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_Int_checked_div 0 1 [uint 32] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] match ([uint 32] var v) 2 ([uint 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_None 0 0) ([uint 32] var v_0) ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] binop BiDiv ([uint 32] var self) ([uint 32] var v_0)))) ([adt core_option_Option 0 1 [uint 32]] var __result)) 
fn core_num_u64__Int_zero 0 0 args 0 return [uint 64] 1 core_num_Int_zero 0 1 [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] simple_literal 0) ([uint 64] var __result)) 
fn core_num_u64__Int_one 0 0 args 0 return [uint 64] 1 core_num_Int_one 0 1 [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] simple_literal 1) ([uint 64] var __result)) 
fn core_num_u64__Int_min_value 0 0 args 0 return [uint 64] 1 core_num_Int_min_value 0 1 [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] simple_literal 0) ([uint 64] var __result)) 
fn core_num_u64__Int_max_value 0 0 args 0 return [uint 64] 1 core_num_Int_max_value 0 1 [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] unop UnNeg ([uint 64] simple_literal 1)) ([uint 64] var __result)) 
fn core_num_u64__Int_count_ones 0 0 args 1 self [uint 64] return [uint 32] 1 core_num_Int_count_ones 0 1 [uint 64] body ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] unsafe 1 let __result [uint 32] ([uint 32] cast ([uint 64] call core_intrinsics_ctpop64 0 0 1 ([uint 64] cast ([uint 64] var self) [uint 64])) [uint 32]) ([uint 32] var __result)) ([uint 32] var __result_0)) 
fn core_num_u64__Int_leading_zeros 0 0 args 1 self [uint 64] return [uint 32] 1 core_num_Int_leading_zeros 0 1 [uint 64] body ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] unsafe 1 let __result [uint 32] ([uint 32] cast ([uint 64] call core_intrinsics_ctlz64 0 0 1 ([uint 64] cast ([uint 64] var self) [uint 64])) [uint 32]) ([uint 32] var __result)) ([uint 32] var __result_0)) 
fn core_num_u64__Int_trailing_zeros 0 0 args 1 self [uint 64] return [uint 32] 1 core_num_Int_trailing_zeros 0 1 [uint 64] body ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] unsafe 1 let __result [uint 32] ([uint 32] cast ([uint 64] call core_intrinsics_cttz64 0 0 1 ([uint 64] cast ([uint 64] var self) [uint 64])) [uint 32]) ([uint 32] var __result)) ([uint 32] var __result_0)) 
fn core_num_u64__Int_rotate_left 0 0 args 2 self [uint 64] n [uint 32] return [uint 64] 1 core_num_Int_rotate_left 0 1 [uint 64] body ([uint 64] block 2 let n_0 [uint 32] ([uint 32] binop BiRem ([uint 32] var n) ([uint 32] simple_literal 64)) let __result [uint 64] ([uint 64] binop BiBitOr ([uint 64] binop BiShl ([uint 64] var self) ([uint 32] var n_0)) ([uint 64] binop BiShr ([uint 64] var self) ([uint 32] binop BiRem ([uint 32] binop BiSub ([uint 32] simple_literal 64) ([uint 32] var n_0)) ([uint 32] simple_literal 64)))) ([uint 64] var __result)) 
fn core_num_u64__Int_rotate_right 0 0 args 2 self [uint 64] n [uint 32] return [uint 64] 1 core_num_Int_rotate_right 0 1 [uint 64] body ([uint 64] block 2 let n_0 [uint 32] ([uint 32] binop BiRem ([uint 32] var n) ([uint 32] simple_literal 64)) let __result [uint 64] ([uint 64] binop BiBitOr ([uint 64] binop BiShr ([uint 64] var self) ([uint 32] var n_0)) ([uint 64] binop BiShl ([uint 64] var self) ([uint 32] binop BiRem ([uint 32] binop BiSub ([uint 32] simple_literal 64) ([uint 32] var n_0)) ([uint 32] simple_literal 64)))) ([uint 64] var __result)) 
fn core_num_u64__Int_swap_bytes 0 0 args 1 self [uint 64] return [uint 64] 1 core_num_Int_swap_bytes 0 1 [uint 64] body ([uint 64] block 1 let __result_0 [uint 64] ([uint 64] unsafe 1 let __result [uint 64] ([uint 64] cast ([uint 64] call core_intrinsics_bswap64 0 0 1 ([uint 64] cast ([uint 64] var self) [uint 64])) [uint 64]) ([uint 64] var __result)) ([uint 64] var __result_0)) 
fn core_num_u64__Int_checked_div 0 0 args 2 self [uint 64] v [uint 64] return [adt core_option_Option 0 1 [uint 64]] 1 core_num_Int_checked_div 0 1 [uint 64] body ([adt core_option_Option 0 1 [uint 64]] block 1 let __result [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] match ([uint 64] var v) 2 ([uint 64] simple_literal 0) ([adt core_option_Option 0 1 [uint 64]] enum_literal core_option_None 0 0) ([uint 64] var v_0) ([adt core_option_Option 0 1 [uint 64]] enum_literal core_option_Some 1 1 ([uint 64] binop BiDiv ([uint 64] var self) ([uint 64] var v_0)))) ([adt core_option_Option 0 1 [uint 64]] var __result)) 
fn core_num_uint__Int_zero 0 0 args 0 return [uint 32] 1 core_num_Int_zero 0 1 [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] simple_literal 0) ([uint 32] var __result)) 
fn core_num_uint__Int_one 0 0 args 0 return [uint 32] 1 core_num_Int_one 0 1 [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] simple_literal 1) ([uint 32] var __result)) 
fn core_num_uint__Int_min_value 0 0 args 0 return [uint 32] 1 core_num_Int_min_value 0 1 [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] simple_literal 0) ([uint 32] var __result)) 
fn core_num_uint__Int_max_value 0 0 args 0 return [uint 32] 1 core_num_Int_max_value 0 1 [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] unop UnNeg ([uint 32] simple_literal 1)) ([uint 32] var __result)) 
fn core_num_uint__Int_count_ones 0 0 args 1 self [uint 32] return [uint 32] 1 core_num_Int_count_ones 0 1 [uint 32] body ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] unsafe 1 let __result [uint 32] ([uint 32] cast ([uint 64] call core_intrinsics_ctpop64 0 0 1 ([uint 64] cast ([uint 32] var self) [uint 64])) [uint 32]) ([uint 32] var __result)) ([uint 32] var __result_0)) 
fn core_num_uint__Int_leading_zeros 0 0 args 1 self [uint 32] return [uint 32] 1 core_num_Int_leading_zeros 0 1 [uint 32] body ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] unsafe 1 let __result [uint 32] ([uint 32] cast ([uint 64] call core_intrinsics_ctlz64 0 0 1 ([uint 64] cast ([uint 32] var self) [uint 64])) [uint 32]) ([uint 32] var __result)) ([uint 32] var __result_0)) 
fn core_num_uint__Int_trailing_zeros 0 0 args 1 self [uint 32] return [uint 32] 1 core_num_Int_trailing_zeros 0 1 [uint 32] body ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] unsafe 1 let __result [uint 32] ([uint 32] cast ([uint 64] call core_intrinsics_cttz64 0 0 1 ([uint 64] cast ([uint 32] var self) [uint 64])) [uint 32]) ([uint 32] var __result)) ([uint 32] var __result_0)) 
fn core_num_uint__Int_rotate_left 0 0 args 2 self [uint 32] n [uint 32] return [uint 32] 1 core_num_Int_rotate_left 0 1 [uint 32] body ([uint 32] block 2 let n_0 [uint 32] ([uint 32] binop BiRem ([uint 32] var n) ([uint 32] simple_literal 64)) let __result [uint 32] ([uint 32] binop BiBitOr ([uint 32] binop BiShl ([uint 32] var self) ([uint 32] var n_0)) ([uint 32] binop BiShr ([uint 32] var self) ([uint 32] binop BiRem ([uint 32] binop BiSub ([uint 32] simple_literal 64) ([uint 32] var n_0)) ([uint 32] simple_literal 64)))) ([uint 32] var __result)) 
fn core_num_uint__Int_rotate_right 0 0 args 2 self [uint 32] n [uint 32] return [uint 32] 1 core_num_Int_rotate_right 0 1 [uint 32] body ([uint 32] block 2 let n_0 [uint 32] ([uint 32] binop BiRem ([uint 32] var n) ([uint 32] simple_literal 64)) let __result [uint 32] ([uint 32] binop BiBitOr ([uint 32] binop BiShr ([uint 32] var self) ([uint 32] var n_0)) ([uint 32] binop BiShl ([uint 32] var self) ([uint 32] binop BiRem ([uint 32] binop BiSub ([uint 32] simple_literal 64) ([uint 32] var n_0)) ([uint 32] simple_literal 64)))) ([uint 32] var __result)) 
fn core_num_uint__Int_swap_bytes 0 0 args 1 self [uint 32] return [uint 32] 1 core_num_Int_swap_bytes 0 1 [uint 32] body ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] unsafe 1 let __result [uint 32] ([uint 32] cast ([uint 64] call core_intrinsics_bswap64 0 0 1 ([uint 64] cast ([uint 32] var self) [uint 64])) [uint 32]) ([uint 32] var __result)) ([uint 32] var __result_0)) 
fn core_num_uint__Int_checked_div 0 0 args 2 self [uint 32] v [uint 32] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_Int_checked_div 0 1 [uint 32] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] match ([uint 32] var v) 2 ([uint 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_None 0 0) ([uint 32] var v_0) ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] binop BiDiv ([uint 32] var self) ([uint 32] var v_0)))) ([adt core_option_Option 0 1 [uint 32]] var __result)) 
fn core_num_i8__Int_zero 0 0 args 0 return [int 8] 1 core_num_Int_zero 0 1 [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] simple_literal 0) ([int 8] var __result)) 
fn core_num_i8__Int_one 0 0 args 0 return [int 8] 1 core_num_Int_one 0 1 [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] simple_literal 1) ([int 8] var __result)) 
fn core_num_i8__Int_min_value 0 0 args 0 return [int 8] 1 core_num_Int_min_value 0 1 [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] binop BiShl ([int 8] cast ([int 8] unop UnNeg ([int 8] simple_literal 1)) [int 8]) ([int 32] binop BiSub ([int 32] simple_literal 8) ([int 32] simple_literal 1))) ([int 8] var __result)) 
fn core_num_i8__Int_max_value 0 0 args 0 return [int 8] 1 core_num_Int_max_value 0 1 [int 8] body ([int 8] block 2 let min [int 8] ([int 8] call core_num_Int_min_value 0 1 [int 8] 0) let __result [int 8] ([int 8] unop UnNot ([int 8] var min)) ([int 8] var __result)) 
fn core_num_i8__Int_count_ones 0 0 args 1 self [int 8] return [uint 32] 1 core_num_Int_count_ones 0 1 [int 8] body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_num_Int_count_ones 0 1 [uint 8] 1 ([uint 8] cast ([int 8] var self) [uint 8])) ([uint 32] var __result)) 
fn core_num_i8__Int_leading_zeros 0 0 args 1 self [int 8] return [uint 32] 1 core_num_Int_leading_zeros 0 1 [int 8] body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_num_Int_leading_zeros 0 1 [uint 8] 1 ([uint 8] cast ([int 8] var self) [uint 8])) ([uint 32] var __result)) 
fn core_num_i8__Int_trailing_zeros 0 0 args 1 self [int 8] return [uint 32] 1 core_num_Int_trailing_zeros 0 1 [int 8] body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_num_Int_trailing_zeros 0 1 [uint 8] 1 ([uint 8] cast ([int 8] var self) [uint 8])) ([uint 32] var __result)) 
fn core_num_i8__Int_rotate_left 0 0 args 2 self [int 8] n [uint 32] return [int 8] 1 core_num_Int_rotate_left 0 1 [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] cast ([uint 8] call core_num_Int_rotate_left 0 1 [uint 8] 2 ([uint 8] cast ([int 8] var self) [uint 8]) ([uint 32] var n)) [int 8]) ([int 8] var __result)) 
fn core_num_i8__Int_rotate_right 0 0 args 2 self [int 8] n [uint 32] return [int 8] 1 core_num_Int_rotate_right 0 1 [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] cast ([uint 8] call core_num_Int_rotate_right 0 1 [uint 8] 2 ([uint 8] cast ([int 8] var self) [uint 8]) ([uint 32] var n)) [int 8]) ([int 8] var __result)) 
fn core_num_i8__Int_swap_bytes 0 0 args 1 self [int 8] return [int 8] 1 core_num_Int_swap_bytes 0 1 [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] cast ([uint 8] call core_num_Int_swap_bytes 0 1 [uint 8] 1 ([uint 8] cast ([int 8] var self) [uint 8])) [int 8]) ([int 8] var __result)) 
fn core_num_i16__Int_zero 0 0 args 0 return [int 16] 1 core_num_Int_zero 0 1 [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] simple_literal 0) ([int 16] var __result)) 
fn core_num_i16__Int_one 0 0 args 0 return [int 16] 1 core_num_Int_one 0 1 [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] simple_literal 1) ([int 16] var __result)) 
fn core_num_i16__Int_min_value 0 0 args 0 return [int 16] 1 core_num_Int_min_value 0 1 [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] binop BiShl ([int 16] cast ([int 16] unop UnNeg ([int 16] simple_literal 1)) [int 16]) ([int 32] binop BiSub ([int 32] simple_literal 16) ([int 32] simple_literal 1))) ([int 16] var __result)) 
fn core_num_i16__Int_max_value 0 0 args 0 return [int 16] 1 core_num_Int_max_value 0 1 [int 16] body ([int 16] block 2 let min [int 16] ([int 16] call core_num_Int_min_value 0 1 [int 16] 0) let __result [int 16] ([int 16] unop UnNot ([int 16] var min)) ([int 16] var __result)) 
fn core_num_i16__Int_count_ones 0 0 args 1 self [int 16] return [uint 32] 1 core_num_Int_count_ones 0 1 [int 16] body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_num_Int_count_ones 0 1 [uint 16] 1 ([uint 16] cast ([int 16] var self) [uint 16])) ([uint 32] var __result)) 
fn core_num_i16__Int_leading_zeros 0 0 args 1 self [int 16] return [uint 32] 1 core_num_Int_leading_zeros 0 1 [int 16] body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_num_Int_leading_zeros 0 1 [uint 16] 1 ([uint 16] cast ([int 16] var self) [uint 16])) ([uint 32] var __result)) 
fn core_num_i16__Int_trailing_zeros 0 0 args 1 self [int 16] return [uint 32] 1 core_num_Int_trailing_zeros 0 1 [int 16] body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_num_Int_trailing_zeros 0 1 [uint 16] 1 ([uint 16] cast ([int 16] var self) [uint 16])) ([uint 32] var __result)) 
fn core_num_i16__Int_rotate_left 0 0 args 2 self [int 16] n [uint 32] return [int 16] 1 core_num_Int_rotate_left 0 1 [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] cast ([uint 16] call core_num_Int_rotate_left 0 1 [uint 16] 2 ([uint 16] cast ([int 16] var self) [uint 16]) ([uint 32] var n)) [int 16]) ([int 16] var __result)) 
fn core_num_i16__Int_rotate_right 0 0 args 2 self [int 16] n [uint 32] return [int 16] 1 core_num_Int_rotate_right 0 1 [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] cast ([uint 16] call core_num_Int_rotate_right 0 1 [uint 16] 2 ([uint 16] cast ([int 16] var self) [uint 16]) ([uint 32] var n)) [int 16]) ([int 16] var __result)) 
fn core_num_i16__Int_swap_bytes 0 0 args 1 self [int 16] return [int 16] 1 core_num_Int_swap_bytes 0 1 [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] cast ([uint 16] call core_num_Int_swap_bytes 0 1 [uint 16] 1 ([uint 16] cast ([int 16] var self) [uint 16])) [int 16]) ([int 16] var __result)) 
fn core_num_i32__Int_zero 0 0 args 0 return [int 32] 1 core_num_Int_zero 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] simple_literal 0) ([int 32] var __result)) 
fn core_num_i32__Int_one 0 0 args 0 return [int 32] 1 core_num_Int_one 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] simple_literal 1) ([int 32] var __result)) 
fn core_num_i32__Int_min_value 0 0 args 0 return [int 32] 1 core_num_Int_min_value 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShl ([int 32] cast ([int 32] unop UnNeg ([int 32] simple_literal 1)) [int 32]) ([int 32] binop BiSub ([int 32] simple_literal 32) ([int 32] simple_literal 1))) ([int 32] var __result)) 
fn core_num_i32__Int_max_value 0 0 args 0 return [int 32] 1 core_num_Int_max_value 0 1 [int 32] body ([int 32] block 2 let min [int 32] ([int 32] call core_num_Int_min_value 0 1 [int 32] 0) let __result [int 32] ([int 32] unop UnNot ([int 32] var min)) ([int 32] var __result)) 
fn core_num_i32__Int_count_ones 0 0 args 1 self [int 32] return [uint 32] 1 core_num_Int_count_ones 0 1 [int 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_num_Int_count_ones 0 1 [uint 32] 1 ([uint 32] cast ([int 32] var self) [uint 32])) ([uint 32] var __result)) 
fn core_num_i32__Int_leading_zeros 0 0 args 1 self [int 32] return [uint 32] 1 core_num_Int_leading_zeros 0 1 [int 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_num_Int_leading_zeros 0 1 [uint 32] 1 ([uint 32] cast ([int 32] var self) [uint 32])) ([uint 32] var __result)) 
fn core_num_i32__Int_trailing_zeros 0 0 args 1 self [int 32] return [uint 32] 1 core_num_Int_trailing_zeros 0 1 [int 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_num_Int_trailing_zeros 0 1 [uint 32] 1 ([uint 32] cast ([int 32] var self) [uint 32])) ([uint 32] var __result)) 
fn core_num_i32__Int_rotate_left 0 0 args 2 self [int 32] n [uint 32] return [int 32] 1 core_num_Int_rotate_left 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] cast ([uint 32] call core_num_Int_rotate_left 0 1 [uint 32] 2 ([uint 32] cast ([int 32] var self) [uint 32]) ([uint 32] var n)) [int 32]) ([int 32] var __result)) 
fn core_num_i32__Int_rotate_right 0 0 args 2 self [int 32] n [uint 32] return [int 32] 1 core_num_Int_rotate_right 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] cast ([uint 32] call core_num_Int_rotate_right 0 1 [uint 32] 2 ([uint 32] cast ([int 32] var self) [uint 32]) ([uint 32] var n)) [int 32]) ([int 32] var __result)) 
fn core_num_i32__Int_swap_bytes 0 0 args 1 self [int 32] return [int 32] 1 core_num_Int_swap_bytes 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] cast ([uint 32] call core_num_Int_swap_bytes 0 1 [uint 32] 1 ([uint 32] cast ([int 32] var self) [uint 32])) [int 32]) ([int 32] var __result)) 
fn core_num_i64__Int_zero 0 0 args 0 return [int 64] 1 core_num_Int_zero 0 1 [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] simple_literal 0) ([int 64] var __result)) 
fn core_num_i64__Int_one 0 0 args 0 return [int 64] 1 core_num_Int_one 0 1 [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] simple_literal 1) ([int 64] var __result)) 
fn core_num_i64__Int_min_value 0 0 args 0 return [int 64] 1 core_num_Int_min_value 0 1 [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] binop BiShl ([int 64] cast ([int 64] unop UnNeg ([int 64] simple_literal 1)) [int 64]) ([int 32] binop BiSub ([int 32] simple_literal 64) ([int 32] simple_literal 1))) ([int 64] var __result)) 
fn core_num_i64__Int_max_value 0 0 args 0 return [int 64] 1 core_num_Int_max_value 0 1 [int 64] body ([int 64] block 2 let min [int 64] ([int 64] call core_num_Int_min_value 0 1 [int 64] 0) let __result [int 64] ([int 64] unop UnNot ([int 64] var min)) ([int 64] var __result)) 
fn core_num_i64__Int_count_ones 0 0 args 1 self [int 64] return [uint 32] 1 core_num_Int_count_ones 0 1 [int 64] body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_num_Int_count_ones 0 1 [uint 64] 1 ([uint 64] cast ([int 64] var self) [uint 64])) ([uint 32] var __result)) 
fn core_num_i64__Int_leading_zeros 0 0 args 1 self [int 64] return [uint 32] 1 core_num_Int_leading_zeros 0 1 [int 64] body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_num_Int_leading_zeros 0 1 [uint 64] 1 ([uint 64] cast ([int 64] var self) [uint 64])) ([uint 32] var __result)) 
fn core_num_i64__Int_trailing_zeros 0 0 args 1 self [int 64] return [uint 32] 1 core_num_Int_trailing_zeros 0 1 [int 64] body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_num_Int_trailing_zeros 0 1 [uint 64] 1 ([uint 64] cast ([int 64] var self) [uint 64])) ([uint 32] var __result)) 
fn core_num_i64__Int_rotate_left 0 0 args 2 self [int 64] n [uint 32] return [int 64] 1 core_num_Int_rotate_left 0 1 [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] cast ([uint 64] call core_num_Int_rotate_left 0 1 [uint 64] 2 ([uint 64] cast ([int 64] var self) [uint 64]) ([uint 32] var n)) [int 64]) ([int 64] var __result)) 
fn core_num_i64__Int_rotate_right 0 0 args 2 self [int 64] n [uint 32] return [int 64] 1 core_num_Int_rotate_right 0 1 [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] cast ([uint 64] call core_num_Int_rotate_right 0 1 [uint 64] 2 ([uint 64] cast ([int 64] var self) [uint 64]) ([uint 32] var n)) [int 64]) ([int 64] var __result)) 
fn core_num_i64__Int_swap_bytes 0 0 args 1 self [int 64] return [int 64] 1 core_num_Int_swap_bytes 0 1 [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] cast ([uint 64] call core_num_Int_swap_bytes 0 1 [uint 64] 1 ([uint 64] cast ([int 64] var self) [uint 64])) [int 64]) ([int 64] var __result)) 
fn core_num_int__Int_zero 0 0 args 0 return [int 32] 1 core_num_Int_zero 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] simple_literal 0) ([int 32] var __result)) 
fn core_num_int__Int_one 0 0 args 0 return [int 32] 1 core_num_Int_one 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] simple_literal 1) ([int 32] var __result)) 
fn core_num_int__Int_min_value 0 0 args 0 return [int 32] 1 core_num_Int_min_value 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShl ([int 32] cast ([int 32] unop UnNeg ([int 32] simple_literal 1)) [int 32]) ([int 32] binop BiSub ([int 32] simple_literal 64) ([int 32] simple_literal 1))) ([int 32] var __result)) 
fn core_num_int__Int_max_value 0 0 args 0 return [int 32] 1 core_num_Int_max_value 0 1 [int 32] body ([int 32] block 2 let min [int 32] ([int 32] call core_num_Int_min_value 0 1 [int 32] 0) let __result [int 32] ([int 32] unop UnNot ([int 32] var min)) ([int 32] var __result)) 
fn core_num_int__Int_count_ones 0 0 args 1 self [int 32] return [uint 32] 1 core_num_Int_count_ones 0 1 [int 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_num_Int_count_ones 0 1 [uint 64] 1 ([uint 64] cast ([int 32] var self) [uint 64])) ([uint 32] var __result)) 
fn core_num_int__Int_leading_zeros 0 0 args 1 self [int 32] return [uint 32] 1 core_num_Int_leading_zeros 0 1 [int 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_num_Int_leading_zeros 0 1 [uint 64] 1 ([uint 64] cast ([int 32] var self) [uint 64])) ([uint 32] var __result)) 
fn core_num_int__Int_trailing_zeros 0 0 args 1 self [int 32] return [uint 32] 1 core_num_Int_trailing_zeros 0 1 [int 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_num_Int_trailing_zeros 0 1 [uint 64] 1 ([uint 64] cast ([int 32] var self) [uint 64])) ([uint 32] var __result)) 
fn core_num_int__Int_rotate_left 0 0 args 2 self [int 32] n [uint 32] return [int 32] 1 core_num_Int_rotate_left 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] cast ([uint 64] call core_num_Int_rotate_left 0 1 [uint 64] 2 ([uint 64] cast ([int 32] var self) [uint 64]) ([uint 32] var n)) [int 32]) ([int 32] var __result)) 
fn core_num_int__Int_rotate_right 0 0 args 2 self [int 32] n [uint 32] return [int 32] 1 core_num_Int_rotate_right 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] cast ([uint 64] call core_num_Int_rotate_right 0 1 [uint 64] 2 ([uint 64] cast ([int 32] var self) [uint 64]) ([uint 32] var n)) [int 32]) ([int 32] var __result)) 
fn core_num_int__Int_swap_bytes 0 0 args 1 self [int 32] return [int 32] 1 core_num_Int_swap_bytes 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] cast ([uint 64] call core_num_Int_swap_bytes 0 1 [uint 64] 1 ([uint 64] cast ([int 32] var self) [uint 64])) [int 32]) ([int 32] var __result)) 
fn core_num_i8__SignedInt_abs 0 0 args 1 self [int 8] return [int 8] 1 core_num_SignedInt_abs 0 1 [int 8] body ([int 8] block 1 let __result_1 [int 8] ([int 8] match ([int 32] cast ([bool] call core_num_SignedInt_is_negative 0 1 [int 8] 1 ([int 8] var self)) [int 32]) 2 ([int 32] simple_literal 0) ([int 8] block 1 let __result [int 8] ([int 8] var self) ([int 8] var __result)) ([int 32] wild) ([int 8] block 1 let __result_0 [int 8] ([int 8] unop UnNeg ([int 8] var self)) ([int 8] var __result_0))) ([int 8] var __result_1)) 
fn core_num_i8__SignedInt_is_positive 0 0 args 1 self [int 8] return [bool] 1 core_num_SignedInt_is_positive 0 1 [int 8] body ([bool] block 1 let __result [bool] ([bool] binop BiGt ([int 8] var self) ([int 8] simple_literal 0)) ([bool] var __result)) 
fn core_num_i8__SignedInt_is_negative 0 0 args 1 self [int 8] return [bool] 1 core_num_SignedInt_is_negative 0 1 [int 8] body ([bool] block 1 let __result [bool] ([bool] binop BiLt ([int 8] var self) ([int 8] simple_literal 0)) ([bool] var __result)) 
fn core_num_i16__SignedInt_abs 0 0 args 1 self [int 16] return [int 16] 1 core_num_SignedInt_abs 0 1 [int 16] body ([int 16] block 1 let __result_1 [int 16] ([int 16] match ([int 32] cast ([bool] call core_num_SignedInt_is_negative 0 1 [int 16] 1 ([int 16] var self)) [int 32]) 2 ([int 32] simple_literal 0) ([int 16] block 1 let __result [int 16] ([int 16] var self) ([int 16] var __result)) ([int 32] wild) ([int 16] block 1 let __result_0 [int 16] ([int 16] unop UnNeg ([int 16] var self)) ([int 16] var __result_0))) ([int 16] var __result_1)) 
fn core_num_i16__SignedInt_is_positive 0 0 args 1 self [int 16] return [bool] 1 core_num_SignedInt_is_positive 0 1 [int 16] body ([bool] block 1 let __result [bool] ([bool] binop BiGt ([int 16] var self) ([int 16] simple_literal 0)) ([bool] var __result)) 
fn core_num_i16__SignedInt_is_negative 0 0 args 1 self [int 16] return [bool] 1 core_num_SignedInt_is_negative 0 1 [int 16] body ([bool] block 1 let __result [bool] ([bool] binop BiLt ([int 16] var self) ([int 16] simple_literal 0)) ([bool] var __result)) 
fn core_num_i32__SignedInt_abs 0 0 args 1 self [int 32] return [int 32] 1 core_num_SignedInt_abs 0 1 [int 32] body ([int 32] block 1 let __result_1 [int 32] ([int 32] match ([int 32] cast ([bool] call core_num_SignedInt_is_negative 0 1 [int 32] 1 ([int 32] var self)) [int 32]) 2 ([int 32] simple_literal 0) ([int 32] block 1 let __result [int 32] ([int 32] var self) ([int 32] var __result)) ([int 32] wild) ([int 32] block 1 let __result_0 [int 32] ([int 32] unop UnNeg ([int 32] var self)) ([int 32] var __result_0))) ([int 32] var __result_1)) 
fn core_num_i32__SignedInt_is_positive 0 0 args 1 self [int 32] return [bool] 1 core_num_SignedInt_is_positive 0 1 [int 32] body ([bool] block 1 let __result [bool] ([bool] binop BiGt ([int 32] var self) ([int 32] simple_literal 0)) ([bool] var __result)) 
fn core_num_i32__SignedInt_is_negative 0 0 args 1 self [int 32] return [bool] 1 core_num_SignedInt_is_negative 0 1 [int 32] body ([bool] block 1 let __result [bool] ([bool] binop BiLt ([int 32] var self) ([int 32] simple_literal 0)) ([bool] var __result)) 
fn core_num_i64__SignedInt_abs 0 0 args 1 self [int 64] return [int 64] 1 core_num_SignedInt_abs 0 1 [int 64] body ([int 64] block 1 let __result_1 [int 64] ([int 64] match ([int 32] cast ([bool] call core_num_SignedInt_is_negative 0 1 [int 64] 1 ([int 64] var self)) [int 32]) 2 ([int 32] simple_literal 0) ([int 64] block 1 let __result [int 64] ([int 64] var self) ([int 64] var __result)) ([int 32] wild) ([int 64] block 1 let __result_0 [int 64] ([int 64] unop UnNeg ([int 64] var self)) ([int 64] var __result_0))) ([int 64] var __result_1)) 
fn core_num_i64__SignedInt_is_positive 0 0 args 1 self [int 64] return [bool] 1 core_num_SignedInt_is_positive 0 1 [int 64] body ([bool] block 1 let __result [bool] ([bool] binop BiGt ([int 64] var self) ([int 64] simple_literal 0)) ([bool] var __result)) 
fn core_num_i64__SignedInt_is_negative 0 0 args 1 self [int 64] return [bool] 1 core_num_SignedInt_is_negative 0 1 [int 64] body ([bool] block 1 let __result [bool] ([bool] binop BiLt ([int 64] var self) ([int 64] simple_literal 0)) ([bool] var __result)) 
fn core_num_int__SignedInt_abs 0 0 args 1 self [int 32] return [int 32] 1 core_num_SignedInt_abs 0 1 [int 32] body ([int 32] block 1 let __result_1 [int 32] ([int 32] match ([int 32] cast ([bool] call core_num_SignedInt_is_negative 0 1 [int 32] 1 ([int 32] var self)) [int 32]) 2 ([int 32] simple_literal 0) ([int 32] block 1 let __result [int 32] ([int 32] var self) ([int 32] var __result)) ([int 32] wild) ([int 32] block 1 let __result_0 [int 32] ([int 32] unop UnNeg ([int 32] var self)) ([int 32] var __result_0))) ([int 32] var __result_1)) 
fn core_num_int__SignedInt_is_positive 0 0 args 1 self [int 32] return [bool] 1 core_num_SignedInt_is_positive 0 1 [int 32] body ([bool] block 1 let __result [bool] ([bool] binop BiGt ([int 32] var self) ([int 32] simple_literal 0)) ([bool] var __result)) 
fn core_num_int__SignedInt_is_negative 0 0 args 1 self [int 32] return [bool] 1 core_num_SignedInt_is_negative 0 1 [int 32] body ([bool] block 1 let __result [bool] ([bool] binop BiLt ([int 32] var self) ([int 32] simple_literal 0)) ([bool] var __result)) 
fn core_num_int__ToPrimitive_to_int 0 0 args 1 self [ref r_anon_0 [int 32]] return [adt core_option_Option 0 1 [int 32]] 1 core_num_ToPrimitive_to_int 0 1 [int 32] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result_4 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] block 1 let __result_3 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [int 32] 0) ([uint 32] call core_mem_size_of 0 1 [int 32] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 32]] block 4 let n [int 64] ([int 64] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [int 64]) let min_value [int 32] ([int 32] call core_num_Int_min_value 0 1 [int 32] 0) let max_value [int 32] ([int 32] call core_num_Int_max_value 0 1 [int 32] 0) let __result_1 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 64] cast ([int 32] var min_value) [int 64]) ([int 64] var n)) ([bool] binop BiLe ([int 64] var n) ([int 64] cast ([int 32] var max_value) [int 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 32]] block 1 let __result_0 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_Some 1 1 ([int 32] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [int 32])) ([adt core_option_Option 0 1 [int 32]] var __result_0))) ([adt core_option_Option 0 1 [int 32]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [int 32]] block 1 let __result_2 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_Some 1 1 ([int 32] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [int 32])) ([adt core_option_Option 0 1 [int 32]] var __result_2))) ([adt core_option_Option 0 1 [int 32]] var __result_3)) ([adt core_option_Option 0 1 [int 32]] var __result_4)) 
fn core_num_int__ToPrimitive_to_i8 0 0 args 1 self [ref r_anon_0 [int 32]] return [adt core_option_Option 0 1 [int 8]] 1 core_num_ToPrimitive_to_i8 0 1 [int 32] body ([adt core_option_Option 0 1 [int 8]] block 1 let __result_4 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] block 1 let __result_3 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [int 32] 0) ([uint 32] call core_mem_size_of 0 1 [int 8] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 8]] block 4 let n [int 64] ([int 64] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [int 64]) let min_value [int 8] ([int 8] call core_num_Int_min_value 0 1 [int 8] 0) let max_value [int 8] ([int 8] call core_num_Int_max_value 0 1 [int 8] 0) let __result_1 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 64] cast ([int 8] var min_value) [int 64]) ([int 64] var n)) ([bool] binop BiLe ([int 64] var n) ([int 64] cast ([int 8] var max_value) [int 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 8]] block 1 let __result [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 8]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 8]] block 1 let __result_0 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] enum_literal core_option_Some 1 1 ([int 8] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [int 8])) ([adt core_option_Option 0 1 [int 8]] var __result_0))) ([adt core_option_Option 0 1 [int 8]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [int 8]] block 1 let __result_2 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] enum_literal core_option_Some 1 1 ([int 8] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [int 8])) ([adt core_option_Option 0 1 [int 8]] var __result_2))) ([adt core_option_Option 0 1 [int 8]] var __result_3)) ([adt core_option_Option 0 1 [int 8]] var __result_4)) 
fn core_num_int__ToPrimitive_to_i16 0 0 args 1 self [ref r_anon_0 [int 32]] return [adt core_option_Option 0 1 [int 16]] 1 core_num_ToPrimitive_to_i16 0 1 [int 32] body ([adt core_option_Option 0 1 [int 16]] block 1 let __result_4 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] block 1 let __result_3 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [int 32] 0) ([uint 32] call core_mem_size_of 0 1 [int 16] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 16]] block 4 let n [int 64] ([int 64] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [int 64]) let min_value [int 16] ([int 16] call core_num_Int_min_value 0 1 [int 16] 0) let max_value [int 16] ([int 16] call core_num_Int_max_value 0 1 [int 16] 0) let __result_1 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 64] cast ([int 16] var min_value) [int 64]) ([int 64] var n)) ([bool] binop BiLe ([int 64] var n) ([int 64] cast ([int 16] var max_value) [int 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 16]] block 1 let __result [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 16]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 16]] block 1 let __result_0 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] enum_literal core_option_Some 1 1 ([int 16] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [int 16])) ([adt core_option_Option 0 1 [int 16]] var __result_0))) ([adt core_option_Option 0 1 [int 16]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [int 16]] block 1 let __result_2 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] enum_literal core_option_Some 1 1 ([int 16] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [int 16])) ([adt core_option_Option 0 1 [int 16]] var __result_2))) ([adt core_option_Option 0 1 [int 16]] var __result_3)) ([adt core_option_Option 0 1 [int 16]] var __result_4)) 
fn core_num_int__ToPrimitive_to_i32 0 0 args 1 self [ref r_anon_0 [int 32]] return [adt core_option_Option 0 1 [int 32]] 1 core_num_ToPrimitive_to_i32 0 1 [int 32] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result_4 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] block 1 let __result_3 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [int 32] 0) ([uint 32] call core_mem_size_of 0 1 [int 32] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 32]] block 4 let n [int 64] ([int 64] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [int 64]) let min_value [int 32] ([int 32] call core_num_Int_min_value 0 1 [int 32] 0) let max_value [int 32] ([int 32] call core_num_Int_max_value 0 1 [int 32] 0) let __result_1 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 64] cast ([int 32] var min_value) [int 64]) ([int 64] var n)) ([bool] binop BiLe ([int 64] var n) ([int 64] cast ([int 32] var max_value) [int 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 32]] block 1 let __result_0 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_Some 1 1 ([int 32] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [int 32])) ([adt core_option_Option 0 1 [int 32]] var __result_0))) ([adt core_option_Option 0 1 [int 32]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [int 32]] block 1 let __result_2 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_Some 1 1 ([int 32] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [int 32])) ([adt core_option_Option 0 1 [int 32]] var __result_2))) ([adt core_option_Option 0 1 [int 32]] var __result_3)) ([adt core_option_Option 0 1 [int 32]] var __result_4)) 
fn core_num_int__ToPrimitive_to_i64 0 0 args 1 self [ref r_anon_0 [int 32]] return [adt core_option_Option 0 1 [int 64]] 1 core_num_ToPrimitive_to_i64 0 1 [int 32] body ([adt core_option_Option 0 1 [int 64]] block 1 let __result_4 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] block 1 let __result_3 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [int 32] 0) ([uint 32] call core_mem_size_of 0 1 [int 64] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 64]] block 4 let n [int 64] ([int 64] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [int 64]) let min_value [int 64] ([int 64] call core_num_Int_min_value 0 1 [int 64] 0) let max_value [int 64] ([int 64] call core_num_Int_max_value 0 1 [int 64] 0) let __result_1 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 64] cast ([int 64] var min_value) [int 64]) ([int 64] var n)) ([bool] binop BiLe ([int 64] var n) ([int 64] cast ([int 64] var max_value) [int 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 64]] block 1 let __result [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 64]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 64]] block 1 let __result_0 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] enum_literal core_option_Some 1 1 ([int 64] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [int 64])) ([adt core_option_Option 0 1 [int 64]] var __result_0))) ([adt core_option_Option 0 1 [int 64]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [int 64]] block 1 let __result_2 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] enum_literal core_option_Some 1 1 ([int 64] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [int 64])) ([adt core_option_Option 0 1 [int 64]] var __result_2))) ([adt core_option_Option 0 1 [int 64]] var __result_3)) ([adt core_option_Option 0 1 [int 64]] var __result_4)) 
fn core_num_int__ToPrimitive_to_uint 0 0 args 1 self [ref r_anon_0 [int 32]] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_ToPrimitive_to_uint 0 1 [int 32] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] block 3 let zero [int 32] ([int 32] call core_num_Int_zero 0 1 [int 32] 0) let max_value [uint 32] ([uint 32] call core_num_Int_max_value 0 1 [uint 32] 0) let __result_1 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 32] var zero) ([int 32] deref ([ref r_anon_0 [int 32]] var self))) ([bool] binop BiLe ([uint 64] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [uint 64]) ([uint 64] cast ([uint 32] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [uint 32])) ([adt core_option_Option 0 1 [uint 32]] var __result_0))) ([adt core_option_Option 0 1 [uint 32]] var __result_1)) ([adt core_option_Option 0 1 [uint 32]] var __result_2)) 
fn core_num_int__ToPrimitive_to_u8 0 0 args 1 self [ref r_anon_0 [int 32]] return [adt core_option_Option 0 1 [uint 8]] 1 core_num_ToPrimitive_to_u8 0 1 [int 32] body ([adt core_option_Option 0 1 [uint 8]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] block 3 let zero [int 32] ([int 32] call core_num_Int_zero 0 1 [int 32] 0) let max_value [uint 8] ([uint 8] call core_num_Int_max_value 0 1 [uint 8] 0) let __result_1 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 32] var zero) ([int 32] deref ([ref r_anon_0 [int 32]] var self))) ([bool] binop BiLe ([uint 64] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [uint 64]) ([uint 64] cast ([uint 8] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 8]] block 1 let __result [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 8]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 8]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] enum_literal core_option_Some 1 1 ([uint 8] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [uint 8])) ([adt core_option_Option 0 1 [uint 8]] var __result_0))) ([adt core_option_Option 0 1 [uint 8]] var __result_1)) ([adt core_option_Option 0 1 [uint 8]] var __result_2)) 
fn core_num_int__ToPrimitive_to_u16 0 0 args 1 self [ref r_anon_0 [int 32]] return [adt core_option_Option 0 1 [uint 16]] 1 core_num_ToPrimitive_to_u16 0 1 [int 32] body ([adt core_option_Option 0 1 [uint 16]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] block 3 let zero [int 32] ([int 32] call core_num_Int_zero 0 1 [int 32] 0) let max_value [uint 16] ([uint 16] call core_num_Int_max_value 0 1 [uint 16] 0) let __result_1 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 32] var zero) ([int 32] deref ([ref r_anon_0 [int 32]] var self))) ([bool] binop BiLe ([uint 64] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [uint 64]) ([uint 64] cast ([uint 16] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 16]] block 1 let __result [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 16]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 16]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] enum_literal core_option_Some 1 1 ([uint 16] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [uint 16])) ([adt core_option_Option 0 1 [uint 16]] var __result_0))) ([adt core_option_Option 0 1 [uint 16]] var __result_1)) ([adt core_option_Option 0 1 [uint 16]] var __result_2)) 
fn core_num_int__ToPrimitive_to_u32 0 0 args 1 self [ref r_anon_0 [int 32]] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_ToPrimitive_to_u32 0 1 [int 32] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] block 3 let zero [int 32] ([int 32] call core_num_Int_zero 0 1 [int 32] 0) let max_value [uint 32] ([uint 32] call core_num_Int_max_value 0 1 [uint 32] 0) let __result_1 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 32] var zero) ([int 32] deref ([ref r_anon_0 [int 32]] var self))) ([bool] binop BiLe ([uint 64] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [uint 64]) ([uint 64] cast ([uint 32] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [uint 32])) ([adt core_option_Option 0 1 [uint 32]] var __result_0))) ([adt core_option_Option 0 1 [uint 32]] var __result_1)) ([adt core_option_Option 0 1 [uint 32]] var __result_2)) 
fn core_num_int__ToPrimitive_to_u64 0 0 args 1 self [ref r_anon_0 [int 32]] return [adt core_option_Option 0 1 [uint 64]] 1 core_num_ToPrimitive_to_u64 0 1 [int 32] body ([adt core_option_Option 0 1 [uint 64]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] block 3 let zero [int 32] ([int 32] call core_num_Int_zero 0 1 [int 32] 0) let max_value [uint 64] ([uint 64] call core_num_Int_max_value 0 1 [uint 64] 0) let __result_1 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 32] var zero) ([int 32] deref ([ref r_anon_0 [int 32]] var self))) ([bool] binop BiLe ([uint 64] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [uint 64]) ([uint 64] cast ([uint 64] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 64]] block 1 let __result [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 64]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 64]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] enum_literal core_option_Some 1 1 ([uint 64] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [uint 64])) ([adt core_option_Option 0 1 [uint 64]] var __result_0))) ([adt core_option_Option 0 1 [uint 64]] var __result_1)) ([adt core_option_Option 0 1 [uint 64]] var __result_2)) 
fn core_num_i8__ToPrimitive_to_int 0 0 args 1 self [ref r_anon_0 [int 8]] return [adt core_option_Option 0 1 [int 32]] 1 core_num_ToPrimitive_to_int 0 1 [int 8] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result_4 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] block 1 let __result_3 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [int 8] 0) ([uint 32] call core_mem_size_of 0 1 [int 32] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 32]] block 4 let n [int 64] ([int 64] cast ([int 8] deref ([ref r_anon_0 [int 8]] var self)) [int 64]) let min_value [int 32] ([int 32] call core_num_Int_min_value 0 1 [int 32] 0) let max_value [int 32] ([int 32] call core_num_Int_max_value 0 1 [int 32] 0) let __result_1 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 64] cast ([int 32] var min_value) [int 64]) ([int 64] var n)) ([bool] binop BiLe ([int 64] var n) ([int 64] cast ([int 32] var max_value) [int 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 32]] block 1 let __result_0 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_Some 1 1 ([int 32] cast ([int 8] deref ([ref r_anon_0 [int 8]] var self)) [int 32])) ([adt core_option_Option 0 1 [int 32]] var __result_0))) ([adt core_option_Option 0 1 [int 32]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [int 32]] block 1 let __result_2 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_Some 1 1 ([int 32] cast ([int 8] deref ([ref r_anon_0 [int 8]] var self)) [int 32])) ([adt core_option_Option 0 1 [int 32]] var __result_2))) ([adt core_option_Option 0 1 [int 32]] var __result_3)) ([adt core_option_Option 0 1 [int 32]] var __result_4)) 
fn core_num_i8__ToPrimitive_to_i8 0 0 args 1 self [ref r_anon_0 [int 8]] return [adt core_option_Option 0 1 [int 8]] 1 core_num_ToPrimitive_to_i8 0 1 [int 8] body ([adt core_option_Option 0 1 [int 8]] block 1 let __result_4 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] block 1 let __result_3 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [int 8] 0) ([uint 32] call core_mem_size_of 0 1 [int 8] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 8]] block 4 let n [int 64] ([int 64] cast ([int 8] deref ([ref r_anon_0 [int 8]] var self)) [int 64]) let min_value [int 8] ([int 8] call core_num_Int_min_value 0 1 [int 8] 0) let max_value [int 8] ([int 8] call core_num_Int_max_value 0 1 [int 8] 0) let __result_1 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 64] cast ([int 8] var min_value) [int 64]) ([int 64] var n)) ([bool] binop BiLe ([int 64] var n) ([int 64] cast ([int 8] var max_value) [int 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 8]] block 1 let __result [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 8]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 8]] block 1 let __result_0 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] enum_literal core_option_Some 1 1 ([int 8] cast ([int 8] deref ([ref r_anon_0 [int 8]] var self)) [int 8])) ([adt core_option_Option 0 1 [int 8]] var __result_0))) ([adt core_option_Option 0 1 [int 8]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [int 8]] block 1 let __result_2 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] enum_literal core_option_Some 1 1 ([int 8] cast ([int 8] deref ([ref r_anon_0 [int 8]] var self)) [int 8])) ([adt core_option_Option 0 1 [int 8]] var __result_2))) ([adt core_option_Option 0 1 [int 8]] var __result_3)) ([adt core_option_Option 0 1 [int 8]] var __result_4)) 
fn core_num_i8__ToPrimitive_to_i16 0 0 args 1 self [ref r_anon_0 [int 8]] return [adt core_option_Option 0 1 [int 16]] 1 core_num_ToPrimitive_to_i16 0 1 [int 8] body ([adt core_option_Option 0 1 [int 16]] block 1 let __result_4 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] block 1 let __result_3 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [int 8] 0) ([uint 32] call core_mem_size_of 0 1 [int 16] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 16]] block 4 let n [int 64] ([int 64] cast ([int 8] deref ([ref r_anon_0 [int 8]] var self)) [int 64]) let min_value [int 16] ([int 16] call core_num_Int_min_value 0 1 [int 16] 0) let max_value [int 16] ([int 16] call core_num_Int_max_value 0 1 [int 16] 0) let __result_1 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 64] cast ([int 16] var min_value) [int 64]) ([int 64] var n)) ([bool] binop BiLe ([int 64] var n) ([int 64] cast ([int 16] var max_value) [int 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 16]] block 1 let __result [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 16]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 16]] block 1 let __result_0 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] enum_literal core_option_Some 1 1 ([int 16] cast ([int 8] deref ([ref r_anon_0 [int 8]] var self)) [int 16])) ([adt core_option_Option 0 1 [int 16]] var __result_0))) ([adt core_option_Option 0 1 [int 16]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [int 16]] block 1 let __result_2 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] enum_literal core_option_Some 1 1 ([int 16] cast ([int 8] deref ([ref r_anon_0 [int 8]] var self)) [int 16])) ([adt core_option_Option 0 1 [int 16]] var __result_2))) ([adt core_option_Option 0 1 [int 16]] var __result_3)) ([adt core_option_Option 0 1 [int 16]] var __result_4)) 
fn core_num_i8__ToPrimitive_to_i32 0 0 args 1 self [ref r_anon_0 [int 8]] return [adt core_option_Option 0 1 [int 32]] 1 core_num_ToPrimitive_to_i32 0 1 [int 8] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result_4 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] block 1 let __result_3 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [int 8] 0) ([uint 32] call core_mem_size_of 0 1 [int 32] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 32]] block 4 let n [int 64] ([int 64] cast ([int 8] deref ([ref r_anon_0 [int 8]] var self)) [int 64]) let min_value [int 32] ([int 32] call core_num_Int_min_value 0 1 [int 32] 0) let max_value [int 32] ([int 32] call core_num_Int_max_value 0 1 [int 32] 0) let __result_1 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 64] cast ([int 32] var min_value) [int 64]) ([int 64] var n)) ([bool] binop BiLe ([int 64] var n) ([int 64] cast ([int 32] var max_value) [int 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 32]] block 1 let __result_0 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_Some 1 1 ([int 32] cast ([int 8] deref ([ref r_anon_0 [int 8]] var self)) [int 32])) ([adt core_option_Option 0 1 [int 32]] var __result_0))) ([adt core_option_Option 0 1 [int 32]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [int 32]] block 1 let __result_2 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_Some 1 1 ([int 32] cast ([int 8] deref ([ref r_anon_0 [int 8]] var self)) [int 32])) ([adt core_option_Option 0 1 [int 32]] var __result_2))) ([adt core_option_Option 0 1 [int 32]] var __result_3)) ([adt core_option_Option 0 1 [int 32]] var __result_4)) 
fn core_num_i8__ToPrimitive_to_i64 0 0 args 1 self [ref r_anon_0 [int 8]] return [adt core_option_Option 0 1 [int 64]] 1 core_num_ToPrimitive_to_i64 0 1 [int 8] body ([adt core_option_Option 0 1 [int 64]] block 1 let __result_4 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] block 1 let __result_3 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [int 8] 0) ([uint 32] call core_mem_size_of 0 1 [int 64] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 64]] block 4 let n [int 64] ([int 64] cast ([int 8] deref ([ref r_anon_0 [int 8]] var self)) [int 64]) let min_value [int 64] ([int 64] call core_num_Int_min_value 0 1 [int 64] 0) let max_value [int 64] ([int 64] call core_num_Int_max_value 0 1 [int 64] 0) let __result_1 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 64] cast ([int 64] var min_value) [int 64]) ([int 64] var n)) ([bool] binop BiLe ([int 64] var n) ([int 64] cast ([int 64] var max_value) [int 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 64]] block 1 let __result [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 64]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 64]] block 1 let __result_0 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] enum_literal core_option_Some 1 1 ([int 64] cast ([int 8] deref ([ref r_anon_0 [int 8]] var self)) [int 64])) ([adt core_option_Option 0 1 [int 64]] var __result_0))) ([adt core_option_Option 0 1 [int 64]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [int 64]] block 1 let __result_2 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] enum_literal core_option_Some 1 1 ([int 64] cast ([int 8] deref ([ref r_anon_0 [int 8]] var self)) [int 64])) ([adt core_option_Option 0 1 [int 64]] var __result_2))) ([adt core_option_Option 0 1 [int 64]] var __result_3)) ([adt core_option_Option 0 1 [int 64]] var __result_4)) 
fn core_num_i8__ToPrimitive_to_uint 0 0 args 1 self [ref r_anon_0 [int 8]] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_ToPrimitive_to_uint 0 1 [int 8] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] block 3 let zero [int 8] ([int 8] call core_num_Int_zero 0 1 [int 8] 0) let max_value [uint 32] ([uint 32] call core_num_Int_max_value 0 1 [uint 32] 0) let __result_1 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 8] var zero) ([int 8] deref ([ref r_anon_0 [int 8]] var self))) ([bool] binop BiLe ([uint 64] cast ([int 8] deref ([ref r_anon_0 [int 8]] var self)) [uint 64]) ([uint 64] cast ([uint 32] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] cast ([int 8] deref ([ref r_anon_0 [int 8]] var self)) [uint 32])) ([adt core_option_Option 0 1 [uint 32]] var __result_0))) ([adt core_option_Option 0 1 [uint 32]] var __result_1)) ([adt core_option_Option 0 1 [uint 32]] var __result_2)) 
fn core_num_i8__ToPrimitive_to_u8 0 0 args 1 self [ref r_anon_0 [int 8]] return [adt core_option_Option 0 1 [uint 8]] 1 core_num_ToPrimitive_to_u8 0 1 [int 8] body ([adt core_option_Option 0 1 [uint 8]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] block 3 let zero [int 8] ([int 8] call core_num_Int_zero 0 1 [int 8] 0) let max_value [uint 8] ([uint 8] call core_num_Int_max_value 0 1 [uint 8] 0) let __result_1 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 8] var zero) ([int 8] deref ([ref r_anon_0 [int 8]] var self))) ([bool] binop BiLe ([uint 64] cast ([int 8] deref ([ref r_anon_0 [int 8]] var self)) [uint 64]) ([uint 64] cast ([uint 8] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 8]] block 1 let __result [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 8]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 8]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] enum_literal core_option_Some 1 1 ([uint 8] cast ([int 8] deref ([ref r_anon_0 [int 8]] var self)) [uint 8])) ([adt core_option_Option 0 1 [uint 8]] var __result_0))) ([adt core_option_Option 0 1 [uint 8]] var __result_1)) ([adt core_option_Option 0 1 [uint 8]] var __result_2)) 
fn core_num_i8__ToPrimitive_to_u16 0 0 args 1 self [ref r_anon_0 [int 8]] return [adt core_option_Option 0 1 [uint 16]] 1 core_num_ToPrimitive_to_u16 0 1 [int 8] body ([adt core_option_Option 0 1 [uint 16]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] block 3 let zero [int 8] ([int 8] call core_num_Int_zero 0 1 [int 8] 0) let max_value [uint 16] ([uint 16] call core_num_Int_max_value 0 1 [uint 16] 0) let __result_1 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 8] var zero) ([int 8] deref ([ref r_anon_0 [int 8]] var self))) ([bool] binop BiLe ([uint 64] cast ([int 8] deref ([ref r_anon_0 [int 8]] var self)) [uint 64]) ([uint 64] cast ([uint 16] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 16]] block 1 let __result [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 16]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 16]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] enum_literal core_option_Some 1 1 ([uint 16] cast ([int 8] deref ([ref r_anon_0 [int 8]] var self)) [uint 16])) ([adt core_option_Option 0 1 [uint 16]] var __result_0))) ([adt core_option_Option 0 1 [uint 16]] var __result_1)) ([adt core_option_Option 0 1 [uint 16]] var __result_2)) 
fn core_num_i8__ToPrimitive_to_u32 0 0 args 1 self [ref r_anon_0 [int 8]] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_ToPrimitive_to_u32 0 1 [int 8] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] block 3 let zero [int 8] ([int 8] call core_num_Int_zero 0 1 [int 8] 0) let max_value [uint 32] ([uint 32] call core_num_Int_max_value 0 1 [uint 32] 0) let __result_1 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 8] var zero) ([int 8] deref ([ref r_anon_0 [int 8]] var self))) ([bool] binop BiLe ([uint 64] cast ([int 8] deref ([ref r_anon_0 [int 8]] var self)) [uint 64]) ([uint 64] cast ([uint 32] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] cast ([int 8] deref ([ref r_anon_0 [int 8]] var self)) [uint 32])) ([adt core_option_Option 0 1 [uint 32]] var __result_0))) ([adt core_option_Option 0 1 [uint 32]] var __result_1)) ([adt core_option_Option 0 1 [uint 32]] var __result_2)) 
fn core_num_i8__ToPrimitive_to_u64 0 0 args 1 self [ref r_anon_0 [int 8]] return [adt core_option_Option 0 1 [uint 64]] 1 core_num_ToPrimitive_to_u64 0 1 [int 8] body ([adt core_option_Option 0 1 [uint 64]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] block 3 let zero [int 8] ([int 8] call core_num_Int_zero 0 1 [int 8] 0) let max_value [uint 64] ([uint 64] call core_num_Int_max_value 0 1 [uint 64] 0) let __result_1 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 8] var zero) ([int 8] deref ([ref r_anon_0 [int 8]] var self))) ([bool] binop BiLe ([uint 64] cast ([int 8] deref ([ref r_anon_0 [int 8]] var self)) [uint 64]) ([uint 64] cast ([uint 64] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 64]] block 1 let __result [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 64]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 64]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] enum_literal core_option_Some 1 1 ([uint 64] cast ([int 8] deref ([ref r_anon_0 [int 8]] var self)) [uint 64])) ([adt core_option_Option 0 1 [uint 64]] var __result_0))) ([adt core_option_Option 0 1 [uint 64]] var __result_1)) ([adt core_option_Option 0 1 [uint 64]] var __result_2)) 
fn core_num_i16__ToPrimitive_to_int 0 0 args 1 self [ref r_anon_0 [int 16]] return [adt core_option_Option 0 1 [int 32]] 1 core_num_ToPrimitive_to_int 0 1 [int 16] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result_4 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] block 1 let __result_3 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [int 16] 0) ([uint 32] call core_mem_size_of 0 1 [int 32] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 32]] block 4 let n [int 64] ([int 64] cast ([int 16] deref ([ref r_anon_0 [int 16]] var self)) [int 64]) let min_value [int 32] ([int 32] call core_num_Int_min_value 0 1 [int 32] 0) let max_value [int 32] ([int 32] call core_num_Int_max_value 0 1 [int 32] 0) let __result_1 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 64] cast ([int 32] var min_value) [int 64]) ([int 64] var n)) ([bool] binop BiLe ([int 64] var n) ([int 64] cast ([int 32] var max_value) [int 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 32]] block 1 let __result_0 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_Some 1 1 ([int 32] cast ([int 16] deref ([ref r_anon_0 [int 16]] var self)) [int 32])) ([adt core_option_Option 0 1 [int 32]] var __result_0))) ([adt core_option_Option 0 1 [int 32]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [int 32]] block 1 let __result_2 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_Some 1 1 ([int 32] cast ([int 16] deref ([ref r_anon_0 [int 16]] var self)) [int 32])) ([adt core_option_Option 0 1 [int 32]] var __result_2))) ([adt core_option_Option 0 1 [int 32]] var __result_3)) ([adt core_option_Option 0 1 [int 32]] var __result_4)) 
fn core_num_i16__ToPrimitive_to_i8 0 0 args 1 self [ref r_anon_0 [int 16]] return [adt core_option_Option 0 1 [int 8]] 1 core_num_ToPrimitive_to_i8 0 1 [int 16] body ([adt core_option_Option 0 1 [int 8]] block 1 let __result_4 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] block 1 let __result_3 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [int 16] 0) ([uint 32] call core_mem_size_of 0 1 [int 8] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 8]] block 4 let n [int 64] ([int 64] cast ([int 16] deref ([ref r_anon_0 [int 16]] var self)) [int 64]) let min_value [int 8] ([int 8] call core_num_Int_min_value 0 1 [int 8] 0) let max_value [int 8] ([int 8] call core_num_Int_max_value 0 1 [int 8] 0) let __result_1 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 64] cast ([int 8] var min_value) [int 64]) ([int 64] var n)) ([bool] binop BiLe ([int 64] var n) ([int 64] cast ([int 8] var max_value) [int 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 8]] block 1 let __result [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 8]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 8]] block 1 let __result_0 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] enum_literal core_option_Some 1 1 ([int 8] cast ([int 16] deref ([ref r_anon_0 [int 16]] var self)) [int 8])) ([adt core_option_Option 0 1 [int 8]] var __result_0))) ([adt core_option_Option 0 1 [int 8]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [int 8]] block 1 let __result_2 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] enum_literal core_option_Some 1 1 ([int 8] cast ([int 16] deref ([ref r_anon_0 [int 16]] var self)) [int 8])) ([adt core_option_Option 0 1 [int 8]] var __result_2))) ([adt core_option_Option 0 1 [int 8]] var __result_3)) ([adt core_option_Option 0 1 [int 8]] var __result_4)) 
fn core_num_i16__ToPrimitive_to_i16 0 0 args 1 self [ref r_anon_0 [int 16]] return [adt core_option_Option 0 1 [int 16]] 1 core_num_ToPrimitive_to_i16 0 1 [int 16] body ([adt core_option_Option 0 1 [int 16]] block 1 let __result_4 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] block 1 let __result_3 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [int 16] 0) ([uint 32] call core_mem_size_of 0 1 [int 16] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 16]] block 4 let n [int 64] ([int 64] cast ([int 16] deref ([ref r_anon_0 [int 16]] var self)) [int 64]) let min_value [int 16] ([int 16] call core_num_Int_min_value 0 1 [int 16] 0) let max_value [int 16] ([int 16] call core_num_Int_max_value 0 1 [int 16] 0) let __result_1 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 64] cast ([int 16] var min_value) [int 64]) ([int 64] var n)) ([bool] binop BiLe ([int 64] var n) ([int 64] cast ([int 16] var max_value) [int 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 16]] block 1 let __result [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 16]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 16]] block 1 let __result_0 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] enum_literal core_option_Some 1 1 ([int 16] cast ([int 16] deref ([ref r_anon_0 [int 16]] var self)) [int 16])) ([adt core_option_Option 0 1 [int 16]] var __result_0))) ([adt core_option_Option 0 1 [int 16]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [int 16]] block 1 let __result_2 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] enum_literal core_option_Some 1 1 ([int 16] cast ([int 16] deref ([ref r_anon_0 [int 16]] var self)) [int 16])) ([adt core_option_Option 0 1 [int 16]] var __result_2))) ([adt core_option_Option 0 1 [int 16]] var __result_3)) ([adt core_option_Option 0 1 [int 16]] var __result_4)) 
fn core_num_i16__ToPrimitive_to_i32 0 0 args 1 self [ref r_anon_0 [int 16]] return [adt core_option_Option 0 1 [int 32]] 1 core_num_ToPrimitive_to_i32 0 1 [int 16] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result_4 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] block 1 let __result_3 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [int 16] 0) ([uint 32] call core_mem_size_of 0 1 [int 32] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 32]] block 4 let n [int 64] ([int 64] cast ([int 16] deref ([ref r_anon_0 [int 16]] var self)) [int 64]) let min_value [int 32] ([int 32] call core_num_Int_min_value 0 1 [int 32] 0) let max_value [int 32] ([int 32] call core_num_Int_max_value 0 1 [int 32] 0) let __result_1 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 64] cast ([int 32] var min_value) [int 64]) ([int 64] var n)) ([bool] binop BiLe ([int 64] var n) ([int 64] cast ([int 32] var max_value) [int 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 32]] block 1 let __result_0 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_Some 1 1 ([int 32] cast ([int 16] deref ([ref r_anon_0 [int 16]] var self)) [int 32])) ([adt core_option_Option 0 1 [int 32]] var __result_0))) ([adt core_option_Option 0 1 [int 32]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [int 32]] block 1 let __result_2 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_Some 1 1 ([int 32] cast ([int 16] deref ([ref r_anon_0 [int 16]] var self)) [int 32])) ([adt core_option_Option 0 1 [int 32]] var __result_2))) ([adt core_option_Option 0 1 [int 32]] var __result_3)) ([adt core_option_Option 0 1 [int 32]] var __result_4)) 
fn core_num_i16__ToPrimitive_to_i64 0 0 args 1 self [ref r_anon_0 [int 16]] return [adt core_option_Option 0 1 [int 64]] 1 core_num_ToPrimitive_to_i64 0 1 [int 16] body ([adt core_option_Option 0 1 [int 64]] block 1 let __result_4 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] block 1 let __result_3 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [int 16] 0) ([uint 32] call core_mem_size_of 0 1 [int 64] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 64]] block 4 let n [int 64] ([int 64] cast ([int 16] deref ([ref r_anon_0 [int 16]] var self)) [int 64]) let min_value [int 64] ([int 64] call core_num_Int_min_value 0 1 [int 64] 0) let max_value [int 64] ([int 64] call core_num_Int_max_value 0 1 [int 64] 0) let __result_1 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 64] cast ([int 64] var min_value) [int 64]) ([int 64] var n)) ([bool] binop BiLe ([int 64] var n) ([int 64] cast ([int 64] var max_value) [int 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 64]] block 1 let __result [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 64]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 64]] block 1 let __result_0 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] enum_literal core_option_Some 1 1 ([int 64] cast ([int 16] deref ([ref r_anon_0 [int 16]] var self)) [int 64])) ([adt core_option_Option 0 1 [int 64]] var __result_0))) ([adt core_option_Option 0 1 [int 64]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [int 64]] block 1 let __result_2 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] enum_literal core_option_Some 1 1 ([int 64] cast ([int 16] deref ([ref r_anon_0 [int 16]] var self)) [int 64])) ([adt core_option_Option 0 1 [int 64]] var __result_2))) ([adt core_option_Option 0 1 [int 64]] var __result_3)) ([adt core_option_Option 0 1 [int 64]] var __result_4)) 
fn core_num_i16__ToPrimitive_to_uint 0 0 args 1 self [ref r_anon_0 [int 16]] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_ToPrimitive_to_uint 0 1 [int 16] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] block 3 let zero [int 16] ([int 16] call core_num_Int_zero 0 1 [int 16] 0) let max_value [uint 32] ([uint 32] call core_num_Int_max_value 0 1 [uint 32] 0) let __result_1 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 16] var zero) ([int 16] deref ([ref r_anon_0 [int 16]] var self))) ([bool] binop BiLe ([uint 64] cast ([int 16] deref ([ref r_anon_0 [int 16]] var self)) [uint 64]) ([uint 64] cast ([uint 32] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] cast ([int 16] deref ([ref r_anon_0 [int 16]] var self)) [uint 32])) ([adt core_option_Option 0 1 [uint 32]] var __result_0))) ([adt core_option_Option 0 1 [uint 32]] var __result_1)) ([adt core_option_Option 0 1 [uint 32]] var __result_2)) 
fn core_num_i16__ToPrimitive_to_u8 0 0 args 1 self [ref r_anon_0 [int 16]] return [adt core_option_Option 0 1 [uint 8]] 1 core_num_ToPrimitive_to_u8 0 1 [int 16] body ([adt core_option_Option 0 1 [uint 8]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] block 3 let zero [int 16] ([int 16] call core_num_Int_zero 0 1 [int 16] 0) let max_value [uint 8] ([uint 8] call core_num_Int_max_value 0 1 [uint 8] 0) let __result_1 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 16] var zero) ([int 16] deref ([ref r_anon_0 [int 16]] var self))) ([bool] binop BiLe ([uint 64] cast ([int 16] deref ([ref r_anon_0 [int 16]] var self)) [uint 64]) ([uint 64] cast ([uint 8] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 8]] block 1 let __result [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 8]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 8]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] enum_literal core_option_Some 1 1 ([uint 8] cast ([int 16] deref ([ref r_anon_0 [int 16]] var self)) [uint 8])) ([adt core_option_Option 0 1 [uint 8]] var __result_0))) ([adt core_option_Option 0 1 [uint 8]] var __result_1)) ([adt core_option_Option 0 1 [uint 8]] var __result_2)) 
fn core_num_i16__ToPrimitive_to_u16 0 0 args 1 self [ref r_anon_0 [int 16]] return [adt core_option_Option 0 1 [uint 16]] 1 core_num_ToPrimitive_to_u16 0 1 [int 16] body ([adt core_option_Option 0 1 [uint 16]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] block 3 let zero [int 16] ([int 16] call core_num_Int_zero 0 1 [int 16] 0) let max_value [uint 16] ([uint 16] call core_num_Int_max_value 0 1 [uint 16] 0) let __result_1 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 16] var zero) ([int 16] deref ([ref r_anon_0 [int 16]] var self))) ([bool] binop BiLe ([uint 64] cast ([int 16] deref ([ref r_anon_0 [int 16]] var self)) [uint 64]) ([uint 64] cast ([uint 16] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 16]] block 1 let __result [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 16]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 16]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] enum_literal core_option_Some 1 1 ([uint 16] cast ([int 16] deref ([ref r_anon_0 [int 16]] var self)) [uint 16])) ([adt core_option_Option 0 1 [uint 16]] var __result_0))) ([adt core_option_Option 0 1 [uint 16]] var __result_1)) ([adt core_option_Option 0 1 [uint 16]] var __result_2)) 
fn core_num_i16__ToPrimitive_to_u32 0 0 args 1 self [ref r_anon_0 [int 16]] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_ToPrimitive_to_u32 0 1 [int 16] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] block 3 let zero [int 16] ([int 16] call core_num_Int_zero 0 1 [int 16] 0) let max_value [uint 32] ([uint 32] call core_num_Int_max_value 0 1 [uint 32] 0) let __result_1 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 16] var zero) ([int 16] deref ([ref r_anon_0 [int 16]] var self))) ([bool] binop BiLe ([uint 64] cast ([int 16] deref ([ref r_anon_0 [int 16]] var self)) [uint 64]) ([uint 64] cast ([uint 32] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] cast ([int 16] deref ([ref r_anon_0 [int 16]] var self)) [uint 32])) ([adt core_option_Option 0 1 [uint 32]] var __result_0))) ([adt core_option_Option 0 1 [uint 32]] var __result_1)) ([adt core_option_Option 0 1 [uint 32]] var __result_2)) 
fn core_num_i16__ToPrimitive_to_u64 0 0 args 1 self [ref r_anon_0 [int 16]] return [adt core_option_Option 0 1 [uint 64]] 1 core_num_ToPrimitive_to_u64 0 1 [int 16] body ([adt core_option_Option 0 1 [uint 64]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] block 3 let zero [int 16] ([int 16] call core_num_Int_zero 0 1 [int 16] 0) let max_value [uint 64] ([uint 64] call core_num_Int_max_value 0 1 [uint 64] 0) let __result_1 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 16] var zero) ([int 16] deref ([ref r_anon_0 [int 16]] var self))) ([bool] binop BiLe ([uint 64] cast ([int 16] deref ([ref r_anon_0 [int 16]] var self)) [uint 64]) ([uint 64] cast ([uint 64] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 64]] block 1 let __result [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 64]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 64]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] enum_literal core_option_Some 1 1 ([uint 64] cast ([int 16] deref ([ref r_anon_0 [int 16]] var self)) [uint 64])) ([adt core_option_Option 0 1 [uint 64]] var __result_0))) ([adt core_option_Option 0 1 [uint 64]] var __result_1)) ([adt core_option_Option 0 1 [uint 64]] var __result_2)) 
fn core_num_i32__ToPrimitive_to_int 0 0 args 1 self [ref r_anon_0 [int 32]] return [adt core_option_Option 0 1 [int 32]] 1 core_num_ToPrimitive_to_int 0 1 [int 32] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result_4 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] block 1 let __result_3 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [int 32] 0) ([uint 32] call core_mem_size_of 0 1 [int 32] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 32]] block 4 let n [int 64] ([int 64] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [int 64]) let min_value [int 32] ([int 32] call core_num_Int_min_value 0 1 [int 32] 0) let max_value [int 32] ([int 32] call core_num_Int_max_value 0 1 [int 32] 0) let __result_1 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 64] cast ([int 32] var min_value) [int 64]) ([int 64] var n)) ([bool] binop BiLe ([int 64] var n) ([int 64] cast ([int 32] var max_value) [int 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 32]] block 1 let __result_0 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_Some 1 1 ([int 32] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [int 32])) ([adt core_option_Option 0 1 [int 32]] var __result_0))) ([adt core_option_Option 0 1 [int 32]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [int 32]] block 1 let __result_2 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_Some 1 1 ([int 32] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [int 32])) ([adt core_option_Option 0 1 [int 32]] var __result_2))) ([adt core_option_Option 0 1 [int 32]] var __result_3)) ([adt core_option_Option 0 1 [int 32]] var __result_4)) 
fn core_num_i32__ToPrimitive_to_i8 0 0 args 1 self [ref r_anon_0 [int 32]] return [adt core_option_Option 0 1 [int 8]] 1 core_num_ToPrimitive_to_i8 0 1 [int 32] body ([adt core_option_Option 0 1 [int 8]] block 1 let __result_4 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] block 1 let __result_3 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [int 32] 0) ([uint 32] call core_mem_size_of 0 1 [int 8] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 8]] block 4 let n [int 64] ([int 64] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [int 64]) let min_value [int 8] ([int 8] call core_num_Int_min_value 0 1 [int 8] 0) let max_value [int 8] ([int 8] call core_num_Int_max_value 0 1 [int 8] 0) let __result_1 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 64] cast ([int 8] var min_value) [int 64]) ([int 64] var n)) ([bool] binop BiLe ([int 64] var n) ([int 64] cast ([int 8] var max_value) [int 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 8]] block 1 let __result [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 8]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 8]] block 1 let __result_0 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] enum_literal core_option_Some 1 1 ([int 8] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [int 8])) ([adt core_option_Option 0 1 [int 8]] var __result_0))) ([adt core_option_Option 0 1 [int 8]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [int 8]] block 1 let __result_2 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] enum_literal core_option_Some 1 1 ([int 8] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [int 8])) ([adt core_option_Option 0 1 [int 8]] var __result_2))) ([adt core_option_Option 0 1 [int 8]] var __result_3)) ([adt core_option_Option 0 1 [int 8]] var __result_4)) 
fn core_num_i32__ToPrimitive_to_i16 0 0 args 1 self [ref r_anon_0 [int 32]] return [adt core_option_Option 0 1 [int 16]] 1 core_num_ToPrimitive_to_i16 0 1 [int 32] body ([adt core_option_Option 0 1 [int 16]] block 1 let __result_4 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] block 1 let __result_3 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [int 32] 0) ([uint 32] call core_mem_size_of 0 1 [int 16] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 16]] block 4 let n [int 64] ([int 64] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [int 64]) let min_value [int 16] ([int 16] call core_num_Int_min_value 0 1 [int 16] 0) let max_value [int 16] ([int 16] call core_num_Int_max_value 0 1 [int 16] 0) let __result_1 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 64] cast ([int 16] var min_value) [int 64]) ([int 64] var n)) ([bool] binop BiLe ([int 64] var n) ([int 64] cast ([int 16] var max_value) [int 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 16]] block 1 let __result [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 16]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 16]] block 1 let __result_0 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] enum_literal core_option_Some 1 1 ([int 16] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [int 16])) ([adt core_option_Option 0 1 [int 16]] var __result_0))) ([adt core_option_Option 0 1 [int 16]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [int 16]] block 1 let __result_2 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] enum_literal core_option_Some 1 1 ([int 16] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [int 16])) ([adt core_option_Option 0 1 [int 16]] var __result_2))) ([adt core_option_Option 0 1 [int 16]] var __result_3)) ([adt core_option_Option 0 1 [int 16]] var __result_4)) 
fn core_num_i32__ToPrimitive_to_i32 0 0 args 1 self [ref r_anon_0 [int 32]] return [adt core_option_Option 0 1 [int 32]] 1 core_num_ToPrimitive_to_i32 0 1 [int 32] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result_4 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] block 1 let __result_3 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [int 32] 0) ([uint 32] call core_mem_size_of 0 1 [int 32] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 32]] block 4 let n [int 64] ([int 64] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [int 64]) let min_value [int 32] ([int 32] call core_num_Int_min_value 0 1 [int 32] 0) let max_value [int 32] ([int 32] call core_num_Int_max_value 0 1 [int 32] 0) let __result_1 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 64] cast ([int 32] var min_value) [int 64]) ([int 64] var n)) ([bool] binop BiLe ([int 64] var n) ([int 64] cast ([int 32] var max_value) [int 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 32]] block 1 let __result_0 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_Some 1 1 ([int 32] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [int 32])) ([adt core_option_Option 0 1 [int 32]] var __result_0))) ([adt core_option_Option 0 1 [int 32]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [int 32]] block 1 let __result_2 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_Some 1 1 ([int 32] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [int 32])) ([adt core_option_Option 0 1 [int 32]] var __result_2))) ([adt core_option_Option 0 1 [int 32]] var __result_3)) ([adt core_option_Option 0 1 [int 32]] var __result_4)) 
fn core_num_i32__ToPrimitive_to_i64 0 0 args 1 self [ref r_anon_0 [int 32]] return [adt core_option_Option 0 1 [int 64]] 1 core_num_ToPrimitive_to_i64 0 1 [int 32] body ([adt core_option_Option 0 1 [int 64]] block 1 let __result_4 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] block 1 let __result_3 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [int 32] 0) ([uint 32] call core_mem_size_of 0 1 [int 64] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 64]] block 4 let n [int 64] ([int 64] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [int 64]) let min_value [int 64] ([int 64] call core_num_Int_min_value 0 1 [int 64] 0) let max_value [int 64] ([int 64] call core_num_Int_max_value 0 1 [int 64] 0) let __result_1 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 64] cast ([int 64] var min_value) [int 64]) ([int 64] var n)) ([bool] binop BiLe ([int 64] var n) ([int 64] cast ([int 64] var max_value) [int 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 64]] block 1 let __result [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 64]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 64]] block 1 let __result_0 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] enum_literal core_option_Some 1 1 ([int 64] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [int 64])) ([adt core_option_Option 0 1 [int 64]] var __result_0))) ([adt core_option_Option 0 1 [int 64]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [int 64]] block 1 let __result_2 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] enum_literal core_option_Some 1 1 ([int 64] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [int 64])) ([adt core_option_Option 0 1 [int 64]] var __result_2))) ([adt core_option_Option 0 1 [int 64]] var __result_3)) ([adt core_option_Option 0 1 [int 64]] var __result_4)) 
fn core_num_i32__ToPrimitive_to_uint 0 0 args 1 self [ref r_anon_0 [int 32]] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_ToPrimitive_to_uint 0 1 [int 32] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] block 3 let zero [int 32] ([int 32] call core_num_Int_zero 0 1 [int 32] 0) let max_value [uint 32] ([uint 32] call core_num_Int_max_value 0 1 [uint 32] 0) let __result_1 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 32] var zero) ([int 32] deref ([ref r_anon_0 [int 32]] var self))) ([bool] binop BiLe ([uint 64] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [uint 64]) ([uint 64] cast ([uint 32] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [uint 32])) ([adt core_option_Option 0 1 [uint 32]] var __result_0))) ([adt core_option_Option 0 1 [uint 32]] var __result_1)) ([adt core_option_Option 0 1 [uint 32]] var __result_2)) 
fn core_num_i32__ToPrimitive_to_u8 0 0 args 1 self [ref r_anon_0 [int 32]] return [adt core_option_Option 0 1 [uint 8]] 1 core_num_ToPrimitive_to_u8 0 1 [int 32] body ([adt core_option_Option 0 1 [uint 8]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] block 3 let zero [int 32] ([int 32] call core_num_Int_zero 0 1 [int 32] 0) let max_value [uint 8] ([uint 8] call core_num_Int_max_value 0 1 [uint 8] 0) let __result_1 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 32] var zero) ([int 32] deref ([ref r_anon_0 [int 32]] var self))) ([bool] binop BiLe ([uint 64] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [uint 64]) ([uint 64] cast ([uint 8] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 8]] block 1 let __result [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 8]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 8]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] enum_literal core_option_Some 1 1 ([uint 8] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [uint 8])) ([adt core_option_Option 0 1 [uint 8]] var __result_0))) ([adt core_option_Option 0 1 [uint 8]] var __result_1)) ([adt core_option_Option 0 1 [uint 8]] var __result_2)) 
fn core_num_i32__ToPrimitive_to_u16 0 0 args 1 self [ref r_anon_0 [int 32]] return [adt core_option_Option 0 1 [uint 16]] 1 core_num_ToPrimitive_to_u16 0 1 [int 32] body ([adt core_option_Option 0 1 [uint 16]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] block 3 let zero [int 32] ([int 32] call core_num_Int_zero 0 1 [int 32] 0) let max_value [uint 16] ([uint 16] call core_num_Int_max_value 0 1 [uint 16] 0) let __result_1 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 32] var zero) ([int 32] deref ([ref r_anon_0 [int 32]] var self))) ([bool] binop BiLe ([uint 64] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [uint 64]) ([uint 64] cast ([uint 16] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 16]] block 1 let __result [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 16]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 16]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] enum_literal core_option_Some 1 1 ([uint 16] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [uint 16])) ([adt core_option_Option 0 1 [uint 16]] var __result_0))) ([adt core_option_Option 0 1 [uint 16]] var __result_1)) ([adt core_option_Option 0 1 [uint 16]] var __result_2)) 
fn core_num_i32__ToPrimitive_to_u32 0 0 args 1 self [ref r_anon_0 [int 32]] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_ToPrimitive_to_u32 0 1 [int 32] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] block 3 let zero [int 32] ([int 32] call core_num_Int_zero 0 1 [int 32] 0) let max_value [uint 32] ([uint 32] call core_num_Int_max_value 0 1 [uint 32] 0) let __result_1 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 32] var zero) ([int 32] deref ([ref r_anon_0 [int 32]] var self))) ([bool] binop BiLe ([uint 64] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [uint 64]) ([uint 64] cast ([uint 32] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [uint 32])) ([adt core_option_Option 0 1 [uint 32]] var __result_0))) ([adt core_option_Option 0 1 [uint 32]] var __result_1)) ([adt core_option_Option 0 1 [uint 32]] var __result_2)) 
fn core_num_i32__ToPrimitive_to_u64 0 0 args 1 self [ref r_anon_0 [int 32]] return [adt core_option_Option 0 1 [uint 64]] 1 core_num_ToPrimitive_to_u64 0 1 [int 32] body ([adt core_option_Option 0 1 [uint 64]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] block 3 let zero [int 32] ([int 32] call core_num_Int_zero 0 1 [int 32] 0) let max_value [uint 64] ([uint 64] call core_num_Int_max_value 0 1 [uint 64] 0) let __result_1 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 32] var zero) ([int 32] deref ([ref r_anon_0 [int 32]] var self))) ([bool] binop BiLe ([uint 64] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [uint 64]) ([uint 64] cast ([uint 64] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 64]] block 1 let __result [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 64]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 64]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] enum_literal core_option_Some 1 1 ([uint 64] cast ([int 32] deref ([ref r_anon_0 [int 32]] var self)) [uint 64])) ([adt core_option_Option 0 1 [uint 64]] var __result_0))) ([adt core_option_Option 0 1 [uint 64]] var __result_1)) ([adt core_option_Option 0 1 [uint 64]] var __result_2)) 
fn core_num_i64__ToPrimitive_to_int 0 0 args 1 self [ref r_anon_0 [int 64]] return [adt core_option_Option 0 1 [int 32]] 1 core_num_ToPrimitive_to_int 0 1 [int 64] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result_4 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] block 1 let __result_3 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [int 64] 0) ([uint 32] call core_mem_size_of 0 1 [int 32] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 32]] block 4 let n [int 64] ([int 64] cast ([int 64] deref ([ref r_anon_0 [int 64]] var self)) [int 64]) let min_value [int 32] ([int 32] call core_num_Int_min_value 0 1 [int 32] 0) let max_value [int 32] ([int 32] call core_num_Int_max_value 0 1 [int 32] 0) let __result_1 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 64] cast ([int 32] var min_value) [int 64]) ([int 64] var n)) ([bool] binop BiLe ([int 64] var n) ([int 64] cast ([int 32] var max_value) [int 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 32]] block 1 let __result_0 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_Some 1 1 ([int 32] cast ([int 64] deref ([ref r_anon_0 [int 64]] var self)) [int 32])) ([adt core_option_Option 0 1 [int 32]] var __result_0))) ([adt core_option_Option 0 1 [int 32]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [int 32]] block 1 let __result_2 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_Some 1 1 ([int 32] cast ([int 64] deref ([ref r_anon_0 [int 64]] var self)) [int 32])) ([adt core_option_Option 0 1 [int 32]] var __result_2))) ([adt core_option_Option 0 1 [int 32]] var __result_3)) ([adt core_option_Option 0 1 [int 32]] var __result_4)) 
fn core_num_i64__ToPrimitive_to_i8 0 0 args 1 self [ref r_anon_0 [int 64]] return [adt core_option_Option 0 1 [int 8]] 1 core_num_ToPrimitive_to_i8 0 1 [int 64] body ([adt core_option_Option 0 1 [int 8]] block 1 let __result_4 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] block 1 let __result_3 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [int 64] 0) ([uint 32] call core_mem_size_of 0 1 [int 8] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 8]] block 4 let n [int 64] ([int 64] cast ([int 64] deref ([ref r_anon_0 [int 64]] var self)) [int 64]) let min_value [int 8] ([int 8] call core_num_Int_min_value 0 1 [int 8] 0) let max_value [int 8] ([int 8] call core_num_Int_max_value 0 1 [int 8] 0) let __result_1 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 64] cast ([int 8] var min_value) [int 64]) ([int 64] var n)) ([bool] binop BiLe ([int 64] var n) ([int 64] cast ([int 8] var max_value) [int 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 8]] block 1 let __result [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 8]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 8]] block 1 let __result_0 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] enum_literal core_option_Some 1 1 ([int 8] cast ([int 64] deref ([ref r_anon_0 [int 64]] var self)) [int 8])) ([adt core_option_Option 0 1 [int 8]] var __result_0))) ([adt core_option_Option 0 1 [int 8]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [int 8]] block 1 let __result_2 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] enum_literal core_option_Some 1 1 ([int 8] cast ([int 64] deref ([ref r_anon_0 [int 64]] var self)) [int 8])) ([adt core_option_Option 0 1 [int 8]] var __result_2))) ([adt core_option_Option 0 1 [int 8]] var __result_3)) ([adt core_option_Option 0 1 [int 8]] var __result_4)) 
fn core_num_i64__ToPrimitive_to_i16 0 0 args 1 self [ref r_anon_0 [int 64]] return [adt core_option_Option 0 1 [int 16]] 1 core_num_ToPrimitive_to_i16 0 1 [int 64] body ([adt core_option_Option 0 1 [int 16]] block 1 let __result_4 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] block 1 let __result_3 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [int 64] 0) ([uint 32] call core_mem_size_of 0 1 [int 16] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 16]] block 4 let n [int 64] ([int 64] cast ([int 64] deref ([ref r_anon_0 [int 64]] var self)) [int 64]) let min_value [int 16] ([int 16] call core_num_Int_min_value 0 1 [int 16] 0) let max_value [int 16] ([int 16] call core_num_Int_max_value 0 1 [int 16] 0) let __result_1 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 64] cast ([int 16] var min_value) [int 64]) ([int 64] var n)) ([bool] binop BiLe ([int 64] var n) ([int 64] cast ([int 16] var max_value) [int 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 16]] block 1 let __result [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 16]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 16]] block 1 let __result_0 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] enum_literal core_option_Some 1 1 ([int 16] cast ([int 64] deref ([ref r_anon_0 [int 64]] var self)) [int 16])) ([adt core_option_Option 0 1 [int 16]] var __result_0))) ([adt core_option_Option 0 1 [int 16]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [int 16]] block 1 let __result_2 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] enum_literal core_option_Some 1 1 ([int 16] cast ([int 64] deref ([ref r_anon_0 [int 64]] var self)) [int 16])) ([adt core_option_Option 0 1 [int 16]] var __result_2))) ([adt core_option_Option 0 1 [int 16]] var __result_3)) ([adt core_option_Option 0 1 [int 16]] var __result_4)) 
fn core_num_i64__ToPrimitive_to_i32 0 0 args 1 self [ref r_anon_0 [int 64]] return [adt core_option_Option 0 1 [int 32]] 1 core_num_ToPrimitive_to_i32 0 1 [int 64] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result_4 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] block 1 let __result_3 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [int 64] 0) ([uint 32] call core_mem_size_of 0 1 [int 32] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 32]] block 4 let n [int 64] ([int 64] cast ([int 64] deref ([ref r_anon_0 [int 64]] var self)) [int 64]) let min_value [int 32] ([int 32] call core_num_Int_min_value 0 1 [int 32] 0) let max_value [int 32] ([int 32] call core_num_Int_max_value 0 1 [int 32] 0) let __result_1 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 64] cast ([int 32] var min_value) [int 64]) ([int 64] var n)) ([bool] binop BiLe ([int 64] var n) ([int 64] cast ([int 32] var max_value) [int 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 32]] block 1 let __result_0 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_Some 1 1 ([int 32] cast ([int 64] deref ([ref r_anon_0 [int 64]] var self)) [int 32])) ([adt core_option_Option 0 1 [int 32]] var __result_0))) ([adt core_option_Option 0 1 [int 32]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [int 32]] block 1 let __result_2 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_Some 1 1 ([int 32] cast ([int 64] deref ([ref r_anon_0 [int 64]] var self)) [int 32])) ([adt core_option_Option 0 1 [int 32]] var __result_2))) ([adt core_option_Option 0 1 [int 32]] var __result_3)) ([adt core_option_Option 0 1 [int 32]] var __result_4)) 
fn core_num_i64__ToPrimitive_to_i64 0 0 args 1 self [ref r_anon_0 [int 64]] return [adt core_option_Option 0 1 [int 64]] 1 core_num_ToPrimitive_to_i64 0 1 [int 64] body ([adt core_option_Option 0 1 [int 64]] block 1 let __result_4 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] block 1 let __result_3 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [int 64] 0) ([uint 32] call core_mem_size_of 0 1 [int 64] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 64]] block 4 let n [int 64] ([int 64] cast ([int 64] deref ([ref r_anon_0 [int 64]] var self)) [int 64]) let min_value [int 64] ([int 64] call core_num_Int_min_value 0 1 [int 64] 0) let max_value [int 64] ([int 64] call core_num_Int_max_value 0 1 [int 64] 0) let __result_1 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 64] cast ([int 64] var min_value) [int 64]) ([int 64] var n)) ([bool] binop BiLe ([int 64] var n) ([int 64] cast ([int 64] var max_value) [int 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 64]] block 1 let __result [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 64]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 64]] block 1 let __result_0 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] enum_literal core_option_Some 1 1 ([int 64] cast ([int 64] deref ([ref r_anon_0 [int 64]] var self)) [int 64])) ([adt core_option_Option 0 1 [int 64]] var __result_0))) ([adt core_option_Option 0 1 [int 64]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [int 64]] block 1 let __result_2 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] enum_literal core_option_Some 1 1 ([int 64] cast ([int 64] deref ([ref r_anon_0 [int 64]] var self)) [int 64])) ([adt core_option_Option 0 1 [int 64]] var __result_2))) ([adt core_option_Option 0 1 [int 64]] var __result_3)) ([adt core_option_Option 0 1 [int 64]] var __result_4)) 
fn core_num_i64__ToPrimitive_to_uint 0 0 args 1 self [ref r_anon_0 [int 64]] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_ToPrimitive_to_uint 0 1 [int 64] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] block 3 let zero [int 64] ([int 64] call core_num_Int_zero 0 1 [int 64] 0) let max_value [uint 32] ([uint 32] call core_num_Int_max_value 0 1 [uint 32] 0) let __result_1 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 64] var zero) ([int 64] deref ([ref r_anon_0 [int 64]] var self))) ([bool] binop BiLe ([uint 64] cast ([int 64] deref ([ref r_anon_0 [int 64]] var self)) [uint 64]) ([uint 64] cast ([uint 32] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] cast ([int 64] deref ([ref r_anon_0 [int 64]] var self)) [uint 32])) ([adt core_option_Option 0 1 [uint 32]] var __result_0))) ([adt core_option_Option 0 1 [uint 32]] var __result_1)) ([adt core_option_Option 0 1 [uint 32]] var __result_2)) 
fn core_num_i64__ToPrimitive_to_u8 0 0 args 1 self [ref r_anon_0 [int 64]] return [adt core_option_Option 0 1 [uint 8]] 1 core_num_ToPrimitive_to_u8 0 1 [int 64] body ([adt core_option_Option 0 1 [uint 8]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] block 3 let zero [int 64] ([int 64] call core_num_Int_zero 0 1 [int 64] 0) let max_value [uint 8] ([uint 8] call core_num_Int_max_value 0 1 [uint 8] 0) let __result_1 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 64] var zero) ([int 64] deref ([ref r_anon_0 [int 64]] var self))) ([bool] binop BiLe ([uint 64] cast ([int 64] deref ([ref r_anon_0 [int 64]] var self)) [uint 64]) ([uint 64] cast ([uint 8] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 8]] block 1 let __result [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 8]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 8]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] enum_literal core_option_Some 1 1 ([uint 8] cast ([int 64] deref ([ref r_anon_0 [int 64]] var self)) [uint 8])) ([adt core_option_Option 0 1 [uint 8]] var __result_0))) ([adt core_option_Option 0 1 [uint 8]] var __result_1)) ([adt core_option_Option 0 1 [uint 8]] var __result_2)) 
fn core_num_i64__ToPrimitive_to_u16 0 0 args 1 self [ref r_anon_0 [int 64]] return [adt core_option_Option 0 1 [uint 16]] 1 core_num_ToPrimitive_to_u16 0 1 [int 64] body ([adt core_option_Option 0 1 [uint 16]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] block 3 let zero [int 64] ([int 64] call core_num_Int_zero 0 1 [int 64] 0) let max_value [uint 16] ([uint 16] call core_num_Int_max_value 0 1 [uint 16] 0) let __result_1 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 64] var zero) ([int 64] deref ([ref r_anon_0 [int 64]] var self))) ([bool] binop BiLe ([uint 64] cast ([int 64] deref ([ref r_anon_0 [int 64]] var self)) [uint 64]) ([uint 64] cast ([uint 16] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 16]] block 1 let __result [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 16]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 16]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] enum_literal core_option_Some 1 1 ([uint 16] cast ([int 64] deref ([ref r_anon_0 [int 64]] var self)) [uint 16])) ([adt core_option_Option 0 1 [uint 16]] var __result_0))) ([adt core_option_Option 0 1 [uint 16]] var __result_1)) ([adt core_option_Option 0 1 [uint 16]] var __result_2)) 
fn core_num_i64__ToPrimitive_to_u32 0 0 args 1 self [ref r_anon_0 [int 64]] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_ToPrimitive_to_u32 0 1 [int 64] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] block 3 let zero [int 64] ([int 64] call core_num_Int_zero 0 1 [int 64] 0) let max_value [uint 32] ([uint 32] call core_num_Int_max_value 0 1 [uint 32] 0) let __result_1 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 64] var zero) ([int 64] deref ([ref r_anon_0 [int 64]] var self))) ([bool] binop BiLe ([uint 64] cast ([int 64] deref ([ref r_anon_0 [int 64]] var self)) [uint 64]) ([uint 64] cast ([uint 32] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] cast ([int 64] deref ([ref r_anon_0 [int 64]] var self)) [uint 32])) ([adt core_option_Option 0 1 [uint 32]] var __result_0))) ([adt core_option_Option 0 1 [uint 32]] var __result_1)) ([adt core_option_Option 0 1 [uint 32]] var __result_2)) 
fn core_num_i64__ToPrimitive_to_u64 0 0 args 1 self [ref r_anon_0 [int 64]] return [adt core_option_Option 0 1 [uint 64]] 1 core_num_ToPrimitive_to_u64 0 1 [int 64] body ([adt core_option_Option 0 1 [uint 64]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] block 3 let zero [int 64] ([int 64] call core_num_Int_zero 0 1 [int 64] 0) let max_value [uint 64] ([uint 64] call core_num_Int_max_value 0 1 [uint 64] 0) let __result_1 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([int 64] var zero) ([int 64] deref ([ref r_anon_0 [int 64]] var self))) ([bool] binop BiLe ([uint 64] cast ([int 64] deref ([ref r_anon_0 [int 64]] var self)) [uint 64]) ([uint 64] cast ([uint 64] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 64]] block 1 let __result [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 64]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 64]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] enum_literal core_option_Some 1 1 ([uint 64] cast ([int 64] deref ([ref r_anon_0 [int 64]] var self)) [uint 64])) ([adt core_option_Option 0 1 [uint 64]] var __result_0))) ([adt core_option_Option 0 1 [uint 64]] var __result_1)) ([adt core_option_Option 0 1 [uint 64]] var __result_2)) 
fn core_num_uint__ToPrimitive_to_int 0 0 args 1 self [ref r_anon_0 [uint 32]] return [adt core_option_Option 0 1 [int 32]] 1 core_num_ToPrimitive_to_int 0 1 [uint 32] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result_2 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] block 2 let max_value [int 32] ([int 32] call core_num_Int_max_value 0 1 [int 32] 0) let __result_1 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] match ([int 32] cast ([bool] binop BiLe ([uint 64] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 64]) ([uint 64] cast ([int 32] var max_value) [uint 64])) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 32]] block 1 let __result_0 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_Some 1 1 ([int 32] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [int 32])) ([adt core_option_Option 0 1 [int 32]] var __result_0))) ([adt core_option_Option 0 1 [int 32]] var __result_1)) ([adt core_option_Option 0 1 [int 32]] var __result_2)) 
fn core_num_uint__ToPrimitive_to_i8 0 0 args 1 self [ref r_anon_0 [uint 32]] return [adt core_option_Option 0 1 [int 8]] 1 core_num_ToPrimitive_to_i8 0 1 [uint 32] body ([adt core_option_Option 0 1 [int 8]] block 1 let __result_2 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] block 2 let max_value [int 8] ([int 8] call core_num_Int_max_value 0 1 [int 8] 0) let __result_1 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] match ([int 32] cast ([bool] binop BiLe ([uint 64] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 64]) ([uint 64] cast ([int 8] var max_value) [uint 64])) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 8]] block 1 let __result [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 8]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 8]] block 1 let __result_0 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] enum_literal core_option_Some 1 1 ([int 8] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [int 8])) ([adt core_option_Option 0 1 [int 8]] var __result_0))) ([adt core_option_Option 0 1 [int 8]] var __result_1)) ([adt core_option_Option 0 1 [int 8]] var __result_2)) 
fn core_num_uint__ToPrimitive_to_i16 0 0 args 1 self [ref r_anon_0 [uint 32]] return [adt core_option_Option 0 1 [int 16]] 1 core_num_ToPrimitive_to_i16 0 1 [uint 32] body ([adt core_option_Option 0 1 [int 16]] block 1 let __result_2 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] block 2 let max_value [int 16] ([int 16] call core_num_Int_max_value 0 1 [int 16] 0) let __result_1 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] match ([int 32] cast ([bool] binop BiLe ([uint 64] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 64]) ([uint 64] cast ([int 16] var max_value) [uint 64])) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 16]] block 1 let __result [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 16]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 16]] block 1 let __result_0 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] enum_literal core_option_Some 1 1 ([int 16] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [int 16])) ([adt core_option_Option 0 1 [int 16]] var __result_0))) ([adt core_option_Option 0 1 [int 16]] var __result_1)) ([adt core_option_Option 0 1 [int 16]] var __result_2)) 
fn core_num_uint__ToPrimitive_to_i32 0 0 args 1 self [ref r_anon_0 [uint 32]] return [adt core_option_Option 0 1 [int 32]] 1 core_num_ToPrimitive_to_i32 0 1 [uint 32] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result_2 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] block 2 let max_value [int 32] ([int 32] call core_num_Int_max_value 0 1 [int 32] 0) let __result_1 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] match ([int 32] cast ([bool] binop BiLe ([uint 64] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 64]) ([uint 64] cast ([int 32] var max_value) [uint 64])) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 32]] block 1 let __result_0 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_Some 1 1 ([int 32] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [int 32])) ([adt core_option_Option 0 1 [int 32]] var __result_0))) ([adt core_option_Option 0 1 [int 32]] var __result_1)) ([adt core_option_Option 0 1 [int 32]] var __result_2)) 
fn core_num_uint__ToPrimitive_to_i64 0 0 args 1 self [ref r_anon_0 [uint 32]] return [adt core_option_Option 0 1 [int 64]] 1 core_num_ToPrimitive_to_i64 0 1 [uint 32] body ([adt core_option_Option 0 1 [int 64]] block 1 let __result_2 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] block 2 let max_value [int 64] ([int 64] call core_num_Int_max_value 0 1 [int 64] 0) let __result_1 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] match ([int 32] cast ([bool] binop BiLe ([uint 64] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 64]) ([uint 64] cast ([int 64] var max_value) [uint 64])) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 64]] block 1 let __result [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 64]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 64]] block 1 let __result_0 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] enum_literal core_option_Some 1 1 ([int 64] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [int 64])) ([adt core_option_Option 0 1 [int 64]] var __result_0))) ([adt core_option_Option 0 1 [int 64]] var __result_1)) ([adt core_option_Option 0 1 [int 64]] var __result_2)) 
fn core_num_uint__ToPrimitive_to_uint 0 0 args 1 self [ref r_anon_0 [uint 32]] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_ToPrimitive_to_uint 0 1 [uint 32] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_4 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_3 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [uint 32] 0) ([uint 32] call core_mem_size_of 0 1 [uint 32] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 32]] block 3 let zero [uint 32] ([uint 32] call core_num_Int_zero 0 1 [uint 32] 0) let max_value [uint 32] ([uint 32] call core_num_Int_max_value 0 1 [uint 32] 0) let __result_1 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([uint 32] var zero) ([uint 32] deref ([ref r_anon_0 [uint 32]] var self))) ([bool] binop BiLe ([uint 64] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 64]) ([uint 64] cast ([uint 32] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 32])) ([adt core_option_Option 0 1 [uint 32]] var __result_0))) ([adt core_option_Option 0 1 [uint 32]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 32])) ([adt core_option_Option 0 1 [uint 32]] var __result_2))) ([adt core_option_Option 0 1 [uint 32]] var __result_3)) ([adt core_option_Option 0 1 [uint 32]] var __result_4)) 
fn core_num_uint__ToPrimitive_to_u8 0 0 args 1 self [ref r_anon_0 [uint 32]] return [adt core_option_Option 0 1 [uint 8]] 1 core_num_ToPrimitive_to_u8 0 1 [uint 32] body ([adt core_option_Option 0 1 [uint 8]] block 1 let __result_4 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] block 1 let __result_3 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [uint 32] 0) ([uint 32] call core_mem_size_of 0 1 [uint 8] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 8]] block 3 let zero [uint 32] ([uint 32] call core_num_Int_zero 0 1 [uint 32] 0) let max_value [uint 8] ([uint 8] call core_num_Int_max_value 0 1 [uint 8] 0) let __result_1 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([uint 32] var zero) ([uint 32] deref ([ref r_anon_0 [uint 32]] var self))) ([bool] binop BiLe ([uint 64] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 64]) ([uint 64] cast ([uint 8] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 8]] block 1 let __result [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 8]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 8]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] enum_literal core_option_Some 1 1 ([uint 8] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 8])) ([adt core_option_Option 0 1 [uint 8]] var __result_0))) ([adt core_option_Option 0 1 [uint 8]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 8]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] enum_literal core_option_Some 1 1 ([uint 8] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 8])) ([adt core_option_Option 0 1 [uint 8]] var __result_2))) ([adt core_option_Option 0 1 [uint 8]] var __result_3)) ([adt core_option_Option 0 1 [uint 8]] var __result_4)) 
fn core_num_uint__ToPrimitive_to_u16 0 0 args 1 self [ref r_anon_0 [uint 32]] return [adt core_option_Option 0 1 [uint 16]] 1 core_num_ToPrimitive_to_u16 0 1 [uint 32] body ([adt core_option_Option 0 1 [uint 16]] block 1 let __result_4 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] block 1 let __result_3 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [uint 32] 0) ([uint 32] call core_mem_size_of 0 1 [uint 16] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 16]] block 3 let zero [uint 32] ([uint 32] call core_num_Int_zero 0 1 [uint 32] 0) let max_value [uint 16] ([uint 16] call core_num_Int_max_value 0 1 [uint 16] 0) let __result_1 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([uint 32] var zero) ([uint 32] deref ([ref r_anon_0 [uint 32]] var self))) ([bool] binop BiLe ([uint 64] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 64]) ([uint 64] cast ([uint 16] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 16]] block 1 let __result [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 16]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 16]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] enum_literal core_option_Some 1 1 ([uint 16] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 16])) ([adt core_option_Option 0 1 [uint 16]] var __result_0))) ([adt core_option_Option 0 1 [uint 16]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 16]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] enum_literal core_option_Some 1 1 ([uint 16] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 16])) ([adt core_option_Option 0 1 [uint 16]] var __result_2))) ([adt core_option_Option 0 1 [uint 16]] var __result_3)) ([adt core_option_Option 0 1 [uint 16]] var __result_4)) 
fn core_num_uint__ToPrimitive_to_u32 0 0 args 1 self [ref r_anon_0 [uint 32]] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_ToPrimitive_to_u32 0 1 [uint 32] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_4 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_3 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [uint 32] 0) ([uint 32] call core_mem_size_of 0 1 [uint 32] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 32]] block 3 let zero [uint 32] ([uint 32] call core_num_Int_zero 0 1 [uint 32] 0) let max_value [uint 32] ([uint 32] call core_num_Int_max_value 0 1 [uint 32] 0) let __result_1 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([uint 32] var zero) ([uint 32] deref ([ref r_anon_0 [uint 32]] var self))) ([bool] binop BiLe ([uint 64] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 64]) ([uint 64] cast ([uint 32] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 32])) ([adt core_option_Option 0 1 [uint 32]] var __result_0))) ([adt core_option_Option 0 1 [uint 32]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 32])) ([adt core_option_Option 0 1 [uint 32]] var __result_2))) ([adt core_option_Option 0 1 [uint 32]] var __result_3)) ([adt core_option_Option 0 1 [uint 32]] var __result_4)) 
fn core_num_uint__ToPrimitive_to_u64 0 0 args 1 self [ref r_anon_0 [uint 32]] return [adt core_option_Option 0 1 [uint 64]] 1 core_num_ToPrimitive_to_u64 0 1 [uint 32] body ([adt core_option_Option 0 1 [uint 64]] block 1 let __result_4 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] block 1 let __result_3 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [uint 32] 0) ([uint 32] call core_mem_size_of 0 1 [uint 64] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 64]] block 3 let zero [uint 32] ([uint 32] call core_num_Int_zero 0 1 [uint 32] 0) let max_value [uint 64] ([uint 64] call core_num_Int_max_value 0 1 [uint 64] 0) let __result_1 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([uint 32] var zero) ([uint 32] deref ([ref r_anon_0 [uint 32]] var self))) ([bool] binop BiLe ([uint 64] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 64]) ([uint 64] cast ([uint 64] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 64]] block 1 let __result [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 64]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 64]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] enum_literal core_option_Some 1 1 ([uint 64] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 64])) ([adt core_option_Option 0 1 [uint 64]] var __result_0))) ([adt core_option_Option 0 1 [uint 64]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 64]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] enum_literal core_option_Some 1 1 ([uint 64] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 64])) ([adt core_option_Option 0 1 [uint 64]] var __result_2))) ([adt core_option_Option 0 1 [uint 64]] var __result_3)) ([adt core_option_Option 0 1 [uint 64]] var __result_4)) 
fn core_num_u8__ToPrimitive_to_int 0 0 args 1 self [ref r_anon_0 [uint 8]] return [adt core_option_Option 0 1 [int 32]] 1 core_num_ToPrimitive_to_int 0 1 [uint 8] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result_2 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] block 2 let max_value [int 32] ([int 32] call core_num_Int_max_value 0 1 [int 32] 0) let __result_1 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] match ([int 32] cast ([bool] binop BiLe ([uint 64] cast ([uint 8] deref ([ref r_anon_0 [uint 8]] var self)) [uint 64]) ([uint 64] cast ([int 32] var max_value) [uint 64])) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 32]] block 1 let __result_0 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_Some 1 1 ([int 32] cast ([uint 8] deref ([ref r_anon_0 [uint 8]] var self)) [int 32])) ([adt core_option_Option 0 1 [int 32]] var __result_0))) ([adt core_option_Option 0 1 [int 32]] var __result_1)) ([adt core_option_Option 0 1 [int 32]] var __result_2)) 
fn core_num_u8__ToPrimitive_to_i8 0 0 args 1 self [ref r_anon_0 [uint 8]] return [adt core_option_Option 0 1 [int 8]] 1 core_num_ToPrimitive_to_i8 0 1 [uint 8] body ([adt core_option_Option 0 1 [int 8]] block 1 let __result_2 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] block 2 let max_value [int 8] ([int 8] call core_num_Int_max_value 0 1 [int 8] 0) let __result_1 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] match ([int 32] cast ([bool] binop BiLe ([uint 64] cast ([uint 8] deref ([ref r_anon_0 [uint 8]] var self)) [uint 64]) ([uint 64] cast ([int 8] var max_value) [uint 64])) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 8]] block 1 let __result [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 8]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 8]] block 1 let __result_0 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] enum_literal core_option_Some 1 1 ([int 8] cast ([uint 8] deref ([ref r_anon_0 [uint 8]] var self)) [int 8])) ([adt core_option_Option 0 1 [int 8]] var __result_0))) ([adt core_option_Option 0 1 [int 8]] var __result_1)) ([adt core_option_Option 0 1 [int 8]] var __result_2)) 
fn core_num_u8__ToPrimitive_to_i16 0 0 args 1 self [ref r_anon_0 [uint 8]] return [adt core_option_Option 0 1 [int 16]] 1 core_num_ToPrimitive_to_i16 0 1 [uint 8] body ([adt core_option_Option 0 1 [int 16]] block 1 let __result_2 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] block 2 let max_value [int 16] ([int 16] call core_num_Int_max_value 0 1 [int 16] 0) let __result_1 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] match ([int 32] cast ([bool] binop BiLe ([uint 64] cast ([uint 8] deref ([ref r_anon_0 [uint 8]] var self)) [uint 64]) ([uint 64] cast ([int 16] var max_value) [uint 64])) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 16]] block 1 let __result [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 16]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 16]] block 1 let __result_0 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] enum_literal core_option_Some 1 1 ([int 16] cast ([uint 8] deref ([ref r_anon_0 [uint 8]] var self)) [int 16])) ([adt core_option_Option 0 1 [int 16]] var __result_0))) ([adt core_option_Option 0 1 [int 16]] var __result_1)) ([adt core_option_Option 0 1 [int 16]] var __result_2)) 
fn core_num_u8__ToPrimitive_to_i32 0 0 args 1 self [ref r_anon_0 [uint 8]] return [adt core_option_Option 0 1 [int 32]] 1 core_num_ToPrimitive_to_i32 0 1 [uint 8] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result_2 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] block 2 let max_value [int 32] ([int 32] call core_num_Int_max_value 0 1 [int 32] 0) let __result_1 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] match ([int 32] cast ([bool] binop BiLe ([uint 64] cast ([uint 8] deref ([ref r_anon_0 [uint 8]] var self)) [uint 64]) ([uint 64] cast ([int 32] var max_value) [uint 64])) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 32]] block 1 let __result_0 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_Some 1 1 ([int 32] cast ([uint 8] deref ([ref r_anon_0 [uint 8]] var self)) [int 32])) ([adt core_option_Option 0 1 [int 32]] var __result_0))) ([adt core_option_Option 0 1 [int 32]] var __result_1)) ([adt core_option_Option 0 1 [int 32]] var __result_2)) 
fn core_num_u8__ToPrimitive_to_i64 0 0 args 1 self [ref r_anon_0 [uint 8]] return [adt core_option_Option 0 1 [int 64]] 1 core_num_ToPrimitive_to_i64 0 1 [uint 8] body ([adt core_option_Option 0 1 [int 64]] block 1 let __result_2 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] block 2 let max_value [int 64] ([int 64] call core_num_Int_max_value 0 1 [int 64] 0) let __result_1 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] match ([int 32] cast ([bool] binop BiLe ([uint 64] cast ([uint 8] deref ([ref r_anon_0 [uint 8]] var self)) [uint 64]) ([uint 64] cast ([int 64] var max_value) [uint 64])) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 64]] block 1 let __result [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 64]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 64]] block 1 let __result_0 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] enum_literal core_option_Some 1 1 ([int 64] cast ([uint 8] deref ([ref r_anon_0 [uint 8]] var self)) [int 64])) ([adt core_option_Option 0 1 [int 64]] var __result_0))) ([adt core_option_Option 0 1 [int 64]] var __result_1)) ([adt core_option_Option 0 1 [int 64]] var __result_2)) 
fn core_num_u8__ToPrimitive_to_uint 0 0 args 1 self [ref r_anon_0 [uint 8]] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_ToPrimitive_to_uint 0 1 [uint 8] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_4 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_3 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [uint 8] 0) ([uint 32] call core_mem_size_of 0 1 [uint 32] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 32]] block 3 let zero [uint 8] ([uint 8] call core_num_Int_zero 0 1 [uint 8] 0) let max_value [uint 32] ([uint 32] call core_num_Int_max_value 0 1 [uint 32] 0) let __result_1 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([uint 8] var zero) ([uint 8] deref ([ref r_anon_0 [uint 8]] var self))) ([bool] binop BiLe ([uint 64] cast ([uint 8] deref ([ref r_anon_0 [uint 8]] var self)) [uint 64]) ([uint 64] cast ([uint 32] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] cast ([uint 8] deref ([ref r_anon_0 [uint 8]] var self)) [uint 32])) ([adt core_option_Option 0 1 [uint 32]] var __result_0))) ([adt core_option_Option 0 1 [uint 32]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] cast ([uint 8] deref ([ref r_anon_0 [uint 8]] var self)) [uint 32])) ([adt core_option_Option 0 1 [uint 32]] var __result_2))) ([adt core_option_Option 0 1 [uint 32]] var __result_3)) ([adt core_option_Option 0 1 [uint 32]] var __result_4)) 
fn core_num_u8__ToPrimitive_to_u8 0 0 args 1 self [ref r_anon_0 [uint 8]] return [adt core_option_Option 0 1 [uint 8]] 1 core_num_ToPrimitive_to_u8 0 1 [uint 8] body ([adt core_option_Option 0 1 [uint 8]] block 1 let __result_4 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] block 1 let __result_3 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [uint 8] 0) ([uint 32] call core_mem_size_of 0 1 [uint 8] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 8]] block 3 let zero [uint 8] ([uint 8] call core_num_Int_zero 0 1 [uint 8] 0) let max_value [uint 8] ([uint 8] call core_num_Int_max_value 0 1 [uint 8] 0) let __result_1 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([uint 8] var zero) ([uint 8] deref ([ref r_anon_0 [uint 8]] var self))) ([bool] binop BiLe ([uint 64] cast ([uint 8] deref ([ref r_anon_0 [uint 8]] var self)) [uint 64]) ([uint 64] cast ([uint 8] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 8]] block 1 let __result [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 8]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 8]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] enum_literal core_option_Some 1 1 ([uint 8] cast ([uint 8] deref ([ref r_anon_0 [uint 8]] var self)) [uint 8])) ([adt core_option_Option 0 1 [uint 8]] var __result_0))) ([adt core_option_Option 0 1 [uint 8]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 8]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] enum_literal core_option_Some 1 1 ([uint 8] cast ([uint 8] deref ([ref r_anon_0 [uint 8]] var self)) [uint 8])) ([adt core_option_Option 0 1 [uint 8]] var __result_2))) ([adt core_option_Option 0 1 [uint 8]] var __result_3)) ([adt core_option_Option 0 1 [uint 8]] var __result_4)) 
fn core_num_u8__ToPrimitive_to_u16 0 0 args 1 self [ref r_anon_0 [uint 8]] return [adt core_option_Option 0 1 [uint 16]] 1 core_num_ToPrimitive_to_u16 0 1 [uint 8] body ([adt core_option_Option 0 1 [uint 16]] block 1 let __result_4 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] block 1 let __result_3 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [uint 8] 0) ([uint 32] call core_mem_size_of 0 1 [uint 16] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 16]] block 3 let zero [uint 8] ([uint 8] call core_num_Int_zero 0 1 [uint 8] 0) let max_value [uint 16] ([uint 16] call core_num_Int_max_value 0 1 [uint 16] 0) let __result_1 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([uint 8] var zero) ([uint 8] deref ([ref r_anon_0 [uint 8]] var self))) ([bool] binop BiLe ([uint 64] cast ([uint 8] deref ([ref r_anon_0 [uint 8]] var self)) [uint 64]) ([uint 64] cast ([uint 16] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 16]] block 1 let __result [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 16]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 16]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] enum_literal core_option_Some 1 1 ([uint 16] cast ([uint 8] deref ([ref r_anon_0 [uint 8]] var self)) [uint 16])) ([adt core_option_Option 0 1 [uint 16]] var __result_0))) ([adt core_option_Option 0 1 [uint 16]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 16]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] enum_literal core_option_Some 1 1 ([uint 16] cast ([uint 8] deref ([ref r_anon_0 [uint 8]] var self)) [uint 16])) ([adt core_option_Option 0 1 [uint 16]] var __result_2))) ([adt core_option_Option 0 1 [uint 16]] var __result_3)) ([adt core_option_Option 0 1 [uint 16]] var __result_4)) 
fn core_num_u8__ToPrimitive_to_u32 0 0 args 1 self [ref r_anon_0 [uint 8]] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_ToPrimitive_to_u32 0 1 [uint 8] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_4 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_3 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [uint 8] 0) ([uint 32] call core_mem_size_of 0 1 [uint 32] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 32]] block 3 let zero [uint 8] ([uint 8] call core_num_Int_zero 0 1 [uint 8] 0) let max_value [uint 32] ([uint 32] call core_num_Int_max_value 0 1 [uint 32] 0) let __result_1 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([uint 8] var zero) ([uint 8] deref ([ref r_anon_0 [uint 8]] var self))) ([bool] binop BiLe ([uint 64] cast ([uint 8] deref ([ref r_anon_0 [uint 8]] var self)) [uint 64]) ([uint 64] cast ([uint 32] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] cast ([uint 8] deref ([ref r_anon_0 [uint 8]] var self)) [uint 32])) ([adt core_option_Option 0 1 [uint 32]] var __result_0))) ([adt core_option_Option 0 1 [uint 32]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] cast ([uint 8] deref ([ref r_anon_0 [uint 8]] var self)) [uint 32])) ([adt core_option_Option 0 1 [uint 32]] var __result_2))) ([adt core_option_Option 0 1 [uint 32]] var __result_3)) ([adt core_option_Option 0 1 [uint 32]] var __result_4)) 
fn core_num_u8__ToPrimitive_to_u64 0 0 args 1 self [ref r_anon_0 [uint 8]] return [adt core_option_Option 0 1 [uint 64]] 1 core_num_ToPrimitive_to_u64 0 1 [uint 8] body ([adt core_option_Option 0 1 [uint 64]] block 1 let __result_4 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] block 1 let __result_3 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [uint 8] 0) ([uint 32] call core_mem_size_of 0 1 [uint 64] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 64]] block 3 let zero [uint 8] ([uint 8] call core_num_Int_zero 0 1 [uint 8] 0) let max_value [uint 64] ([uint 64] call core_num_Int_max_value 0 1 [uint 64] 0) let __result_1 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([uint 8] var zero) ([uint 8] deref ([ref r_anon_0 [uint 8]] var self))) ([bool] binop BiLe ([uint 64] cast ([uint 8] deref ([ref r_anon_0 [uint 8]] var self)) [uint 64]) ([uint 64] cast ([uint 64] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 64]] block 1 let __result [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 64]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 64]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] enum_literal core_option_Some 1 1 ([uint 64] cast ([uint 8] deref ([ref r_anon_0 [uint 8]] var self)) [uint 64])) ([adt core_option_Option 0 1 [uint 64]] var __result_0))) ([adt core_option_Option 0 1 [uint 64]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 64]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] enum_literal core_option_Some 1 1 ([uint 64] cast ([uint 8] deref ([ref r_anon_0 [uint 8]] var self)) [uint 64])) ([adt core_option_Option 0 1 [uint 64]] var __result_2))) ([adt core_option_Option 0 1 [uint 64]] var __result_3)) ([adt core_option_Option 0 1 [uint 64]] var __result_4)) 
fn core_num_u16__ToPrimitive_to_int 0 0 args 1 self [ref r_anon_0 [uint 16]] return [adt core_option_Option 0 1 [int 32]] 1 core_num_ToPrimitive_to_int 0 1 [uint 16] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result_2 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] block 2 let max_value [int 32] ([int 32] call core_num_Int_max_value 0 1 [int 32] 0) let __result_1 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] match ([int 32] cast ([bool] binop BiLe ([uint 64] cast ([uint 16] deref ([ref r_anon_0 [uint 16]] var self)) [uint 64]) ([uint 64] cast ([int 32] var max_value) [uint 64])) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 32]] block 1 let __result_0 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_Some 1 1 ([int 32] cast ([uint 16] deref ([ref r_anon_0 [uint 16]] var self)) [int 32])) ([adt core_option_Option 0 1 [int 32]] var __result_0))) ([adt core_option_Option 0 1 [int 32]] var __result_1)) ([adt core_option_Option 0 1 [int 32]] var __result_2)) 
fn core_num_u16__ToPrimitive_to_i8 0 0 args 1 self [ref r_anon_0 [uint 16]] return [adt core_option_Option 0 1 [int 8]] 1 core_num_ToPrimitive_to_i8 0 1 [uint 16] body ([adt core_option_Option 0 1 [int 8]] block 1 let __result_2 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] block 2 let max_value [int 8] ([int 8] call core_num_Int_max_value 0 1 [int 8] 0) let __result_1 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] match ([int 32] cast ([bool] binop BiLe ([uint 64] cast ([uint 16] deref ([ref r_anon_0 [uint 16]] var self)) [uint 64]) ([uint 64] cast ([int 8] var max_value) [uint 64])) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 8]] block 1 let __result [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 8]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 8]] block 1 let __result_0 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] enum_literal core_option_Some 1 1 ([int 8] cast ([uint 16] deref ([ref r_anon_0 [uint 16]] var self)) [int 8])) ([adt core_option_Option 0 1 [int 8]] var __result_0))) ([adt core_option_Option 0 1 [int 8]] var __result_1)) ([adt core_option_Option 0 1 [int 8]] var __result_2)) 
fn core_num_u16__ToPrimitive_to_i16 0 0 args 1 self [ref r_anon_0 [uint 16]] return [adt core_option_Option 0 1 [int 16]] 1 core_num_ToPrimitive_to_i16 0 1 [uint 16] body ([adt core_option_Option 0 1 [int 16]] block 1 let __result_2 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] block 2 let max_value [int 16] ([int 16] call core_num_Int_max_value 0 1 [int 16] 0) let __result_1 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] match ([int 32] cast ([bool] binop BiLe ([uint 64] cast ([uint 16] deref ([ref r_anon_0 [uint 16]] var self)) [uint 64]) ([uint 64] cast ([int 16] var max_value) [uint 64])) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 16]] block 1 let __result [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 16]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 16]] block 1 let __result_0 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] enum_literal core_option_Some 1 1 ([int 16] cast ([uint 16] deref ([ref r_anon_0 [uint 16]] var self)) [int 16])) ([adt core_option_Option 0 1 [int 16]] var __result_0))) ([adt core_option_Option 0 1 [int 16]] var __result_1)) ([adt core_option_Option 0 1 [int 16]] var __result_2)) 
fn core_num_u16__ToPrimitive_to_i32 0 0 args 1 self [ref r_anon_0 [uint 16]] return [adt core_option_Option 0 1 [int 32]] 1 core_num_ToPrimitive_to_i32 0 1 [uint 16] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result_2 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] block 2 let max_value [int 32] ([int 32] call core_num_Int_max_value 0 1 [int 32] 0) let __result_1 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] match ([int 32] cast ([bool] binop BiLe ([uint 64] cast ([uint 16] deref ([ref r_anon_0 [uint 16]] var self)) [uint 64]) ([uint 64] cast ([int 32] var max_value) [uint 64])) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 32]] block 1 let __result_0 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_Some 1 1 ([int 32] cast ([uint 16] deref ([ref r_anon_0 [uint 16]] var self)) [int 32])) ([adt core_option_Option 0 1 [int 32]] var __result_0))) ([adt core_option_Option 0 1 [int 32]] var __result_1)) ([adt core_option_Option 0 1 [int 32]] var __result_2)) 
fn core_num_u16__ToPrimitive_to_i64 0 0 args 1 self [ref r_anon_0 [uint 16]] return [adt core_option_Option 0 1 [int 64]] 1 core_num_ToPrimitive_to_i64 0 1 [uint 16] body ([adt core_option_Option 0 1 [int 64]] block 1 let __result_2 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] block 2 let max_value [int 64] ([int 64] call core_num_Int_max_value 0 1 [int 64] 0) let __result_1 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] match ([int 32] cast ([bool] binop BiLe ([uint 64] cast ([uint 16] deref ([ref r_anon_0 [uint 16]] var self)) [uint 64]) ([uint 64] cast ([int 64] var max_value) [uint 64])) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 64]] block 1 let __result [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 64]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 64]] block 1 let __result_0 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] enum_literal core_option_Some 1 1 ([int 64] cast ([uint 16] deref ([ref r_anon_0 [uint 16]] var self)) [int 64])) ([adt core_option_Option 0 1 [int 64]] var __result_0))) ([adt core_option_Option 0 1 [int 64]] var __result_1)) ([adt core_option_Option 0 1 [int 64]] var __result_2)) 
fn core_num_u16__ToPrimitive_to_uint 0 0 args 1 self [ref r_anon_0 [uint 16]] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_ToPrimitive_to_uint 0 1 [uint 16] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_4 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_3 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [uint 16] 0) ([uint 32] call core_mem_size_of 0 1 [uint 32] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 32]] block 3 let zero [uint 16] ([uint 16] call core_num_Int_zero 0 1 [uint 16] 0) let max_value [uint 32] ([uint 32] call core_num_Int_max_value 0 1 [uint 32] 0) let __result_1 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([uint 16] var zero) ([uint 16] deref ([ref r_anon_0 [uint 16]] var self))) ([bool] binop BiLe ([uint 64] cast ([uint 16] deref ([ref r_anon_0 [uint 16]] var self)) [uint 64]) ([uint 64] cast ([uint 32] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] cast ([uint 16] deref ([ref r_anon_0 [uint 16]] var self)) [uint 32])) ([adt core_option_Option 0 1 [uint 32]] var __result_0))) ([adt core_option_Option 0 1 [uint 32]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] cast ([uint 16] deref ([ref r_anon_0 [uint 16]] var self)) [uint 32])) ([adt core_option_Option 0 1 [uint 32]] var __result_2))) ([adt core_option_Option 0 1 [uint 32]] var __result_3)) ([adt core_option_Option 0 1 [uint 32]] var __result_4)) 
fn core_num_u16__ToPrimitive_to_u8 0 0 args 1 self [ref r_anon_0 [uint 16]] return [adt core_option_Option 0 1 [uint 8]] 1 core_num_ToPrimitive_to_u8 0 1 [uint 16] body ([adt core_option_Option 0 1 [uint 8]] block 1 let __result_4 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] block 1 let __result_3 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [uint 16] 0) ([uint 32] call core_mem_size_of 0 1 [uint 8] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 8]] block 3 let zero [uint 16] ([uint 16] call core_num_Int_zero 0 1 [uint 16] 0) let max_value [uint 8] ([uint 8] call core_num_Int_max_value 0 1 [uint 8] 0) let __result_1 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([uint 16] var zero) ([uint 16] deref ([ref r_anon_0 [uint 16]] var self))) ([bool] binop BiLe ([uint 64] cast ([uint 16] deref ([ref r_anon_0 [uint 16]] var self)) [uint 64]) ([uint 64] cast ([uint 8] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 8]] block 1 let __result [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 8]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 8]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] enum_literal core_option_Some 1 1 ([uint 8] cast ([uint 16] deref ([ref r_anon_0 [uint 16]] var self)) [uint 8])) ([adt core_option_Option 0 1 [uint 8]] var __result_0))) ([adt core_option_Option 0 1 [uint 8]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 8]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] enum_literal core_option_Some 1 1 ([uint 8] cast ([uint 16] deref ([ref r_anon_0 [uint 16]] var self)) [uint 8])) ([adt core_option_Option 0 1 [uint 8]] var __result_2))) ([adt core_option_Option 0 1 [uint 8]] var __result_3)) ([adt core_option_Option 0 1 [uint 8]] var __result_4)) 
fn core_num_u16__ToPrimitive_to_u16 0 0 args 1 self [ref r_anon_0 [uint 16]] return [adt core_option_Option 0 1 [uint 16]] 1 core_num_ToPrimitive_to_u16 0 1 [uint 16] body ([adt core_option_Option 0 1 [uint 16]] block 1 let __result_4 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] block 1 let __result_3 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [uint 16] 0) ([uint 32] call core_mem_size_of 0 1 [uint 16] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 16]] block 3 let zero [uint 16] ([uint 16] call core_num_Int_zero 0 1 [uint 16] 0) let max_value [uint 16] ([uint 16] call core_num_Int_max_value 0 1 [uint 16] 0) let __result_1 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([uint 16] var zero) ([uint 16] deref ([ref r_anon_0 [uint 16]] var self))) ([bool] binop BiLe ([uint 64] cast ([uint 16] deref ([ref r_anon_0 [uint 16]] var self)) [uint 64]) ([uint 64] cast ([uint 16] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 16]] block 1 let __result [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 16]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 16]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] enum_literal core_option_Some 1 1 ([uint 16] cast ([uint 16] deref ([ref r_anon_0 [uint 16]] var self)) [uint 16])) ([adt core_option_Option 0 1 [uint 16]] var __result_0))) ([adt core_option_Option 0 1 [uint 16]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 16]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] enum_literal core_option_Some 1 1 ([uint 16] cast ([uint 16] deref ([ref r_anon_0 [uint 16]] var self)) [uint 16])) ([adt core_option_Option 0 1 [uint 16]] var __result_2))) ([adt core_option_Option 0 1 [uint 16]] var __result_3)) ([adt core_option_Option 0 1 [uint 16]] var __result_4)) 
fn core_num_u16__ToPrimitive_to_u32 0 0 args 1 self [ref r_anon_0 [uint 16]] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_ToPrimitive_to_u32 0 1 [uint 16] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_4 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_3 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [uint 16] 0) ([uint 32] call core_mem_size_of 0 1 [uint 32] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 32]] block 3 let zero [uint 16] ([uint 16] call core_num_Int_zero 0 1 [uint 16] 0) let max_value [uint 32] ([uint 32] call core_num_Int_max_value 0 1 [uint 32] 0) let __result_1 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([uint 16] var zero) ([uint 16] deref ([ref r_anon_0 [uint 16]] var self))) ([bool] binop BiLe ([uint 64] cast ([uint 16] deref ([ref r_anon_0 [uint 16]] var self)) [uint 64]) ([uint 64] cast ([uint 32] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] cast ([uint 16] deref ([ref r_anon_0 [uint 16]] var self)) [uint 32])) ([adt core_option_Option 0 1 [uint 32]] var __result_0))) ([adt core_option_Option 0 1 [uint 32]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] cast ([uint 16] deref ([ref r_anon_0 [uint 16]] var self)) [uint 32])) ([adt core_option_Option 0 1 [uint 32]] var __result_2))) ([adt core_option_Option 0 1 [uint 32]] var __result_3)) ([adt core_option_Option 0 1 [uint 32]] var __result_4)) 
fn core_num_u16__ToPrimitive_to_u64 0 0 args 1 self [ref r_anon_0 [uint 16]] return [adt core_option_Option 0 1 [uint 64]] 1 core_num_ToPrimitive_to_u64 0 1 [uint 16] body ([adt core_option_Option 0 1 [uint 64]] block 1 let __result_4 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] block 1 let __result_3 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [uint 16] 0) ([uint 32] call core_mem_size_of 0 1 [uint 64] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 64]] block 3 let zero [uint 16] ([uint 16] call core_num_Int_zero 0 1 [uint 16] 0) let max_value [uint 64] ([uint 64] call core_num_Int_max_value 0 1 [uint 64] 0) let __result_1 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([uint 16] var zero) ([uint 16] deref ([ref r_anon_0 [uint 16]] var self))) ([bool] binop BiLe ([uint 64] cast ([uint 16] deref ([ref r_anon_0 [uint 16]] var self)) [uint 64]) ([uint 64] cast ([uint 64] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 64]] block 1 let __result [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 64]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 64]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] enum_literal core_option_Some 1 1 ([uint 64] cast ([uint 16] deref ([ref r_anon_0 [uint 16]] var self)) [uint 64])) ([adt core_option_Option 0 1 [uint 64]] var __result_0))) ([adt core_option_Option 0 1 [uint 64]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 64]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] enum_literal core_option_Some 1 1 ([uint 64] cast ([uint 16] deref ([ref r_anon_0 [uint 16]] var self)) [uint 64])) ([adt core_option_Option 0 1 [uint 64]] var __result_2))) ([adt core_option_Option 0 1 [uint 64]] var __result_3)) ([adt core_option_Option 0 1 [uint 64]] var __result_4)) 
fn core_num_u32__ToPrimitive_to_int 0 0 args 1 self [ref r_anon_0 [uint 32]] return [adt core_option_Option 0 1 [int 32]] 1 core_num_ToPrimitive_to_int 0 1 [uint 32] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result_2 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] block 2 let max_value [int 32] ([int 32] call core_num_Int_max_value 0 1 [int 32] 0) let __result_1 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] match ([int 32] cast ([bool] binop BiLe ([uint 64] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 64]) ([uint 64] cast ([int 32] var max_value) [uint 64])) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 32]] block 1 let __result_0 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_Some 1 1 ([int 32] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [int 32])) ([adt core_option_Option 0 1 [int 32]] var __result_0))) ([adt core_option_Option 0 1 [int 32]] var __result_1)) ([adt core_option_Option 0 1 [int 32]] var __result_2)) 
fn core_num_u32__ToPrimitive_to_i8 0 0 args 1 self [ref r_anon_0 [uint 32]] return [adt core_option_Option 0 1 [int 8]] 1 core_num_ToPrimitive_to_i8 0 1 [uint 32] body ([adt core_option_Option 0 1 [int 8]] block 1 let __result_2 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] block 2 let max_value [int 8] ([int 8] call core_num_Int_max_value 0 1 [int 8] 0) let __result_1 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] match ([int 32] cast ([bool] binop BiLe ([uint 64] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 64]) ([uint 64] cast ([int 8] var max_value) [uint 64])) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 8]] block 1 let __result [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 8]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 8]] block 1 let __result_0 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] enum_literal core_option_Some 1 1 ([int 8] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [int 8])) ([adt core_option_Option 0 1 [int 8]] var __result_0))) ([adt core_option_Option 0 1 [int 8]] var __result_1)) ([adt core_option_Option 0 1 [int 8]] var __result_2)) 
fn core_num_u32__ToPrimitive_to_i16 0 0 args 1 self [ref r_anon_0 [uint 32]] return [adt core_option_Option 0 1 [int 16]] 1 core_num_ToPrimitive_to_i16 0 1 [uint 32] body ([adt core_option_Option 0 1 [int 16]] block 1 let __result_2 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] block 2 let max_value [int 16] ([int 16] call core_num_Int_max_value 0 1 [int 16] 0) let __result_1 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] match ([int 32] cast ([bool] binop BiLe ([uint 64] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 64]) ([uint 64] cast ([int 16] var max_value) [uint 64])) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 16]] block 1 let __result [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 16]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 16]] block 1 let __result_0 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] enum_literal core_option_Some 1 1 ([int 16] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [int 16])) ([adt core_option_Option 0 1 [int 16]] var __result_0))) ([adt core_option_Option 0 1 [int 16]] var __result_1)) ([adt core_option_Option 0 1 [int 16]] var __result_2)) 
fn core_num_u32__ToPrimitive_to_i32 0 0 args 1 self [ref r_anon_0 [uint 32]] return [adt core_option_Option 0 1 [int 32]] 1 core_num_ToPrimitive_to_i32 0 1 [uint 32] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result_2 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] block 2 let max_value [int 32] ([int 32] call core_num_Int_max_value 0 1 [int 32] 0) let __result_1 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] match ([int 32] cast ([bool] binop BiLe ([uint 64] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 64]) ([uint 64] cast ([int 32] var max_value) [uint 64])) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 32]] block 1 let __result_0 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_Some 1 1 ([int 32] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [int 32])) ([adt core_option_Option 0 1 [int 32]] var __result_0))) ([adt core_option_Option 0 1 [int 32]] var __result_1)) ([adt core_option_Option 0 1 [int 32]] var __result_2)) 
fn core_num_u32__ToPrimitive_to_i64 0 0 args 1 self [ref r_anon_0 [uint 32]] return [adt core_option_Option 0 1 [int 64]] 1 core_num_ToPrimitive_to_i64 0 1 [uint 32] body ([adt core_option_Option 0 1 [int 64]] block 1 let __result_2 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] block 2 let max_value [int 64] ([int 64] call core_num_Int_max_value 0 1 [int 64] 0) let __result_1 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] match ([int 32] cast ([bool] binop BiLe ([uint 64] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 64]) ([uint 64] cast ([int 64] var max_value) [uint 64])) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 64]] block 1 let __result [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 64]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 64]] block 1 let __result_0 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] enum_literal core_option_Some 1 1 ([int 64] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [int 64])) ([adt core_option_Option 0 1 [int 64]] var __result_0))) ([adt core_option_Option 0 1 [int 64]] var __result_1)) ([adt core_option_Option 0 1 [int 64]] var __result_2)) 
fn core_num_u32__ToPrimitive_to_uint 0 0 args 1 self [ref r_anon_0 [uint 32]] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_ToPrimitive_to_uint 0 1 [uint 32] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_4 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_3 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [uint 32] 0) ([uint 32] call core_mem_size_of 0 1 [uint 32] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 32]] block 3 let zero [uint 32] ([uint 32] call core_num_Int_zero 0 1 [uint 32] 0) let max_value [uint 32] ([uint 32] call core_num_Int_max_value 0 1 [uint 32] 0) let __result_1 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([uint 32] var zero) ([uint 32] deref ([ref r_anon_0 [uint 32]] var self))) ([bool] binop BiLe ([uint 64] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 64]) ([uint 64] cast ([uint 32] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 32])) ([adt core_option_Option 0 1 [uint 32]] var __result_0))) ([adt core_option_Option 0 1 [uint 32]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 32])) ([adt core_option_Option 0 1 [uint 32]] var __result_2))) ([adt core_option_Option 0 1 [uint 32]] var __result_3)) ([adt core_option_Option 0 1 [uint 32]] var __result_4)) 
fn core_num_u32__ToPrimitive_to_u8 0 0 args 1 self [ref r_anon_0 [uint 32]] return [adt core_option_Option 0 1 [uint 8]] 1 core_num_ToPrimitive_to_u8 0 1 [uint 32] body ([adt core_option_Option 0 1 [uint 8]] block 1 let __result_4 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] block 1 let __result_3 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [uint 32] 0) ([uint 32] call core_mem_size_of 0 1 [uint 8] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 8]] block 3 let zero [uint 32] ([uint 32] call core_num_Int_zero 0 1 [uint 32] 0) let max_value [uint 8] ([uint 8] call core_num_Int_max_value 0 1 [uint 8] 0) let __result_1 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([uint 32] var zero) ([uint 32] deref ([ref r_anon_0 [uint 32]] var self))) ([bool] binop BiLe ([uint 64] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 64]) ([uint 64] cast ([uint 8] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 8]] block 1 let __result [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 8]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 8]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] enum_literal core_option_Some 1 1 ([uint 8] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 8])) ([adt core_option_Option 0 1 [uint 8]] var __result_0))) ([adt core_option_Option 0 1 [uint 8]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 8]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] enum_literal core_option_Some 1 1 ([uint 8] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 8])) ([adt core_option_Option 0 1 [uint 8]] var __result_2))) ([adt core_option_Option 0 1 [uint 8]] var __result_3)) ([adt core_option_Option 0 1 [uint 8]] var __result_4)) 
fn core_num_u32__ToPrimitive_to_u16 0 0 args 1 self [ref r_anon_0 [uint 32]] return [adt core_option_Option 0 1 [uint 16]] 1 core_num_ToPrimitive_to_u16 0 1 [uint 32] body ([adt core_option_Option 0 1 [uint 16]] block 1 let __result_4 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] block 1 let __result_3 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [uint 32] 0) ([uint 32] call core_mem_size_of 0 1 [uint 16] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 16]] block 3 let zero [uint 32] ([uint 32] call core_num_Int_zero 0 1 [uint 32] 0) let max_value [uint 16] ([uint 16] call core_num_Int_max_value 0 1 [uint 16] 0) let __result_1 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([uint 32] var zero) ([uint 32] deref ([ref r_anon_0 [uint 32]] var self))) ([bool] binop BiLe ([uint 64] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 64]) ([uint 64] cast ([uint 16] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 16]] block 1 let __result [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 16]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 16]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] enum_literal core_option_Some 1 1 ([uint 16] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 16])) ([adt core_option_Option 0 1 [uint 16]] var __result_0))) ([adt core_option_Option 0 1 [uint 16]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 16]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] enum_literal core_option_Some 1 1 ([uint 16] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 16])) ([adt core_option_Option 0 1 [uint 16]] var __result_2))) ([adt core_option_Option 0 1 [uint 16]] var __result_3)) ([adt core_option_Option 0 1 [uint 16]] var __result_4)) 
fn core_num_u32__ToPrimitive_to_u32 0 0 args 1 self [ref r_anon_0 [uint 32]] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_ToPrimitive_to_u32 0 1 [uint 32] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_4 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_3 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [uint 32] 0) ([uint 32] call core_mem_size_of 0 1 [uint 32] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 32]] block 3 let zero [uint 32] ([uint 32] call core_num_Int_zero 0 1 [uint 32] 0) let max_value [uint 32] ([uint 32] call core_num_Int_max_value 0 1 [uint 32] 0) let __result_1 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([uint 32] var zero) ([uint 32] deref ([ref r_anon_0 [uint 32]] var self))) ([bool] binop BiLe ([uint 64] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 64]) ([uint 64] cast ([uint 32] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 32])) ([adt core_option_Option 0 1 [uint 32]] var __result_0))) ([adt core_option_Option 0 1 [uint 32]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 32])) ([adt core_option_Option 0 1 [uint 32]] var __result_2))) ([adt core_option_Option 0 1 [uint 32]] var __result_3)) ([adt core_option_Option 0 1 [uint 32]] var __result_4)) 
fn core_num_u32__ToPrimitive_to_u64 0 0 args 1 self [ref r_anon_0 [uint 32]] return [adt core_option_Option 0 1 [uint 64]] 1 core_num_ToPrimitive_to_u64 0 1 [uint 32] body ([adt core_option_Option 0 1 [uint 64]] block 1 let __result_4 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] block 1 let __result_3 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [uint 32] 0) ([uint 32] call core_mem_size_of 0 1 [uint 64] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 64]] block 3 let zero [uint 32] ([uint 32] call core_num_Int_zero 0 1 [uint 32] 0) let max_value [uint 64] ([uint 64] call core_num_Int_max_value 0 1 [uint 64] 0) let __result_1 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([uint 32] var zero) ([uint 32] deref ([ref r_anon_0 [uint 32]] var self))) ([bool] binop BiLe ([uint 64] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 64]) ([uint 64] cast ([uint 64] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 64]] block 1 let __result [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 64]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 64]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] enum_literal core_option_Some 1 1 ([uint 64] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 64])) ([adt core_option_Option 0 1 [uint 64]] var __result_0))) ([adt core_option_Option 0 1 [uint 64]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 64]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] enum_literal core_option_Some 1 1 ([uint 64] cast ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) [uint 64])) ([adt core_option_Option 0 1 [uint 64]] var __result_2))) ([adt core_option_Option 0 1 [uint 64]] var __result_3)) ([adt core_option_Option 0 1 [uint 64]] var __result_4)) 
fn core_num_u64__ToPrimitive_to_int 0 0 args 1 self [ref r_anon_0 [uint 64]] return [adt core_option_Option 0 1 [int 32]] 1 core_num_ToPrimitive_to_int 0 1 [uint 64] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result_2 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] block 2 let max_value [int 32] ([int 32] call core_num_Int_max_value 0 1 [int 32] 0) let __result_1 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] match ([int 32] cast ([bool] binop BiLe ([uint 64] cast ([uint 64] deref ([ref r_anon_0 [uint 64]] var self)) [uint 64]) ([uint 64] cast ([int 32] var max_value) [uint 64])) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 32]] block 1 let __result_0 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_Some 1 1 ([int 32] cast ([uint 64] deref ([ref r_anon_0 [uint 64]] var self)) [int 32])) ([adt core_option_Option 0 1 [int 32]] var __result_0))) ([adt core_option_Option 0 1 [int 32]] var __result_1)) ([adt core_option_Option 0 1 [int 32]] var __result_2)) 
fn core_num_u64__ToPrimitive_to_i8 0 0 args 1 self [ref r_anon_0 [uint 64]] return [adt core_option_Option 0 1 [int 8]] 1 core_num_ToPrimitive_to_i8 0 1 [uint 64] body ([adt core_option_Option 0 1 [int 8]] block 1 let __result_2 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] block 2 let max_value [int 8] ([int 8] call core_num_Int_max_value 0 1 [int 8] 0) let __result_1 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] match ([int 32] cast ([bool] binop BiLe ([uint 64] cast ([uint 64] deref ([ref r_anon_0 [uint 64]] var self)) [uint 64]) ([uint 64] cast ([int 8] var max_value) [uint 64])) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 8]] block 1 let __result [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 8]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 8]] block 1 let __result_0 [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] enum_literal core_option_Some 1 1 ([int 8] cast ([uint 64] deref ([ref r_anon_0 [uint 64]] var self)) [int 8])) ([adt core_option_Option 0 1 [int 8]] var __result_0))) ([adt core_option_Option 0 1 [int 8]] var __result_1)) ([adt core_option_Option 0 1 [int 8]] var __result_2)) 
fn core_num_u64__ToPrimitive_to_i16 0 0 args 1 self [ref r_anon_0 [uint 64]] return [adt core_option_Option 0 1 [int 16]] 1 core_num_ToPrimitive_to_i16 0 1 [uint 64] body ([adt core_option_Option 0 1 [int 16]] block 1 let __result_2 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] block 2 let max_value [int 16] ([int 16] call core_num_Int_max_value 0 1 [int 16] 0) let __result_1 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] match ([int 32] cast ([bool] binop BiLe ([uint 64] cast ([uint 64] deref ([ref r_anon_0 [uint 64]] var self)) [uint 64]) ([uint 64] cast ([int 16] var max_value) [uint 64])) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 16]] block 1 let __result [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 16]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 16]] block 1 let __result_0 [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] enum_literal core_option_Some 1 1 ([int 16] cast ([uint 64] deref ([ref r_anon_0 [uint 64]] var self)) [int 16])) ([adt core_option_Option 0 1 [int 16]] var __result_0))) ([adt core_option_Option 0 1 [int 16]] var __result_1)) ([adt core_option_Option 0 1 [int 16]] var __result_2)) 
fn core_num_u64__ToPrimitive_to_i32 0 0 args 1 self [ref r_anon_0 [uint 64]] return [adt core_option_Option 0 1 [int 32]] 1 core_num_ToPrimitive_to_i32 0 1 [uint 64] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result_2 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] block 2 let max_value [int 32] ([int 32] call core_num_Int_max_value 0 1 [int 32] 0) let __result_1 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] match ([int 32] cast ([bool] binop BiLe ([uint 64] cast ([uint 64] deref ([ref r_anon_0 [uint 64]] var self)) [uint 64]) ([uint 64] cast ([int 32] var max_value) [uint 64])) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 32]] block 1 let __result_0 [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] enum_literal core_option_Some 1 1 ([int 32] cast ([uint 64] deref ([ref r_anon_0 [uint 64]] var self)) [int 32])) ([adt core_option_Option 0 1 [int 32]] var __result_0))) ([adt core_option_Option 0 1 [int 32]] var __result_1)) ([adt core_option_Option 0 1 [int 32]] var __result_2)) 
fn core_num_u64__ToPrimitive_to_i64 0 0 args 1 self [ref r_anon_0 [uint 64]] return [adt core_option_Option 0 1 [int 64]] 1 core_num_ToPrimitive_to_i64 0 1 [uint 64] body ([adt core_option_Option 0 1 [int 64]] block 1 let __result_2 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] block 2 let max_value [int 64] ([int 64] call core_num_Int_max_value 0 1 [int 64] 0) let __result_1 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] match ([int 32] cast ([bool] binop BiLe ([uint 64] cast ([uint 64] deref ([ref r_anon_0 [uint 64]] var self)) [uint 64]) ([uint 64] cast ([int 64] var max_value) [uint 64])) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [int 64]] block 1 let __result [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [int 64]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [int 64]] block 1 let __result_0 [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] enum_literal core_option_Some 1 1 ([int 64] cast ([uint 64] deref ([ref r_anon_0 [uint 64]] var self)) [int 64])) ([adt core_option_Option 0 1 [int 64]] var __result_0))) ([adt core_option_Option 0 1 [int 64]] var __result_1)) ([adt core_option_Option 0 1 [int 64]] var __result_2)) 
fn core_num_u64__ToPrimitive_to_uint 0 0 args 1 self [ref r_anon_0 [uint 64]] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_ToPrimitive_to_uint 0 1 [uint 64] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_4 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_3 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [uint 64] 0) ([uint 32] call core_mem_size_of 0 1 [uint 32] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 32]] block 3 let zero [uint 64] ([uint 64] call core_num_Int_zero 0 1 [uint 64] 0) let max_value [uint 32] ([uint 32] call core_num_Int_max_value 0 1 [uint 32] 0) let __result_1 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([uint 64] var zero) ([uint 64] deref ([ref r_anon_0 [uint 64]] var self))) ([bool] binop BiLe ([uint 64] cast ([uint 64] deref ([ref r_anon_0 [uint 64]] var self)) [uint 64]) ([uint 64] cast ([uint 32] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] cast ([uint 64] deref ([ref r_anon_0 [uint 64]] var self)) [uint 32])) ([adt core_option_Option 0 1 [uint 32]] var __result_0))) ([adt core_option_Option 0 1 [uint 32]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] cast ([uint 64] deref ([ref r_anon_0 [uint 64]] var self)) [uint 32])) ([adt core_option_Option 0 1 [uint 32]] var __result_2))) ([adt core_option_Option 0 1 [uint 32]] var __result_3)) ([adt core_option_Option 0 1 [uint 32]] var __result_4)) 
fn core_num_u64__ToPrimitive_to_u8 0 0 args 1 self [ref r_anon_0 [uint 64]] return [adt core_option_Option 0 1 [uint 8]] 1 core_num_ToPrimitive_to_u8 0 1 [uint 64] body ([adt core_option_Option 0 1 [uint 8]] block 1 let __result_4 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] block 1 let __result_3 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [uint 64] 0) ([uint 32] call core_mem_size_of 0 1 [uint 8] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 8]] block 3 let zero [uint 64] ([uint 64] call core_num_Int_zero 0 1 [uint 64] 0) let max_value [uint 8] ([uint 8] call core_num_Int_max_value 0 1 [uint 8] 0) let __result_1 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([uint 64] var zero) ([uint 64] deref ([ref r_anon_0 [uint 64]] var self))) ([bool] binop BiLe ([uint 64] cast ([uint 64] deref ([ref r_anon_0 [uint 64]] var self)) [uint 64]) ([uint 64] cast ([uint 8] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 8]] block 1 let __result [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 8]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 8]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] enum_literal core_option_Some 1 1 ([uint 8] cast ([uint 64] deref ([ref r_anon_0 [uint 64]] var self)) [uint 8])) ([adt core_option_Option 0 1 [uint 8]] var __result_0))) ([adt core_option_Option 0 1 [uint 8]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 8]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] enum_literal core_option_Some 1 1 ([uint 8] cast ([uint 64] deref ([ref r_anon_0 [uint 64]] var self)) [uint 8])) ([adt core_option_Option 0 1 [uint 8]] var __result_2))) ([adt core_option_Option 0 1 [uint 8]] var __result_3)) ([adt core_option_Option 0 1 [uint 8]] var __result_4)) 
fn core_num_u64__ToPrimitive_to_u16 0 0 args 1 self [ref r_anon_0 [uint 64]] return [adt core_option_Option 0 1 [uint 16]] 1 core_num_ToPrimitive_to_u16 0 1 [uint 64] body ([adt core_option_Option 0 1 [uint 16]] block 1 let __result_4 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] block 1 let __result_3 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [uint 64] 0) ([uint 32] call core_mem_size_of 0 1 [uint 16] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 16]] block 3 let zero [uint 64] ([uint 64] call core_num_Int_zero 0 1 [uint 64] 0) let max_value [uint 16] ([uint 16] call core_num_Int_max_value 0 1 [uint 16] 0) let __result_1 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([uint 64] var zero) ([uint 64] deref ([ref r_anon_0 [uint 64]] var self))) ([bool] binop BiLe ([uint 64] cast ([uint 64] deref ([ref r_anon_0 [uint 64]] var self)) [uint 64]) ([uint 64] cast ([uint 16] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 16]] block 1 let __result [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 16]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 16]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] enum_literal core_option_Some 1 1 ([uint 16] cast ([uint 64] deref ([ref r_anon_0 [uint 64]] var self)) [uint 16])) ([adt core_option_Option 0 1 [uint 16]] var __result_0))) ([adt core_option_Option 0 1 [uint 16]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 16]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] enum_literal core_option_Some 1 1 ([uint 16] cast ([uint 64] deref ([ref r_anon_0 [uint 64]] var self)) [uint 16])) ([adt core_option_Option 0 1 [uint 16]] var __result_2))) ([adt core_option_Option 0 1 [uint 16]] var __result_3)) ([adt core_option_Option 0 1 [uint 16]] var __result_4)) 
fn core_num_u64__ToPrimitive_to_u32 0 0 args 1 self [ref r_anon_0 [uint 64]] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_ToPrimitive_to_u32 0 1 [uint 64] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_4 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_3 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [uint 64] 0) ([uint 32] call core_mem_size_of 0 1 [uint 32] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 32]] block 3 let zero [uint 64] ([uint 64] call core_num_Int_zero 0 1 [uint 64] 0) let max_value [uint 32] ([uint 32] call core_num_Int_max_value 0 1 [uint 32] 0) let __result_1 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([uint 64] var zero) ([uint 64] deref ([ref r_anon_0 [uint 64]] var self))) ([bool] binop BiLe ([uint 64] cast ([uint 64] deref ([ref r_anon_0 [uint 64]] var self)) [uint 64]) ([uint 64] cast ([uint 32] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 32]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] cast ([uint 64] deref ([ref r_anon_0 [uint 64]] var self)) [uint 32])) ([adt core_option_Option 0 1 [uint 32]] var __result_0))) ([adt core_option_Option 0 1 [uint 32]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 32]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] cast ([uint 64] deref ([ref r_anon_0 [uint 64]] var self)) [uint 32])) ([adt core_option_Option 0 1 [uint 32]] var __result_2))) ([adt core_option_Option 0 1 [uint 32]] var __result_3)) ([adt core_option_Option 0 1 [uint 32]] var __result_4)) 
fn core_num_u64__ToPrimitive_to_u64 0 0 args 1 self [ref r_anon_0 [uint 64]] return [adt core_option_Option 0 1 [uint 64]] 1 core_num_ToPrimitive_to_u64 0 1 [uint 64] body ([adt core_option_Option 0 1 [uint 64]] block 1 let __result_4 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] block 1 let __result_3 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] match ([int 32] cast ([bool] binop BiLe ([uint 32] call core_mem_size_of 0 1 [uint 64] 0) ([uint 32] call core_mem_size_of 0 1 [uint 64] 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 64]] block 3 let zero [uint 64] ([uint 64] call core_num_Int_zero 0 1 [uint 64] 0) let max_value [uint 64] ([uint 64] call core_num_Int_max_value 0 1 [uint 64] 0) let __result_1 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] match ([int 32] cast ([bool] binop BiAnd ([bool] binop BiLe ([uint 64] var zero) ([uint 64] deref ([ref r_anon_0 [uint 64]] var self))) ([bool] binop BiLe ([uint 64] cast ([uint 64] deref ([ref r_anon_0 [uint 64]] var self)) [uint 64]) ([uint 64] cast ([uint 64] var max_value) [uint 64]))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 64]] block 1 let __result [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [uint 64]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 64]] block 1 let __result_0 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] enum_literal core_option_Some 1 1 ([uint 64] cast ([uint 64] deref ([ref r_anon_0 [uint 64]] var self)) [uint 64])) ([adt core_option_Option 0 1 [uint 64]] var __result_0))) ([adt core_option_Option 0 1 [uint 64]] var __result_1)) ([int 32] wild) ([adt core_option_Option 0 1 [uint 64]] block 1 let __result_2 [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] enum_literal core_option_Some 1 1 ([uint 64] cast ([uint 64] deref ([ref r_anon_0 [uint 64]] var self)) [uint 64])) ([adt core_option_Option 0 1 [uint 64]] var __result_2))) ([adt core_option_Option 0 1 [uint 64]] var __result_3)) ([adt core_option_Option 0 1 [uint 64]] var __result_4)) 
fn core_num_from_int 0 1 f_0 args 1 n [int 32] return [adt core_option_Option 0 1 [var f_0]] 0 body ([adt core_option_Option 0 1 [var f_0]] block 1 let __result [adt core_option_Option 0 1 [var f_0]] ([adt core_option_Option 0 1 [var f_0]] call core_num_FromPrimitive_from_int 0 1 [var f_0] 1 ([int 32] var n)) ([adt core_option_Option 0 1 [var f_0]] var __result)) 
fn core_num_from_i8 0 1 f_0 args 1 n [int 8] return [adt core_option_Option 0 1 [var f_0]] 0 body ([adt core_option_Option 0 1 [var f_0]] block 1 let __result [adt core_option_Option 0 1 [var f_0]] ([adt core_option_Option 0 1 [var f_0]] call core_num_FromPrimitive_from_i8 0 1 [var f_0] 1 ([int 8] var n)) ([adt core_option_Option 0 1 [var f_0]] var __result)) 
fn core_num_from_i16 0 1 f_0 args 1 n [int 16] return [adt core_option_Option 0 1 [var f_0]] 0 body ([adt core_option_Option 0 1 [var f_0]] block 1 let __result [adt core_option_Option 0 1 [var f_0]] ([adt core_option_Option 0 1 [var f_0]] call core_num_FromPrimitive_from_i16 0 1 [var f_0] 1 ([int 16] var n)) ([adt core_option_Option 0 1 [var f_0]] var __result)) 
fn core_num_from_i32 0 1 f_0 args 1 n [int 32] return [adt core_option_Option 0 1 [var f_0]] 0 body ([adt core_option_Option 0 1 [var f_0]] block 1 let __result [adt core_option_Option 0 1 [var f_0]] ([adt core_option_Option 0 1 [var f_0]] call core_num_FromPrimitive_from_i32 0 1 [var f_0] 1 ([int 32] var n)) ([adt core_option_Option 0 1 [var f_0]] var __result)) 
fn core_num_from_i64 0 1 f_0 args 1 n [int 64] return [adt core_option_Option 0 1 [var f_0]] 0 body ([adt core_option_Option 0 1 [var f_0]] block 1 let __result [adt core_option_Option 0 1 [var f_0]] ([adt core_option_Option 0 1 [var f_0]] call core_num_FromPrimitive_from_i64 0 1 [var f_0] 1 ([int 64] var n)) ([adt core_option_Option 0 1 [var f_0]] var __result)) 
fn core_num_from_uint 0 1 f_0 args 1 n [uint 32] return [adt core_option_Option 0 1 [var f_0]] 0 body ([adt core_option_Option 0 1 [var f_0]] block 1 let __result [adt core_option_Option 0 1 [var f_0]] ([adt core_option_Option 0 1 [var f_0]] call core_num_FromPrimitive_from_uint 0 1 [var f_0] 1 ([uint 32] var n)) ([adt core_option_Option 0 1 [var f_0]] var __result)) 
fn core_num_from_u8 0 1 f_0 args 1 n [uint 8] return [adt core_option_Option 0 1 [var f_0]] 0 body ([adt core_option_Option 0 1 [var f_0]] block 1 let __result [adt core_option_Option 0 1 [var f_0]] ([adt core_option_Option 0 1 [var f_0]] call core_num_FromPrimitive_from_u8 0 1 [var f_0] 1 ([uint 8] var n)) ([adt core_option_Option 0 1 [var f_0]] var __result)) 
fn core_num_from_u16 0 1 f_0 args 1 n [uint 16] return [adt core_option_Option 0 1 [var f_0]] 0 body ([adt core_option_Option 0 1 [var f_0]] block 1 let __result [adt core_option_Option 0 1 [var f_0]] ([adt core_option_Option 0 1 [var f_0]] call core_num_FromPrimitive_from_u16 0 1 [var f_0] 1 ([uint 16] var n)) ([adt core_option_Option 0 1 [var f_0]] var __result)) 
fn core_num_from_u32 0 1 f_0 args 1 n [uint 32] return [adt core_option_Option 0 1 [var f_0]] 0 body ([adt core_option_Option 0 1 [var f_0]] block 1 let __result [adt core_option_Option 0 1 [var f_0]] ([adt core_option_Option 0 1 [var f_0]] call core_num_FromPrimitive_from_u32 0 1 [var f_0] 1 ([uint 32] var n)) ([adt core_option_Option 0 1 [var f_0]] var __result)) 
fn core_num_from_u64 0 1 f_0 args 1 n [uint 64] return [adt core_option_Option 0 1 [var f_0]] 0 body ([adt core_option_Option 0 1 [var f_0]] block 1 let __result [adt core_option_Option 0 1 [var f_0]] ([adt core_option_Option 0 1 [var f_0]] call core_num_FromPrimitive_from_u64 0 1 [var f_0] 1 ([uint 64] var n)) ([adt core_option_Option 0 1 [var f_0]] var __result)) 
fn core_num_int__FromPrimitive_from_int 0 0 args 1 n [int 32] return [adt core_option_Option 0 1 [int 32]] 1 core_num_FromPrimitive_from_int 0 1 [int 32] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] call core_num_ToPrimitive_to_int 0 1 [int 32] 1 ([ref r_scope_13984 [int 32]] addr_of ([int 32] var n))) ([adt core_option_Option 0 1 [int 32]] var __result)) 
fn core_num_int__FromPrimitive_from_i8 0 0 args 1 n [int 8] return [adt core_option_Option 0 1 [int 32]] 1 core_num_FromPrimitive_from_i8 0 1 [int 32] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] call core_num_ToPrimitive_to_int 0 1 [int 8] 1 ([ref r_scope_13997 [int 8]] addr_of ([int 8] var n))) ([adt core_option_Option 0 1 [int 32]] var __result)) 
fn core_num_int__FromPrimitive_from_i16 0 0 args 1 n [int 16] return [adt core_option_Option 0 1 [int 32]] 1 core_num_FromPrimitive_from_i16 0 1 [int 32] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] call core_num_ToPrimitive_to_int 0 1 [int 16] 1 ([ref r_scope_14010 [int 16]] addr_of ([int 16] var n))) ([adt core_option_Option 0 1 [int 32]] var __result)) 
fn core_num_int__FromPrimitive_from_i32 0 0 args 1 n [int 32] return [adt core_option_Option 0 1 [int 32]] 1 core_num_FromPrimitive_from_i32 0 1 [int 32] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] call core_num_ToPrimitive_to_int 0 1 [int 32] 1 ([ref r_scope_14023 [int 32]] addr_of ([int 32] var n))) ([adt core_option_Option 0 1 [int 32]] var __result)) 
fn core_num_int__FromPrimitive_from_i64 0 0 args 1 n [int 64] return [adt core_option_Option 0 1 [int 32]] 1 core_num_FromPrimitive_from_i64 0 1 [int 32] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] call core_num_ToPrimitive_to_int 0 1 [int 64] 1 ([ref r_scope_14036 [int 64]] addr_of ([int 64] var n))) ([adt core_option_Option 0 1 [int 32]] var __result)) 
fn core_num_int__FromPrimitive_from_uint 0 0 args 1 n [uint 32] return [adt core_option_Option 0 1 [int 32]] 1 core_num_FromPrimitive_from_uint 0 1 [int 32] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] call core_num_ToPrimitive_to_int 0 1 [uint 32] 1 ([ref r_scope_14049 [uint 32]] addr_of ([uint 32] var n))) ([adt core_option_Option 0 1 [int 32]] var __result)) 
fn core_num_int__FromPrimitive_from_u8 0 0 args 1 n [uint 8] return [adt core_option_Option 0 1 [int 32]] 1 core_num_FromPrimitive_from_u8 0 1 [int 32] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] call core_num_ToPrimitive_to_int 0 1 [uint 8] 1 ([ref r_scope_14062 [uint 8]] addr_of ([uint 8] var n))) ([adt core_option_Option 0 1 [int 32]] var __result)) 
fn core_num_int__FromPrimitive_from_u16 0 0 args 1 n [uint 16] return [adt core_option_Option 0 1 [int 32]] 1 core_num_FromPrimitive_from_u16 0 1 [int 32] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] call core_num_ToPrimitive_to_int 0 1 [uint 16] 1 ([ref r_scope_14075 [uint 16]] addr_of ([uint 16] var n))) ([adt core_option_Option 0 1 [int 32]] var __result)) 
fn core_num_int__FromPrimitive_from_u32 0 0 args 1 n [uint 32] return [adt core_option_Option 0 1 [int 32]] 1 core_num_FromPrimitive_from_u32 0 1 [int 32] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] call core_num_ToPrimitive_to_int 0 1 [uint 32] 1 ([ref r_scope_14088 [uint 32]] addr_of ([uint 32] var n))) ([adt core_option_Option 0 1 [int 32]] var __result)) 
fn core_num_int__FromPrimitive_from_u64 0 0 args 1 n [uint 64] return [adt core_option_Option 0 1 [int 32]] 1 core_num_FromPrimitive_from_u64 0 1 [int 32] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] call core_num_ToPrimitive_to_int 0 1 [uint 64] 1 ([ref r_scope_14101 [uint 64]] addr_of ([uint 64] var n))) ([adt core_option_Option 0 1 [int 32]] var __result)) 
fn core_num_i8__FromPrimitive_from_int 0 0 args 1 n [int 32] return [adt core_option_Option 0 1 [int 8]] 1 core_num_FromPrimitive_from_int 0 1 [int 8] body ([adt core_option_Option 0 1 [int 8]] block 1 let __result [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] call core_num_ToPrimitive_to_i8 0 1 [int 32] 1 ([ref r_scope_14145 [int 32]] addr_of ([int 32] var n))) ([adt core_option_Option 0 1 [int 8]] var __result)) 
fn core_num_i8__FromPrimitive_from_i8 0 0 args 1 n [int 8] return [adt core_option_Option 0 1 [int 8]] 1 core_num_FromPrimitive_from_i8 0 1 [int 8] body ([adt core_option_Option 0 1 [int 8]] block 1 let __result [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] call core_num_ToPrimitive_to_i8 0 1 [int 8] 1 ([ref r_scope_14158 [int 8]] addr_of ([int 8] var n))) ([adt core_option_Option 0 1 [int 8]] var __result)) 
fn core_num_i8__FromPrimitive_from_i16 0 0 args 1 n [int 16] return [adt core_option_Option 0 1 [int 8]] 1 core_num_FromPrimitive_from_i16 0 1 [int 8] body ([adt core_option_Option 0 1 [int 8]] block 1 let __result [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] call core_num_ToPrimitive_to_i8 0 1 [int 16] 1 ([ref r_scope_14171 [int 16]] addr_of ([int 16] var n))) ([adt core_option_Option 0 1 [int 8]] var __result)) 
fn core_num_i8__FromPrimitive_from_i32 0 0 args 1 n [int 32] return [adt core_option_Option 0 1 [int 8]] 1 core_num_FromPrimitive_from_i32 0 1 [int 8] body ([adt core_option_Option 0 1 [int 8]] block 1 let __result [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] call core_num_ToPrimitive_to_i8 0 1 [int 32] 1 ([ref r_scope_14184 [int 32]] addr_of ([int 32] var n))) ([adt core_option_Option 0 1 [int 8]] var __result)) 
fn core_num_i8__FromPrimitive_from_i64 0 0 args 1 n [int 64] return [adt core_option_Option 0 1 [int 8]] 1 core_num_FromPrimitive_from_i64 0 1 [int 8] body ([adt core_option_Option 0 1 [int 8]] block 1 let __result [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] call core_num_ToPrimitive_to_i8 0 1 [int 64] 1 ([ref r_scope_14197 [int 64]] addr_of ([int 64] var n))) ([adt core_option_Option 0 1 [int 8]] var __result)) 
fn core_num_i8__FromPrimitive_from_uint 0 0 args 1 n [uint 32] return [adt core_option_Option 0 1 [int 8]] 1 core_num_FromPrimitive_from_uint 0 1 [int 8] body ([adt core_option_Option 0 1 [int 8]] block 1 let __result [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] call core_num_ToPrimitive_to_i8 0 1 [uint 32] 1 ([ref r_scope_14210 [uint 32]] addr_of ([uint 32] var n))) ([adt core_option_Option 0 1 [int 8]] var __result)) 
fn core_num_i8__FromPrimitive_from_u8 0 0 args 1 n [uint 8] return [adt core_option_Option 0 1 [int 8]] 1 core_num_FromPrimitive_from_u8 0 1 [int 8] body ([adt core_option_Option 0 1 [int 8]] block 1 let __result [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] call core_num_ToPrimitive_to_i8 0 1 [uint 8] 1 ([ref r_scope_14223 [uint 8]] addr_of ([uint 8] var n))) ([adt core_option_Option 0 1 [int 8]] var __result)) 
fn core_num_i8__FromPrimitive_from_u16 0 0 args 1 n [uint 16] return [adt core_option_Option 0 1 [int 8]] 1 core_num_FromPrimitive_from_u16 0 1 [int 8] body ([adt core_option_Option 0 1 [int 8]] block 1 let __result [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] call core_num_ToPrimitive_to_i8 0 1 [uint 16] 1 ([ref r_scope_14236 [uint 16]] addr_of ([uint 16] var n))) ([adt core_option_Option 0 1 [int 8]] var __result)) 
fn core_num_i8__FromPrimitive_from_u32 0 0 args 1 n [uint 32] return [adt core_option_Option 0 1 [int 8]] 1 core_num_FromPrimitive_from_u32 0 1 [int 8] body ([adt core_option_Option 0 1 [int 8]] block 1 let __result [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] call core_num_ToPrimitive_to_i8 0 1 [uint 32] 1 ([ref r_scope_14249 [uint 32]] addr_of ([uint 32] var n))) ([adt core_option_Option 0 1 [int 8]] var __result)) 
fn core_num_i8__FromPrimitive_from_u64 0 0 args 1 n [uint 64] return [adt core_option_Option 0 1 [int 8]] 1 core_num_FromPrimitive_from_u64 0 1 [int 8] body ([adt core_option_Option 0 1 [int 8]] block 1 let __result [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] call core_num_ToPrimitive_to_i8 0 1 [uint 64] 1 ([ref r_scope_14262 [uint 64]] addr_of ([uint 64] var n))) ([adt core_option_Option 0 1 [int 8]] var __result)) 
fn core_num_i16__FromPrimitive_from_int 0 0 args 1 n [int 32] return [adt core_option_Option 0 1 [int 16]] 1 core_num_FromPrimitive_from_int 0 1 [int 16] body ([adt core_option_Option 0 1 [int 16]] block 1 let __result [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] call core_num_ToPrimitive_to_i16 0 1 [int 32] 1 ([ref r_scope_14306 [int 32]] addr_of ([int 32] var n))) ([adt core_option_Option 0 1 [int 16]] var __result)) 
fn core_num_i16__FromPrimitive_from_i8 0 0 args 1 n [int 8] return [adt core_option_Option 0 1 [int 16]] 1 core_num_FromPrimitive_from_i8 0 1 [int 16] body ([adt core_option_Option 0 1 [int 16]] block 1 let __result [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] call core_num_ToPrimitive_to_i16 0 1 [int 8] 1 ([ref r_scope_14319 [int 8]] addr_of ([int 8] var n))) ([adt core_option_Option 0 1 [int 16]] var __result)) 
fn core_num_i16__FromPrimitive_from_i16 0 0 args 1 n [int 16] return [adt core_option_Option 0 1 [int 16]] 1 core_num_FromPrimitive_from_i16 0 1 [int 16] body ([adt core_option_Option 0 1 [int 16]] block 1 let __result [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] call core_num_ToPrimitive_to_i16 0 1 [int 16] 1 ([ref r_scope_14332 [int 16]] addr_of ([int 16] var n))) ([adt core_option_Option 0 1 [int 16]] var __result)) 
fn core_num_i16__FromPrimitive_from_i32 0 0 args 1 n [int 32] return [adt core_option_Option 0 1 [int 16]] 1 core_num_FromPrimitive_from_i32 0 1 [int 16] body ([adt core_option_Option 0 1 [int 16]] block 1 let __result [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] call core_num_ToPrimitive_to_i16 0 1 [int 32] 1 ([ref r_scope_14345 [int 32]] addr_of ([int 32] var n))) ([adt core_option_Option 0 1 [int 16]] var __result)) 
fn core_num_i16__FromPrimitive_from_i64 0 0 args 1 n [int 64] return [adt core_option_Option 0 1 [int 16]] 1 core_num_FromPrimitive_from_i64 0 1 [int 16] body ([adt core_option_Option 0 1 [int 16]] block 1 let __result [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] call core_num_ToPrimitive_to_i16 0 1 [int 64] 1 ([ref r_scope_14358 [int 64]] addr_of ([int 64] var n))) ([adt core_option_Option 0 1 [int 16]] var __result)) 
fn core_num_i16__FromPrimitive_from_uint 0 0 args 1 n [uint 32] return [adt core_option_Option 0 1 [int 16]] 1 core_num_FromPrimitive_from_uint 0 1 [int 16] body ([adt core_option_Option 0 1 [int 16]] block 1 let __result [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] call core_num_ToPrimitive_to_i16 0 1 [uint 32] 1 ([ref r_scope_14371 [uint 32]] addr_of ([uint 32] var n))) ([adt core_option_Option 0 1 [int 16]] var __result)) 
fn core_num_i16__FromPrimitive_from_u8 0 0 args 1 n [uint 8] return [adt core_option_Option 0 1 [int 16]] 1 core_num_FromPrimitive_from_u8 0 1 [int 16] body ([adt core_option_Option 0 1 [int 16]] block 1 let __result [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] call core_num_ToPrimitive_to_i16 0 1 [uint 8] 1 ([ref r_scope_14384 [uint 8]] addr_of ([uint 8] var n))) ([adt core_option_Option 0 1 [int 16]] var __result)) 
fn core_num_i16__FromPrimitive_from_u16 0 0 args 1 n [uint 16] return [adt core_option_Option 0 1 [int 16]] 1 core_num_FromPrimitive_from_u16 0 1 [int 16] body ([adt core_option_Option 0 1 [int 16]] block 1 let __result [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] call core_num_ToPrimitive_to_i16 0 1 [uint 16] 1 ([ref r_scope_14397 [uint 16]] addr_of ([uint 16] var n))) ([adt core_option_Option 0 1 [int 16]] var __result)) 
fn core_num_i16__FromPrimitive_from_u32 0 0 args 1 n [uint 32] return [adt core_option_Option 0 1 [int 16]] 1 core_num_FromPrimitive_from_u32 0 1 [int 16] body ([adt core_option_Option 0 1 [int 16]] block 1 let __result [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] call core_num_ToPrimitive_to_i16 0 1 [uint 32] 1 ([ref r_scope_14410 [uint 32]] addr_of ([uint 32] var n))) ([adt core_option_Option 0 1 [int 16]] var __result)) 
fn core_num_i16__FromPrimitive_from_u64 0 0 args 1 n [uint 64] return [adt core_option_Option 0 1 [int 16]] 1 core_num_FromPrimitive_from_u64 0 1 [int 16] body ([adt core_option_Option 0 1 [int 16]] block 1 let __result [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] call core_num_ToPrimitive_to_i16 0 1 [uint 64] 1 ([ref r_scope_14423 [uint 64]] addr_of ([uint 64] var n))) ([adt core_option_Option 0 1 [int 16]] var __result)) 
fn core_num_i32__FromPrimitive_from_int 0 0 args 1 n [int 32] return [adt core_option_Option 0 1 [int 32]] 1 core_num_FromPrimitive_from_int 0 1 [int 32] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] call core_num_ToPrimitive_to_i32 0 1 [int 32] 1 ([ref r_scope_14467 [int 32]] addr_of ([int 32] var n))) ([adt core_option_Option 0 1 [int 32]] var __result)) 
fn core_num_i32__FromPrimitive_from_i8 0 0 args 1 n [int 8] return [adt core_option_Option 0 1 [int 32]] 1 core_num_FromPrimitive_from_i8 0 1 [int 32] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] call core_num_ToPrimitive_to_i32 0 1 [int 8] 1 ([ref r_scope_14480 [int 8]] addr_of ([int 8] var n))) ([adt core_option_Option 0 1 [int 32]] var __result)) 
fn core_num_i32__FromPrimitive_from_i16 0 0 args 1 n [int 16] return [adt core_option_Option 0 1 [int 32]] 1 core_num_FromPrimitive_from_i16 0 1 [int 32] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] call core_num_ToPrimitive_to_i32 0 1 [int 16] 1 ([ref r_scope_14493 [int 16]] addr_of ([int 16] var n))) ([adt core_option_Option 0 1 [int 32]] var __result)) 
fn core_num_i32__FromPrimitive_from_i32 0 0 args 1 n [int 32] return [adt core_option_Option 0 1 [int 32]] 1 core_num_FromPrimitive_from_i32 0 1 [int 32] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] call core_num_ToPrimitive_to_i32 0 1 [int 32] 1 ([ref r_scope_14506 [int 32]] addr_of ([int 32] var n))) ([adt core_option_Option 0 1 [int 32]] var __result)) 
fn core_num_i32__FromPrimitive_from_i64 0 0 args 1 n [int 64] return [adt core_option_Option 0 1 [int 32]] 1 core_num_FromPrimitive_from_i64 0 1 [int 32] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] call core_num_ToPrimitive_to_i32 0 1 [int 64] 1 ([ref r_scope_14519 [int 64]] addr_of ([int 64] var n))) ([adt core_option_Option 0 1 [int 32]] var __result)) 
fn core_num_i32__FromPrimitive_from_uint 0 0 args 1 n [uint 32] return [adt core_option_Option 0 1 [int 32]] 1 core_num_FromPrimitive_from_uint 0 1 [int 32] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] call core_num_ToPrimitive_to_i32 0 1 [uint 32] 1 ([ref r_scope_14532 [uint 32]] addr_of ([uint 32] var n))) ([adt core_option_Option 0 1 [int 32]] var __result)) 
fn core_num_i32__FromPrimitive_from_u8 0 0 args 1 n [uint 8] return [adt core_option_Option 0 1 [int 32]] 1 core_num_FromPrimitive_from_u8 0 1 [int 32] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] call core_num_ToPrimitive_to_i32 0 1 [uint 8] 1 ([ref r_scope_14545 [uint 8]] addr_of ([uint 8] var n))) ([adt core_option_Option 0 1 [int 32]] var __result)) 
fn core_num_i32__FromPrimitive_from_u16 0 0 args 1 n [uint 16] return [adt core_option_Option 0 1 [int 32]] 1 core_num_FromPrimitive_from_u16 0 1 [int 32] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] call core_num_ToPrimitive_to_i32 0 1 [uint 16] 1 ([ref r_scope_14558 [uint 16]] addr_of ([uint 16] var n))) ([adt core_option_Option 0 1 [int 32]] var __result)) 
fn core_num_i32__FromPrimitive_from_u32 0 0 args 1 n [uint 32] return [adt core_option_Option 0 1 [int 32]] 1 core_num_FromPrimitive_from_u32 0 1 [int 32] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] call core_num_ToPrimitive_to_i32 0 1 [uint 32] 1 ([ref r_scope_14571 [uint 32]] addr_of ([uint 32] var n))) ([adt core_option_Option 0 1 [int 32]] var __result)) 
fn core_num_i32__FromPrimitive_from_u64 0 0 args 1 n [uint 64] return [adt core_option_Option 0 1 [int 32]] 1 core_num_FromPrimitive_from_u64 0 1 [int 32] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] call core_num_ToPrimitive_to_i32 0 1 [uint 64] 1 ([ref r_scope_14584 [uint 64]] addr_of ([uint 64] var n))) ([adt core_option_Option 0 1 [int 32]] var __result)) 
fn core_num_i64__FromPrimitive_from_int 0 0 args 1 n [int 32] return [adt core_option_Option 0 1 [int 64]] 1 core_num_FromPrimitive_from_int 0 1 [int 64] body ([adt core_option_Option 0 1 [int 64]] block 1 let __result [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] call core_num_ToPrimitive_to_i64 0 1 [int 32] 1 ([ref r_scope_14628 [int 32]] addr_of ([int 32] var n))) ([adt core_option_Option 0 1 [int 64]] var __result)) 
fn core_num_i64__FromPrimitive_from_i8 0 0 args 1 n [int 8] return [adt core_option_Option 0 1 [int 64]] 1 core_num_FromPrimitive_from_i8 0 1 [int 64] body ([adt core_option_Option 0 1 [int 64]] block 1 let __result [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] call core_num_ToPrimitive_to_i64 0 1 [int 8] 1 ([ref r_scope_14641 [int 8]] addr_of ([int 8] var n))) ([adt core_option_Option 0 1 [int 64]] var __result)) 
fn core_num_i64__FromPrimitive_from_i16 0 0 args 1 n [int 16] return [adt core_option_Option 0 1 [int 64]] 1 core_num_FromPrimitive_from_i16 0 1 [int 64] body ([adt core_option_Option 0 1 [int 64]] block 1 let __result [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] call core_num_ToPrimitive_to_i64 0 1 [int 16] 1 ([ref r_scope_14654 [int 16]] addr_of ([int 16] var n))) ([adt core_option_Option 0 1 [int 64]] var __result)) 
fn core_num_i64__FromPrimitive_from_i32 0 0 args 1 n [int 32] return [adt core_option_Option 0 1 [int 64]] 1 core_num_FromPrimitive_from_i32 0 1 [int 64] body ([adt core_option_Option 0 1 [int 64]] block 1 let __result [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] call core_num_ToPrimitive_to_i64 0 1 [int 32] 1 ([ref r_scope_14667 [int 32]] addr_of ([int 32] var n))) ([adt core_option_Option 0 1 [int 64]] var __result)) 
fn core_num_i64__FromPrimitive_from_i64 0 0 args 1 n [int 64] return [adt core_option_Option 0 1 [int 64]] 1 core_num_FromPrimitive_from_i64 0 1 [int 64] body ([adt core_option_Option 0 1 [int 64]] block 1 let __result [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] call core_num_ToPrimitive_to_i64 0 1 [int 64] 1 ([ref r_scope_14680 [int 64]] addr_of ([int 64] var n))) ([adt core_option_Option 0 1 [int 64]] var __result)) 
fn core_num_i64__FromPrimitive_from_uint 0 0 args 1 n [uint 32] return [adt core_option_Option 0 1 [int 64]] 1 core_num_FromPrimitive_from_uint 0 1 [int 64] body ([adt core_option_Option 0 1 [int 64]] block 1 let __result [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] call core_num_ToPrimitive_to_i64 0 1 [uint 32] 1 ([ref r_scope_14693 [uint 32]] addr_of ([uint 32] var n))) ([adt core_option_Option 0 1 [int 64]] var __result)) 
fn core_num_i64__FromPrimitive_from_u8 0 0 args 1 n [uint 8] return [adt core_option_Option 0 1 [int 64]] 1 core_num_FromPrimitive_from_u8 0 1 [int 64] body ([adt core_option_Option 0 1 [int 64]] block 1 let __result [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] call core_num_ToPrimitive_to_i64 0 1 [uint 8] 1 ([ref r_scope_14706 [uint 8]] addr_of ([uint 8] var n))) ([adt core_option_Option 0 1 [int 64]] var __result)) 
fn core_num_i64__FromPrimitive_from_u16 0 0 args 1 n [uint 16] return [adt core_option_Option 0 1 [int 64]] 1 core_num_FromPrimitive_from_u16 0 1 [int 64] body ([adt core_option_Option 0 1 [int 64]] block 1 let __result [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] call core_num_ToPrimitive_to_i64 0 1 [uint 16] 1 ([ref r_scope_14719 [uint 16]] addr_of ([uint 16] var n))) ([adt core_option_Option 0 1 [int 64]] var __result)) 
fn core_num_i64__FromPrimitive_from_u32 0 0 args 1 n [uint 32] return [adt core_option_Option 0 1 [int 64]] 1 core_num_FromPrimitive_from_u32 0 1 [int 64] body ([adt core_option_Option 0 1 [int 64]] block 1 let __result [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] call core_num_ToPrimitive_to_i64 0 1 [uint 32] 1 ([ref r_scope_14732 [uint 32]] addr_of ([uint 32] var n))) ([adt core_option_Option 0 1 [int 64]] var __result)) 
fn core_num_i64__FromPrimitive_from_u64 0 0 args 1 n [uint 64] return [adt core_option_Option 0 1 [int 64]] 1 core_num_FromPrimitive_from_u64 0 1 [int 64] body ([adt core_option_Option 0 1 [int 64]] block 1 let __result [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] call core_num_ToPrimitive_to_i64 0 1 [uint 64] 1 ([ref r_scope_14745 [uint 64]] addr_of ([uint 64] var n))) ([adt core_option_Option 0 1 [int 64]] var __result)) 
fn core_num_uint__FromPrimitive_from_int 0 0 args 1 n [int 32] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_FromPrimitive_from_int 0 1 [uint 32] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] call core_num_ToPrimitive_to_uint 0 1 [int 32] 1 ([ref r_scope_14789 [int 32]] addr_of ([int 32] var n))) ([adt core_option_Option 0 1 [uint 32]] var __result)) 
fn core_num_uint__FromPrimitive_from_i8 0 0 args 1 n [int 8] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_FromPrimitive_from_i8 0 1 [uint 32] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] call core_num_ToPrimitive_to_uint 0 1 [int 8] 1 ([ref r_scope_14802 [int 8]] addr_of ([int 8] var n))) ([adt core_option_Option 0 1 [uint 32]] var __result)) 
fn core_num_uint__FromPrimitive_from_i16 0 0 args 1 n [int 16] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_FromPrimitive_from_i16 0 1 [uint 32] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] call core_num_ToPrimitive_to_uint 0 1 [int 16] 1 ([ref r_scope_14815 [int 16]] addr_of ([int 16] var n))) ([adt core_option_Option 0 1 [uint 32]] var __result)) 
fn core_num_uint__FromPrimitive_from_i32 0 0 args 1 n [int 32] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_FromPrimitive_from_i32 0 1 [uint 32] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] call core_num_ToPrimitive_to_uint 0 1 [int 32] 1 ([ref r_scope_14828 [int 32]] addr_of ([int 32] var n))) ([adt core_option_Option 0 1 [uint 32]] var __result)) 
fn core_num_uint__FromPrimitive_from_i64 0 0 args 1 n [int 64] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_FromPrimitive_from_i64 0 1 [uint 32] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] call core_num_ToPrimitive_to_uint 0 1 [int 64] 1 ([ref r_scope_14841 [int 64]] addr_of ([int 64] var n))) ([adt core_option_Option 0 1 [uint 32]] var __result)) 
fn core_num_uint__FromPrimitive_from_uint 0 0 args 1 n [uint 32] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_FromPrimitive_from_uint 0 1 [uint 32] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] call core_num_ToPrimitive_to_uint 0 1 [uint 32] 1 ([ref r_scope_14854 [uint 32]] addr_of ([uint 32] var n))) ([adt core_option_Option 0 1 [uint 32]] var __result)) 
fn core_num_uint__FromPrimitive_from_u8 0 0 args 1 n [uint 8] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_FromPrimitive_from_u8 0 1 [uint 32] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] call core_num_ToPrimitive_to_uint 0 1 [uint 8] 1 ([ref r_scope_14867 [uint 8]] addr_of ([uint 8] var n))) ([adt core_option_Option 0 1 [uint 32]] var __result)) 
fn core_num_uint__FromPrimitive_from_u16 0 0 args 1 n [uint 16] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_FromPrimitive_from_u16 0 1 [uint 32] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] call core_num_ToPrimitive_to_uint 0 1 [uint 16] 1 ([ref r_scope_14880 [uint 16]] addr_of ([uint 16] var n))) ([adt core_option_Option 0 1 [uint 32]] var __result)) 
fn core_num_uint__FromPrimitive_from_u32 0 0 args 1 n [uint 32] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_FromPrimitive_from_u32 0 1 [uint 32] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] call core_num_ToPrimitive_to_uint 0 1 [uint 32] 1 ([ref r_scope_14893 [uint 32]] addr_of ([uint 32] var n))) ([adt core_option_Option 0 1 [uint 32]] var __result)) 
fn core_num_uint__FromPrimitive_from_u64 0 0 args 1 n [uint 64] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_FromPrimitive_from_u64 0 1 [uint 32] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] call core_num_ToPrimitive_to_uint 0 1 [uint 64] 1 ([ref r_scope_14906 [uint 64]] addr_of ([uint 64] var n))) ([adt core_option_Option 0 1 [uint 32]] var __result)) 
fn core_num_u8__FromPrimitive_from_int 0 0 args 1 n [int 32] return [adt core_option_Option 0 1 [uint 8]] 1 core_num_FromPrimitive_from_int 0 1 [uint 8] body ([adt core_option_Option 0 1 [uint 8]] block 1 let __result [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] call core_num_ToPrimitive_to_u8 0 1 [int 32] 1 ([ref r_scope_14950 [int 32]] addr_of ([int 32] var n))) ([adt core_option_Option 0 1 [uint 8]] var __result)) 
fn core_num_u8__FromPrimitive_from_i8 0 0 args 1 n [int 8] return [adt core_option_Option 0 1 [uint 8]] 1 core_num_FromPrimitive_from_i8 0 1 [uint 8] body ([adt core_option_Option 0 1 [uint 8]] block 1 let __result [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] call core_num_ToPrimitive_to_u8 0 1 [int 8] 1 ([ref r_scope_14963 [int 8]] addr_of ([int 8] var n))) ([adt core_option_Option 0 1 [uint 8]] var __result)) 
fn core_num_u8__FromPrimitive_from_i16 0 0 args 1 n [int 16] return [adt core_option_Option 0 1 [uint 8]] 1 core_num_FromPrimitive_from_i16 0 1 [uint 8] body ([adt core_option_Option 0 1 [uint 8]] block 1 let __result [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] call core_num_ToPrimitive_to_u8 0 1 [int 16] 1 ([ref r_scope_14976 [int 16]] addr_of ([int 16] var n))) ([adt core_option_Option 0 1 [uint 8]] var __result)) 
fn core_num_u8__FromPrimitive_from_i32 0 0 args 1 n [int 32] return [adt core_option_Option 0 1 [uint 8]] 1 core_num_FromPrimitive_from_i32 0 1 [uint 8] body ([adt core_option_Option 0 1 [uint 8]] block 1 let __result [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] call core_num_ToPrimitive_to_u8 0 1 [int 32] 1 ([ref r_scope_14989 [int 32]] addr_of ([int 32] var n))) ([adt core_option_Option 0 1 [uint 8]] var __result)) 
fn core_num_u8__FromPrimitive_from_i64 0 0 args 1 n [int 64] return [adt core_option_Option 0 1 [uint 8]] 1 core_num_FromPrimitive_from_i64 0 1 [uint 8] body ([adt core_option_Option 0 1 [uint 8]] block 1 let __result [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] call core_num_ToPrimitive_to_u8 0 1 [int 64] 1 ([ref r_scope_15002 [int 64]] addr_of ([int 64] var n))) ([adt core_option_Option 0 1 [uint 8]] var __result)) 
fn core_num_u8__FromPrimitive_from_uint 0 0 args 1 n [uint 32] return [adt core_option_Option 0 1 [uint 8]] 1 core_num_FromPrimitive_from_uint 0 1 [uint 8] body ([adt core_option_Option 0 1 [uint 8]] block 1 let __result [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] call core_num_ToPrimitive_to_u8 0 1 [uint 32] 1 ([ref r_scope_15015 [uint 32]] addr_of ([uint 32] var n))) ([adt core_option_Option 0 1 [uint 8]] var __result)) 
fn core_num_u8__FromPrimitive_from_u8 0 0 args 1 n [uint 8] return [adt core_option_Option 0 1 [uint 8]] 1 core_num_FromPrimitive_from_u8 0 1 [uint 8] body ([adt core_option_Option 0 1 [uint 8]] block 1 let __result [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] call core_num_ToPrimitive_to_u8 0 1 [uint 8] 1 ([ref r_scope_15028 [uint 8]] addr_of ([uint 8] var n))) ([adt core_option_Option 0 1 [uint 8]] var __result)) 
fn core_num_u8__FromPrimitive_from_u16 0 0 args 1 n [uint 16] return [adt core_option_Option 0 1 [uint 8]] 1 core_num_FromPrimitive_from_u16 0 1 [uint 8] body ([adt core_option_Option 0 1 [uint 8]] block 1 let __result [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] call core_num_ToPrimitive_to_u8 0 1 [uint 16] 1 ([ref r_scope_15041 [uint 16]] addr_of ([uint 16] var n))) ([adt core_option_Option 0 1 [uint 8]] var __result)) 
fn core_num_u8__FromPrimitive_from_u32 0 0 args 1 n [uint 32] return [adt core_option_Option 0 1 [uint 8]] 1 core_num_FromPrimitive_from_u32 0 1 [uint 8] body ([adt core_option_Option 0 1 [uint 8]] block 1 let __result [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] call core_num_ToPrimitive_to_u8 0 1 [uint 32] 1 ([ref r_scope_15054 [uint 32]] addr_of ([uint 32] var n))) ([adt core_option_Option 0 1 [uint 8]] var __result)) 
fn core_num_u8__FromPrimitive_from_u64 0 0 args 1 n [uint 64] return [adt core_option_Option 0 1 [uint 8]] 1 core_num_FromPrimitive_from_u64 0 1 [uint 8] body ([adt core_option_Option 0 1 [uint 8]] block 1 let __result [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] call core_num_ToPrimitive_to_u8 0 1 [uint 64] 1 ([ref r_scope_15067 [uint 64]] addr_of ([uint 64] var n))) ([adt core_option_Option 0 1 [uint 8]] var __result)) 
fn core_num_u16__FromPrimitive_from_int 0 0 args 1 n [int 32] return [adt core_option_Option 0 1 [uint 16]] 1 core_num_FromPrimitive_from_int 0 1 [uint 16] body ([adt core_option_Option 0 1 [uint 16]] block 1 let __result [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] call core_num_ToPrimitive_to_u16 0 1 [int 32] 1 ([ref r_scope_15111 [int 32]] addr_of ([int 32] var n))) ([adt core_option_Option 0 1 [uint 16]] var __result)) 
fn core_num_u16__FromPrimitive_from_i8 0 0 args 1 n [int 8] return [adt core_option_Option 0 1 [uint 16]] 1 core_num_FromPrimitive_from_i8 0 1 [uint 16] body ([adt core_option_Option 0 1 [uint 16]] block 1 let __result [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] call core_num_ToPrimitive_to_u16 0 1 [int 8] 1 ([ref r_scope_15124 [int 8]] addr_of ([int 8] var n))) ([adt core_option_Option 0 1 [uint 16]] var __result)) 
fn core_num_u16__FromPrimitive_from_i16 0 0 args 1 n [int 16] return [adt core_option_Option 0 1 [uint 16]] 1 core_num_FromPrimitive_from_i16 0 1 [uint 16] body ([adt core_option_Option 0 1 [uint 16]] block 1 let __result [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] call core_num_ToPrimitive_to_u16 0 1 [int 16] 1 ([ref r_scope_15137 [int 16]] addr_of ([int 16] var n))) ([adt core_option_Option 0 1 [uint 16]] var __result)) 
fn core_num_u16__FromPrimitive_from_i32 0 0 args 1 n [int 32] return [adt core_option_Option 0 1 [uint 16]] 1 core_num_FromPrimitive_from_i32 0 1 [uint 16] body ([adt core_option_Option 0 1 [uint 16]] block 1 let __result [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] call core_num_ToPrimitive_to_u16 0 1 [int 32] 1 ([ref r_scope_15150 [int 32]] addr_of ([int 32] var n))) ([adt core_option_Option 0 1 [uint 16]] var __result)) 
fn core_num_u16__FromPrimitive_from_i64 0 0 args 1 n [int 64] return [adt core_option_Option 0 1 [uint 16]] 1 core_num_FromPrimitive_from_i64 0 1 [uint 16] body ([adt core_option_Option 0 1 [uint 16]] block 1 let __result [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] call core_num_ToPrimitive_to_u16 0 1 [int 64] 1 ([ref r_scope_15163 [int 64]] addr_of ([int 64] var n))) ([adt core_option_Option 0 1 [uint 16]] var __result)) 
fn core_num_u16__FromPrimitive_from_uint 0 0 args 1 n [uint 32] return [adt core_option_Option 0 1 [uint 16]] 1 core_num_FromPrimitive_from_uint 0 1 [uint 16] body ([adt core_option_Option 0 1 [uint 16]] block 1 let __result [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] call core_num_ToPrimitive_to_u16 0 1 [uint 32] 1 ([ref r_scope_15176 [uint 32]] addr_of ([uint 32] var n))) ([adt core_option_Option 0 1 [uint 16]] var __result)) 
fn core_num_u16__FromPrimitive_from_u8 0 0 args 1 n [uint 8] return [adt core_option_Option 0 1 [uint 16]] 1 core_num_FromPrimitive_from_u8 0 1 [uint 16] body ([adt core_option_Option 0 1 [uint 16]] block 1 let __result [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] call core_num_ToPrimitive_to_u16 0 1 [uint 8] 1 ([ref r_scope_15189 [uint 8]] addr_of ([uint 8] var n))) ([adt core_option_Option 0 1 [uint 16]] var __result)) 
fn core_num_u16__FromPrimitive_from_u16 0 0 args 1 n [uint 16] return [adt core_option_Option 0 1 [uint 16]] 1 core_num_FromPrimitive_from_u16 0 1 [uint 16] body ([adt core_option_Option 0 1 [uint 16]] block 1 let __result [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] call core_num_ToPrimitive_to_u16 0 1 [uint 16] 1 ([ref r_scope_15202 [uint 16]] addr_of ([uint 16] var n))) ([adt core_option_Option 0 1 [uint 16]] var __result)) 
fn core_num_u16__FromPrimitive_from_u32 0 0 args 1 n [uint 32] return [adt core_option_Option 0 1 [uint 16]] 1 core_num_FromPrimitive_from_u32 0 1 [uint 16] body ([adt core_option_Option 0 1 [uint 16]] block 1 let __result [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] call core_num_ToPrimitive_to_u16 0 1 [uint 32] 1 ([ref r_scope_15215 [uint 32]] addr_of ([uint 32] var n))) ([adt core_option_Option 0 1 [uint 16]] var __result)) 
fn core_num_u16__FromPrimitive_from_u64 0 0 args 1 n [uint 64] return [adt core_option_Option 0 1 [uint 16]] 1 core_num_FromPrimitive_from_u64 0 1 [uint 16] body ([adt core_option_Option 0 1 [uint 16]] block 1 let __result [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] call core_num_ToPrimitive_to_u16 0 1 [uint 64] 1 ([ref r_scope_15228 [uint 64]] addr_of ([uint 64] var n))) ([adt core_option_Option 0 1 [uint 16]] var __result)) 
fn core_num_u32__FromPrimitive_from_int 0 0 args 1 n [int 32] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_FromPrimitive_from_int 0 1 [uint 32] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] call core_num_ToPrimitive_to_u32 0 1 [int 32] 1 ([ref r_scope_15272 [int 32]] addr_of ([int 32] var n))) ([adt core_option_Option 0 1 [uint 32]] var __result)) 
fn core_num_u32__FromPrimitive_from_i8 0 0 args 1 n [int 8] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_FromPrimitive_from_i8 0 1 [uint 32] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] call core_num_ToPrimitive_to_u32 0 1 [int 8] 1 ([ref r_scope_15285 [int 8]] addr_of ([int 8] var n))) ([adt core_option_Option 0 1 [uint 32]] var __result)) 
fn core_num_u32__FromPrimitive_from_i16 0 0 args 1 n [int 16] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_FromPrimitive_from_i16 0 1 [uint 32] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] call core_num_ToPrimitive_to_u32 0 1 [int 16] 1 ([ref r_scope_15298 [int 16]] addr_of ([int 16] var n))) ([adt core_option_Option 0 1 [uint 32]] var __result)) 
fn core_num_u32__FromPrimitive_from_i32 0 0 args 1 n [int 32] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_FromPrimitive_from_i32 0 1 [uint 32] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] call core_num_ToPrimitive_to_u32 0 1 [int 32] 1 ([ref r_scope_15311 [int 32]] addr_of ([int 32] var n))) ([adt core_option_Option 0 1 [uint 32]] var __result)) 
fn core_num_u32__FromPrimitive_from_i64 0 0 args 1 n [int 64] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_FromPrimitive_from_i64 0 1 [uint 32] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] call core_num_ToPrimitive_to_u32 0 1 [int 64] 1 ([ref r_scope_15324 [int 64]] addr_of ([int 64] var n))) ([adt core_option_Option 0 1 [uint 32]] var __result)) 
fn core_num_u32__FromPrimitive_from_uint 0 0 args 1 n [uint 32] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_FromPrimitive_from_uint 0 1 [uint 32] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] call core_num_ToPrimitive_to_u32 0 1 [uint 32] 1 ([ref r_scope_15337 [uint 32]] addr_of ([uint 32] var n))) ([adt core_option_Option 0 1 [uint 32]] var __result)) 
fn core_num_u32__FromPrimitive_from_u8 0 0 args 1 n [uint 8] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_FromPrimitive_from_u8 0 1 [uint 32] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] call core_num_ToPrimitive_to_u32 0 1 [uint 8] 1 ([ref r_scope_15350 [uint 8]] addr_of ([uint 8] var n))) ([adt core_option_Option 0 1 [uint 32]] var __result)) 
fn core_num_u32__FromPrimitive_from_u16 0 0 args 1 n [uint 16] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_FromPrimitive_from_u16 0 1 [uint 32] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] call core_num_ToPrimitive_to_u32 0 1 [uint 16] 1 ([ref r_scope_15363 [uint 16]] addr_of ([uint 16] var n))) ([adt core_option_Option 0 1 [uint 32]] var __result)) 
fn core_num_u32__FromPrimitive_from_u32 0 0 args 1 n [uint 32] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_FromPrimitive_from_u32 0 1 [uint 32] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] call core_num_ToPrimitive_to_u32 0 1 [uint 32] 1 ([ref r_scope_15376 [uint 32]] addr_of ([uint 32] var n))) ([adt core_option_Option 0 1 [uint 32]] var __result)) 
fn core_num_u32__FromPrimitive_from_u64 0 0 args 1 n [uint 64] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_FromPrimitive_from_u64 0 1 [uint 32] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] call core_num_ToPrimitive_to_u32 0 1 [uint 64] 1 ([ref r_scope_15389 [uint 64]] addr_of ([uint 64] var n))) ([adt core_option_Option 0 1 [uint 32]] var __result)) 
fn core_num_u64__FromPrimitive_from_int 0 0 args 1 n [int 32] return [adt core_option_Option 0 1 [uint 64]] 1 core_num_FromPrimitive_from_int 0 1 [uint 64] body ([adt core_option_Option 0 1 [uint 64]] block 1 let __result [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] call core_num_ToPrimitive_to_u64 0 1 [int 32] 1 ([ref r_scope_15433 [int 32]] addr_of ([int 32] var n))) ([adt core_option_Option 0 1 [uint 64]] var __result)) 
fn core_num_u64__FromPrimitive_from_i8 0 0 args 1 n [int 8] return [adt core_option_Option 0 1 [uint 64]] 1 core_num_FromPrimitive_from_i8 0 1 [uint 64] body ([adt core_option_Option 0 1 [uint 64]] block 1 let __result [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] call core_num_ToPrimitive_to_u64 0 1 [int 8] 1 ([ref r_scope_15446 [int 8]] addr_of ([int 8] var n))) ([adt core_option_Option 0 1 [uint 64]] var __result)) 
fn core_num_u64__FromPrimitive_from_i16 0 0 args 1 n [int 16] return [adt core_option_Option 0 1 [uint 64]] 1 core_num_FromPrimitive_from_i16 0 1 [uint 64] body ([adt core_option_Option 0 1 [uint 64]] block 1 let __result [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] call core_num_ToPrimitive_to_u64 0 1 [int 16] 1 ([ref r_scope_15459 [int 16]] addr_of ([int 16] var n))) ([adt core_option_Option 0 1 [uint 64]] var __result)) 
fn core_num_u64__FromPrimitive_from_i32 0 0 args 1 n [int 32] return [adt core_option_Option 0 1 [uint 64]] 1 core_num_FromPrimitive_from_i32 0 1 [uint 64] body ([adt core_option_Option 0 1 [uint 64]] block 1 let __result [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] call core_num_ToPrimitive_to_u64 0 1 [int 32] 1 ([ref r_scope_15472 [int 32]] addr_of ([int 32] var n))) ([adt core_option_Option 0 1 [uint 64]] var __result)) 
fn core_num_u64__FromPrimitive_from_i64 0 0 args 1 n [int 64] return [adt core_option_Option 0 1 [uint 64]] 1 core_num_FromPrimitive_from_i64 0 1 [uint 64] body ([adt core_option_Option 0 1 [uint 64]] block 1 let __result [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] call core_num_ToPrimitive_to_u64 0 1 [int 64] 1 ([ref r_scope_15485 [int 64]] addr_of ([int 64] var n))) ([adt core_option_Option 0 1 [uint 64]] var __result)) 
fn core_num_u64__FromPrimitive_from_uint 0 0 args 1 n [uint 32] return [adt core_option_Option 0 1 [uint 64]] 1 core_num_FromPrimitive_from_uint 0 1 [uint 64] body ([adt core_option_Option 0 1 [uint 64]] block 1 let __result [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] call core_num_ToPrimitive_to_u64 0 1 [uint 32] 1 ([ref r_scope_15498 [uint 32]] addr_of ([uint 32] var n))) ([adt core_option_Option 0 1 [uint 64]] var __result)) 
fn core_num_u64__FromPrimitive_from_u8 0 0 args 1 n [uint 8] return [adt core_option_Option 0 1 [uint 64]] 1 core_num_FromPrimitive_from_u8 0 1 [uint 64] body ([adt core_option_Option 0 1 [uint 64]] block 1 let __result [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] call core_num_ToPrimitive_to_u64 0 1 [uint 8] 1 ([ref r_scope_15511 [uint 8]] addr_of ([uint 8] var n))) ([adt core_option_Option 0 1 [uint 64]] var __result)) 
fn core_num_u64__FromPrimitive_from_u16 0 0 args 1 n [uint 16] return [adt core_option_Option 0 1 [uint 64]] 1 core_num_FromPrimitive_from_u16 0 1 [uint 64] body ([adt core_option_Option 0 1 [uint 64]] block 1 let __result [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] call core_num_ToPrimitive_to_u64 0 1 [uint 16] 1 ([ref r_scope_15524 [uint 16]] addr_of ([uint 16] var n))) ([adt core_option_Option 0 1 [uint 64]] var __result)) 
fn core_num_u64__FromPrimitive_from_u32 0 0 args 1 n [uint 32] return [adt core_option_Option 0 1 [uint 64]] 1 core_num_FromPrimitive_from_u32 0 1 [uint 64] body ([adt core_option_Option 0 1 [uint 64]] block 1 let __result [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] call core_num_ToPrimitive_to_u64 0 1 [uint 32] 1 ([ref r_scope_15537 [uint 32]] addr_of ([uint 32] var n))) ([adt core_option_Option 0 1 [uint 64]] var __result)) 
fn core_num_u64__FromPrimitive_from_u64 0 0 args 1 n [uint 64] return [adt core_option_Option 0 1 [uint 64]] 1 core_num_FromPrimitive_from_u64 0 1 [uint 64] body ([adt core_option_Option 0 1 [uint 64]] block 1 let __result [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] call core_num_ToPrimitive_to_u64 0 1 [uint 64] 1 ([ref r_scope_15550 [uint 64]] addr_of ([uint 64] var n))) ([adt core_option_Option 0 1 [uint 64]] var __result)) 
fn core_num_cast 0 2 f_0 f_1 args 1 n [var f_0] return [adt core_option_Option 0 1 [var f_1]] 0 body ([adt core_option_Option 0 1 [var f_1]] block 1 let __result [adt core_option_Option 0 1 [var f_1]] ([adt core_option_Option 0 1 [var f_1]] call core_num_NumCast_from 0 2 [var f_1] [var f_0] 1 ([var f_0] var n)) ([adt core_option_Option 0 1 [var f_1]] var __result)) 
fn core_num_u8__NumCast_from 0 1 f_0 args 1 n [var f_0] return [adt core_option_Option 0 1 [uint 8]] 1 core_num_NumCast_from 0 1 [uint 8] body ([adt core_option_Option 0 1 [uint 8]] block 1 let __result [adt core_option_Option 0 1 [uint 8]] ([adt core_option_Option 0 1 [uint 8]] call core_num_ToPrimitive_to_u8 0 1 [var f_0] 1 ([ref r_scope_15951 [var f_0]] addr_of ([var f_0] var n))) ([adt core_option_Option 0 1 [uint 8]] var __result)) 
fn core_num_u16__NumCast_from 0 1 f_0 args 1 n [var f_0] return [adt core_option_Option 0 1 [uint 16]] 1 core_num_NumCast_from 0 1 [uint 16] body ([adt core_option_Option 0 1 [uint 16]] block 1 let __result [adt core_option_Option 0 1 [uint 16]] ([adt core_option_Option 0 1 [uint 16]] call core_num_ToPrimitive_to_u16 0 1 [var f_0] 1 ([ref r_scope_15971 [var f_0]] addr_of ([var f_0] var n))) ([adt core_option_Option 0 1 [uint 16]] var __result)) 
fn core_num_u32__NumCast_from 0 1 f_0 args 1 n [var f_0] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_NumCast_from 0 1 [uint 32] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] call core_num_ToPrimitive_to_u32 0 1 [var f_0] 1 ([ref r_scope_15991 [var f_0]] addr_of ([var f_0] var n))) ([adt core_option_Option 0 1 [uint 32]] var __result)) 
fn core_num_u64__NumCast_from 0 1 f_0 args 1 n [var f_0] return [adt core_option_Option 0 1 [uint 64]] 1 core_num_NumCast_from 0 1 [uint 64] body ([adt core_option_Option 0 1 [uint 64]] block 1 let __result [adt core_option_Option 0 1 [uint 64]] ([adt core_option_Option 0 1 [uint 64]] call core_num_ToPrimitive_to_u64 0 1 [var f_0] 1 ([ref r_scope_16011 [var f_0]] addr_of ([var f_0] var n))) ([adt core_option_Option 0 1 [uint 64]] var __result)) 
fn core_num_uint__NumCast_from 0 1 f_0 args 1 n [var f_0] return [adt core_option_Option 0 1 [uint 32]] 1 core_num_NumCast_from 0 1 [uint 32] body ([adt core_option_Option 0 1 [uint 32]] block 1 let __result [adt core_option_Option 0 1 [uint 32]] ([adt core_option_Option 0 1 [uint 32]] call core_num_ToPrimitive_to_uint 0 1 [var f_0] 1 ([ref r_scope_16031 [var f_0]] addr_of ([var f_0] var n))) ([adt core_option_Option 0 1 [uint 32]] var __result)) 
fn core_num_i8__NumCast_from 0 1 f_0 args 1 n [var f_0] return [adt core_option_Option 0 1 [int 8]] 1 core_num_NumCast_from 0 1 [int 8] body ([adt core_option_Option 0 1 [int 8]] block 1 let __result [adt core_option_Option 0 1 [int 8]] ([adt core_option_Option 0 1 [int 8]] call core_num_ToPrimitive_to_i8 0 1 [var f_0] 1 ([ref r_scope_16051 [var f_0]] addr_of ([var f_0] var n))) ([adt core_option_Option 0 1 [int 8]] var __result)) 
fn core_num_i16__NumCast_from 0 1 f_0 args 1 n [var f_0] return [adt core_option_Option 0 1 [int 16]] 1 core_num_NumCast_from 0 1 [int 16] body ([adt core_option_Option 0 1 [int 16]] block 1 let __result [adt core_option_Option 0 1 [int 16]] ([adt core_option_Option 0 1 [int 16]] call core_num_ToPrimitive_to_i16 0 1 [var f_0] 1 ([ref r_scope_16071 [var f_0]] addr_of ([var f_0] var n))) ([adt core_option_Option 0 1 [int 16]] var __result)) 
fn core_num_i32__NumCast_from 0 1 f_0 args 1 n [var f_0] return [adt core_option_Option 0 1 [int 32]] 1 core_num_NumCast_from 0 1 [int 32] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] call core_num_ToPrimitive_to_i32 0 1 [var f_0] 1 ([ref r_scope_16091 [var f_0]] addr_of ([var f_0] var n))) ([adt core_option_Option 0 1 [int 32]] var __result)) 
fn core_num_i64__NumCast_from 0 1 f_0 args 1 n [var f_0] return [adt core_option_Option 0 1 [int 64]] 1 core_num_NumCast_from 0 1 [int 64] body ([adt core_option_Option 0 1 [int 64]] block 1 let __result [adt core_option_Option 0 1 [int 64]] ([adt core_option_Option 0 1 [int 64]] call core_num_ToPrimitive_to_i64 0 1 [var f_0] 1 ([ref r_scope_16111 [var f_0]] addr_of ([var f_0] var n))) ([adt core_option_Option 0 1 [int 64]] var __result)) 
fn core_num_int__NumCast_from 0 1 f_0 args 1 n [var f_0] return [adt core_option_Option 0 1 [int 32]] 1 core_num_NumCast_from 0 1 [int 32] body ([adt core_option_Option 0 1 [int 32]] block 1 let __result [adt core_option_Option 0 1 [int 32]] ([adt core_option_Option 0 1 [int 32]] call core_num_ToPrimitive_to_int 0 1 [var f_0] 1 ([ref r_scope_16131 [var f_0]] addr_of ([var f_0] var n))) ([adt core_option_Option 0 1 [int 32]] var __result)) 
enum core_num_FpCategory 0 0 5 core_num_Nan 0 core_num_Infinite 0 core_num_Zero 0 core_num_Subnormal 0 core_num_Normal 0 0 
fn core_mem_size_of 0 1 f_0 args 0 return [uint 32] 0 body ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] unsafe 1 let __result [uint 32] ([uint 32] call core_intrinsics_size_of 0 1 [var f_0] 0) ([uint 32] var __result)) ([uint 32] var __result_0)) 
fn core_mem_size_of_val 0 1 f_0 args 1 _val [ref r_anon_0 [var f_0]] return [uint 32] 0 body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_mem_size_of 0 1 [var f_0] 0) ([uint 32] var __result)) 
fn core_mem_min_align_of 0 1 f_0 args 0 return [uint 32] 0 body ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] unsafe 1 let __result [uint 32] ([uint 32] call core_intrinsics_min_align_of 0 1 [var f_0] 0) ([uint 32] var __result)) ([uint 32] var __result_0)) 
fn core_mem_min_align_of_val 0 1 f_0 args 1 _val [ref r_anon_0 [var f_0]] return [uint 32] 0 body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_mem_min_align_of 0 1 [var f_0] 0) ([uint 32] var __result)) 
fn core_mem_align_of 0 1 f_0 args 0 return [uint 32] 0 body ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] unsafe 1 let __result [uint 32] ([uint 32] call core_intrinsics_pref_align_of 0 1 [var f_0] 0) ([uint 32] var __result)) ([uint 32] var __result_0)) 
fn core_mem_align_of_val 0 1 f_0 args 1 _val [ref r_anon_0 [var f_0]] return [uint 32] 0 body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_mem_align_of 0 1 [var f_0] 0) ([uint 32] var __result)) 
fn core_mem_zeroed 0 1 f_0 args 0 return [var f_0] 0 body ([var f_0] unsafe 1 let __result [var f_0] ([var f_0] call core_intrinsics_init 0 1 [var f_0] 0) ([var f_0] var __result)) 
fn core_mem_uninitialized 0 1 f_0 args 0 return [var f_0] 0 body ([var f_0] unsafe 1 let __result [var f_0] ([var f_0] call core_intrinsics_uninit 0 1 [var f_0] 0) ([var f_0] var __result)) 
fn core_mem_drop 0 1 f_0 args 1 _x [var f_0] return [unit] 0 body ([unit] block 1 let __result [unit] ([unit] simple_literal _ItemFn) ([unit] var __result)) 
fn core_mem_transmute_copy 0 2 f_0 f_1 args 1 src [ref r_anon_0 [var f_0]] return [var f_1] 0 body ([var f_1] unsafe 1 let __result [var f_1] ([var f_1] call core_ptr_read 0 1 [var f_1] 1 ([ptr [var f_1]] cast ([ptr [var f_0]] cast ([ref r_anon_0 [var f_0]] var src) [ptr [var f_0]]) [ptr [var f_1]])) ([var f_1] var __result)) 
fn core_mem_copy_lifetime 1 r_named_0_22964 2 f_0 f_1 args 2 _ptr [ref r_named_0_22964 [var f_0]] ptr [ref r_anon_0 [var f_1]] return [ref r_named_0_22964 [var f_1]] 0 body ([ref r_named_0_22964 [var f_1]] unsafe 1 let __result [ref r_named_0_22964 [var f_1]] ([ref r_named_0_22964 [var f_1]] call core_intrinsics_transmute 0 2 [ref r_scope_22968 [var f_1]] [ref r_named_0_22964 [var f_1]] 1 ([ref r_anon_0 [var f_1]] var ptr)) ([ref r_named_0_22964 [var f_1]] var __result)) 
fn core_mem_copy_mut_lifetime 1 r_named_0_22991 2 f_0 f_1 args 2 _ptr [ref_mut r_named_0_22991 [var f_0]] ptr [ref_mut r_anon_0 [var f_1]] return [ref_mut r_named_0_22991 [var f_1]] 0 body ([ref_mut r_named_0_22991 [var f_1]] unsafe 1 let __result [ref_mut r_named_0_22991 [var f_1]] ([ref_mut r_named_0_22991 [var f_1]] call core_intrinsics_transmute 0 2 [ref_mut r_scope_22995 [var f_1]] [ref_mut r_named_0_22991 [var f_1]] 1 ([ref_mut r_anon_0 [var f_1]] var ptr)) ([ref_mut r_named_0_22991 [var f_1]] var __result)) 
fn core_ptr_null 0 1 f_0 args 0 return [ptr [var f_0]] 0 body ([ptr [var f_0]] block 1 let __result [ptr [var f_0]] ([ptr [var f_0]] cast ([uint 32] simple_literal 0) [ptr [var f_0]]) ([ptr [var f_0]] var __result)) 
fn core_ptr_null_mut 0 1 f_0 args 0 return [ptr_mut [var f_0]] 0 body ([ptr_mut [var f_0]] block 1 let __result [ptr_mut [var f_0]] ([ptr_mut [var f_0]] cast ([uint 32] simple_literal 0) [ptr_mut [var f_0]]) ([ptr_mut [var f_0]] var __result)) 
fn core_ptr_zero_memory 0 1 f_0 args 2 dst [ptr_mut [var f_0]] count [uint 32] return [unit] 0 body ([unit] unsafe 2 expr ([unit] call core_intrinsics_set_memory 0 1 [var f_0] 3 ([ptr_mut [var f_0]] var dst) ([uint 8] simple_literal 0) ([uint 32] var count)) let __result [unit] ([unit] simple_literal _ItemFn) ([unit] var __result)) 
fn core_ptr_read 0 1 f_0 args 1 src [ptr [var f_0]] return [var f_0] 0 body ([var f_0] unsafe 3 let tmp [var f_0] ([var f_0] call core_mem_uninitialized 0 1 [var f_0] 0) expr ([unit] call core_intrinsics_copy_nonoverlapping_memory 0 1 [var f_0] 3 ([ptr_mut [var f_0]] addr_of ([var f_0] var tmp)) ([ptr [var f_0]] var src) ([uint 32] simple_literal 1)) let __result [var f_0] ([var f_0] var tmp) ([var f_0] var __result)) 
fn core_ptr_read_and_zero 0 1 f_0 args 1 dest [ptr_mut [var f_0]] return [var f_0] 0 body ([var f_0] unsafe 3 let tmp [var f_0] ([var f_0] call core_ptr_read 0 1 [var f_0] 1 ([ptr_mut [var f_0]] var dest)) expr ([unit] call core_ptr_zero_memory 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dest) ([uint 32] simple_literal 1)) let __result [var f_0] ([var f_0] var tmp) ([var f_0] var __result)) 
fn core_ptr_write 0 1 f_0 args 2 dst [ptr_mut [var f_0]] src [var f_0] return [unit] 0 body ([unit] unsafe 1 let __result [unit] ([unit] call core_intrinsics_move_val_init 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var src)) ([unit] var __result)) 
associated_type 0 1 t_0 core_ptr_PtrExt_Target 0 1 [ptr [var t_0]] [var t_0] 
fn core_ptr__x2aconst_x20T__PtrExt_is_null 0 1 t_0 args 1 self [ptr [var t_0]] return [bool] 1 core_ptr_PtrExt_is_null 0 1 [ptr [var t_0]] body ([bool] block 1 let __result [bool] ([bool] binop BiEq ([uint 32] cast ([ptr [var t_0]] var self) [uint 32]) ([uint 32] simple_literal 0)) ([bool] var __result)) 
fn core_ptr__x2aconst_x20T__PtrExt_offset 0 1 t_0 args 2 self [ptr [var t_0]] count [int 32] return [ptr [var t_0]] 1 core_ptr_PtrExt_offset 0 1 [ptr [var t_0]] body ([ptr [var t_0]] unsafe 1 let __result [ptr [var t_0]] ([ptr [var t_0]] call core_intrinsics_offset 0 1 [var t_0] 2 ([ptr [var t_0]] var self) ([int 32] var count)) ([ptr [var t_0]] var __result)) 
fn core_ptr__x2aconst_x20T__PtrExt_as_ref 1 r_named_0_23938 1 t_0 args 1 self [ref r_anon_0 [ptr [var t_0]]] return [adt core_option_Option 0 1 [ref r_named_0_23938 [var t_0]]] 1 core_ptr_PtrExt_as_ref 0 1 [ptr [var t_0]] body ([adt core_option_Option 0 1 [ref r_named_0_23938 [var t_0]]] unsafe 1 let __result_1 [adt core_option_Option 0 1 [ref r_named_0_23938 [var t_0]]] ([adt core_option_Option 0 1 [ref r_named_0_23938 [var t_0]]] match ([int 32] cast ([bool] call core_ptr_PtrExt_is_null 0 1 [ptr [var t_0]] 1 ([ptr [var t_0]] deref ([ref r_anon_0 [ptr [var t_0]]] var self))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [ref r_named_0_23938 [var t_0]]] block 1 let __result [adt core_option_Option 0 1 [ref r_named_0_23938 [var t_0]]] ([adt core_option_Option 0 1 [ref r_named_0_23938 [var t_0]]] enum_literal core_option_Some 1 1 ([ptr [var t_0]] deref ([ref r_anon_0 [ptr [var t_0]]] var self))) ([adt core_option_Option 0 1 [ref r_named_0_23938 [var t_0]]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [ref r_named_0_23938 [var t_0]]] block 1 let __result_0 [adt core_option_Option 0 1 [ref r_named_0_23938 [var t_0]]] ([adt core_option_Option 0 1 [ref r_named_0_23938 [var t_0]]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [ref r_named_0_23938 [var t_0]]] var __result_0))) ([adt core_option_Option 0 1 [ref r_named_0_23938 [var t_0]]] var __result_1)) 
associated_type 0 1 t_0 core_ptr_PtrExt_Target 0 1 [ptr_mut [var t_0]] [var t_0] 
fn core_ptr__x2amut_x20T__PtrExt_is_null 0 1 t_0 args 1 self [ptr_mut [var t_0]] return [bool] 1 core_ptr_PtrExt_is_null 0 1 [ptr_mut [var t_0]] body ([bool] block 1 let __result [bool] ([bool] binop BiEq ([uint 32] cast ([ptr_mut [var t_0]] var self) [uint 32]) ([uint 32] simple_literal 0)) ([bool] var __result)) 
fn core_ptr__x2amut_x20T__PtrExt_offset 0 1 t_0 args 2 self [ptr_mut [var t_0]] count [int 32] return [ptr_mut [var t_0]] 1 core_ptr_PtrExt_offset 0 1 [ptr_mut [var t_0]] body ([ptr_mut [var t_0]] unsafe 1 let __result [ptr_mut [var t_0]] ([ptr_mut [var t_0]] cast ([ptr [var t_0]] call core_intrinsics_offset 0 1 [var t_0] 2 ([ptr_mut [var t_0]] var self) ([int 32] var count)) [ptr_mut [var t_0]]) ([ptr_mut [var t_0]] var __result)) 
fn core_ptr__x2amut_x20T__PtrExt_as_ref 1 r_named_0_24009 1 t_0 args 1 self [ref r_anon_0 [ptr_mut [var t_0]]] return [adt core_option_Option 0 1 [ref r_named_0_24009 [var t_0]]] 1 core_ptr_PtrExt_as_ref 0 1 [ptr_mut [var t_0]] body ([adt core_option_Option 0 1 [ref r_named_0_24009 [var t_0]]] unsafe 1 let __result_1 [adt core_option_Option 0 1 [ref r_named_0_24009 [var t_0]]] ([adt core_option_Option 0 1 [ref r_named_0_24009 [var t_0]]] match ([int 32] cast ([bool] call core_ptr_PtrExt_is_null 0 1 [ptr_mut [var t_0]] 1 ([ptr_mut [var t_0]] deref ([ref r_anon_0 [ptr_mut [var t_0]]] var self))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [ref r_named_0_24009 [var t_0]]] block 1 let __result [adt core_option_Option 0 1 [ref r_named_0_24009 [var t_0]]] ([adt core_option_Option 0 1 [ref r_named_0_24009 [var t_0]]] enum_literal core_option_Some 1 1 ([ptr_mut [var t_0]] deref ([ref r_anon_0 [ptr_mut [var t_0]]] var self))) ([adt core_option_Option 0 1 [ref r_named_0_24009 [var t_0]]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [ref r_named_0_24009 [var t_0]]] block 1 let __result_0 [adt core_option_Option 0 1 [ref r_named_0_24009 [var t_0]]] ([adt core_option_Option 0 1 [ref r_named_0_24009 [var t_0]]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [ref r_named_0_24009 [var t_0]]] var __result_0))) ([adt core_option_Option 0 1 [ref r_named_0_24009 [var t_0]]] var __result_1)) 
associated_type 0 1 t_0 core_ptr_MutPtrExt_Target 0 1 [ptr_mut [var t_0]] [var t_0] 
fn core_ptr__x2amut_x20T__MutPtrExt_as_mut 1 r_named_0_24045 1 t_0 args 1 self [ref r_anon_0 [ptr_mut [var t_0]]] return [adt core_option_Option 0 1 [ref_mut r_named_0_24045 [var t_0]]] 1 core_ptr_MutPtrExt_as_mut 0 1 [ptr_mut [var t_0]] body ([adt core_option_Option 0 1 [ref_mut r_named_0_24045 [var t_0]]] unsafe 1 let __result_1 [adt core_option_Option 0 1 [ref_mut r_named_0_24045 [var t_0]]] ([adt core_option_Option 0 1 [ref_mut r_named_0_24045 [var t_0]]] match ([int 32] cast ([bool] call core_ptr_PtrExt_is_null 0 1 [ptr_mut [var t_0]] 1 ([ptr_mut [var t_0]] deref ([ref r_anon_0 [ptr_mut [var t_0]]] var self))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [ref_mut r_named_0_24045 [var t_0]]] block 1 let __result [adt core_option_Option 0 1 [ref_mut r_named_0_24045 [var t_0]]] ([adt core_option_Option 0 1 [ref_mut r_named_0_24045 [var t_0]]] enum_literal core_option_Some 1 1 ([ptr_mut [var t_0]] deref ([ref r_anon_0 [ptr_mut [var t_0]]] var self))) ([adt core_option_Option 0 1 [ref_mut r_named_0_24045 [var t_0]]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [ref_mut r_named_0_24045 [var t_0]]] block 1 let __result_0 [adt core_option_Option 0 1 [ref_mut r_named_0_24045 [var t_0]]] ([adt core_option_Option 0 1 [ref_mut r_named_0_24045 [var t_0]]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [ref_mut r_named_0_24045 [var t_0]]] var __result_0))) ([adt core_option_Option 0 1 [ref_mut r_named_0_24045 [var t_0]]] var __result_1)) 
fn core_ptr__x2aconst_x20T__PartialEq_eq 0 1 t_0 args 2 self [ref r_anon_0 [ptr [var t_0]]] other [ref r_anon_1 [ptr [var t_0]]] return [bool] 1 core_cmp_PartialEq_eq 0 1 [ptr [var t_0]] body ([bool] block 1 let __result [bool] ([bool] binop BiEq ([ptr [var t_0]] deref ([ref r_anon_0 [ptr [var t_0]]] var self)) ([ptr [var t_0]] deref ([ref r_anon_1 [ptr [var t_0]]] var other))) ([bool] var __result)) 
fn core_ptr__x2aconst_x20T__PartialEq_ne 0 1 t_0 args 2 self [ref r_anon_0 [ptr [var t_0]]] other [ref r_anon_1 [ptr [var t_0]]] return [bool] 1 core_cmp_PartialEq_ne 0 1 [ptr [var t_0]] body ([bool] block 1 let __result [bool] ([bool] unop UnNot ([bool] call core_cmp_PartialEq_eq 0 2 [ptr [var t_0]] [ptr [var t_0]] 2 ([ref r_anon_0 [ptr [var t_0]]] var self) ([ref r_anon_1 [ptr [var t_0]]] var other))) ([bool] var __result)) 
fn core_ptr__x2amut_x20T__PartialEq_eq 0 1 t_0 args 2 self [ref r_anon_0 [ptr_mut [var t_0]]] other [ref r_anon_1 [ptr_mut [var t_0]]] return [bool] 1 core_cmp_PartialEq_eq 0 1 [ptr_mut [var t_0]] body ([bool] block 1 let __result [bool] ([bool] binop BiEq ([ptr_mut [var t_0]] deref ([ref r_anon_0 [ptr_mut [var t_0]]] var self)) ([ptr_mut [var t_0]] deref ([ref r_anon_1 [ptr_mut [var t_0]]] var other))) ([bool] var __result)) 
fn core_ptr__x2amut_x20T__PartialEq_ne 0 1 t_0 args 2 self [ref r_anon_0 [ptr_mut [var t_0]]] other [ref r_anon_1 [ptr_mut [var t_0]]] return [bool] 1 core_cmp_PartialEq_ne 0 1 [ptr_mut [var t_0]] body ([bool] block 1 let __result [bool] ([bool] unop UnNot ([bool] call core_cmp_PartialEq_eq 0 2 [ptr_mut [var t_0]] [ptr_mut [var t_0]] 2 ([ref r_anon_0 [ptr_mut [var t_0]]] var self) ([ref r_anon_1 [ptr_mut [var t_0]]] var other))) ([bool] var __result)) 
fn core_ptr__x2aconst_x20T__Clone_clone 0 1 t_0 args 1 self [ref r_anon_0 [ptr [var t_0]]] return [ptr [var t_0]] 1 core_clone_Clone_clone 0 1 [ptr [var t_0]] body ([ptr [var t_0]] block 1 let __result [ptr [var t_0]] ([ptr [var t_0]] deref ([ref r_anon_0 [ptr [var t_0]]] var self)) ([ptr [var t_0]] var __result)) 
fn core_ptr__x2amut_x20T__Clone_clone 0 1 t_0 args 1 self [ref r_anon_0 [ptr_mut [var t_0]]] return [ptr_mut [var t_0]] 1 core_clone_Clone_clone 0 1 [ptr_mut [var t_0]] body ([ptr_mut [var t_0]] block 1 let __result [ptr_mut [var t_0]] ([ptr_mut [var t_0]] deref ([ref r_anon_0 [ptr_mut [var t_0]]] var self)) ([ptr_mut [var t_0]] var __result)) 
fn core_ptr__x2aconst_x20T__PartialOrd_partial_cmp 0 1 t_0 args 2 self [ref r_anon_0 [ptr [var t_0]]] other [ref r_anon_1 [ptr [var t_0]]] return [adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] 1 core_cmp_PartialOrd_partial_cmp 0 1 [ptr [var t_0]] body ([adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] block 1 let __result [adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] ([adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] enum_literal core_option_Some 1 1 ([adt core_cmp_Ordering 0 0] call core_cmp_Ord_cmp 0 1 [ptr [var t_0]] 2 ([ref r_anon_0 [ptr [var t_0]]] var self) ([ref r_anon_1 [ptr [var t_0]]] var other))) ([adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] var __result)) 
fn core_ptr__x2aconst_x20T__PartialOrd_lt 0 1 t_0 args 2 self [ref r_anon_0 [ptr [var t_0]]] other [ref r_anon_1 [ptr [var t_0]]] return [bool] 1 core_cmp_PartialOrd_lt 0 1 [ptr [var t_0]] body ([bool] block 1 let __result [bool] ([bool] binop BiLt ([ptr [var t_0]] deref ([ref r_anon_0 [ptr [var t_0]]] var self)) ([ptr [var t_0]] deref ([ref r_anon_1 [ptr [var t_0]]] var other))) ([bool] var __result)) 
fn core_ptr__x2aconst_x20T__PartialOrd_le 0 1 t_0 args 2 self [ref r_anon_0 [ptr [var t_0]]] other [ref r_anon_1 [ptr [var t_0]]] return [bool] 1 core_cmp_PartialOrd_le 0 1 [ptr [var t_0]] body ([bool] block 1 let __result [bool] ([bool] binop BiLe ([ptr [var t_0]] deref ([ref r_anon_0 [ptr [var t_0]]] var self)) ([ptr [var t_0]] deref ([ref r_anon_1 [ptr [var t_0]]] var other))) ([bool] var __result)) 
fn core_ptr__x2aconst_x20T__PartialOrd_gt 0 1 t_0 args 2 self [ref r_anon_0 [ptr [var t_0]]] other [ref r_anon_1 [ptr [var t_0]]] return [bool] 1 core_cmp_PartialOrd_gt 0 1 [ptr [var t_0]] body ([bool] block 1 let __result [bool] ([bool] binop BiGt ([ptr [var t_0]] deref ([ref r_anon_0 [ptr [var t_0]]] var self)) ([ptr [var t_0]] deref ([ref r_anon_1 [ptr [var t_0]]] var other))) ([bool] var __result)) 
fn core_ptr__x2aconst_x20T__PartialOrd_ge 0 1 t_0 args 2 self [ref r_anon_0 [ptr [var t_0]]] other [ref r_anon_1 [ptr [var t_0]]] return [bool] 1 core_cmp_PartialOrd_ge 0 1 [ptr [var t_0]] body ([bool] block 1 let __result [bool] ([bool] binop BiGe ([ptr [var t_0]] deref ([ref r_anon_0 [ptr [var t_0]]] var self)) ([ptr [var t_0]] deref ([ref r_anon_1 [ptr [var t_0]]] var other))) ([bool] var __result)) 
fn core_ptr__x2amut_x20T__PartialOrd_partial_cmp 0 1 t_0 args 2 self [ref r_anon_0 [ptr_mut [var t_0]]] other [ref r_anon_1 [ptr_mut [var t_0]]] return [adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] 1 core_cmp_PartialOrd_partial_cmp 0 1 [ptr_mut [var t_0]] body ([adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] block 1 let __result [adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] ([adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] enum_literal core_option_Some 1 1 ([adt core_cmp_Ordering 0 0] call core_cmp_Ord_cmp 0 1 [ptr_mut [var t_0]] 2 ([ref r_anon_0 [ptr_mut [var t_0]]] var self) ([ref r_anon_1 [ptr_mut [var t_0]]] var other))) ([adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] var __result)) 
fn core_ptr__x2amut_x20T__PartialOrd_lt 0 1 t_0 args 2 self [ref r_anon_0 [ptr_mut [var t_0]]] other [ref r_anon_1 [ptr_mut [var t_0]]] return [bool] 1 core_cmp_PartialOrd_lt 0 1 [ptr_mut [var t_0]] body ([bool] block 1 let __result [bool] ([bool] binop BiLt ([ptr_mut [var t_0]] deref ([ref r_anon_0 [ptr_mut [var t_0]]] var self)) ([ptr_mut [var t_0]] deref ([ref r_anon_1 [ptr_mut [var t_0]]] var other))) ([bool] var __result)) 
fn core_ptr__x2amut_x20T__PartialOrd_le 0 1 t_0 args 2 self [ref r_anon_0 [ptr_mut [var t_0]]] other [ref r_anon_1 [ptr_mut [var t_0]]] return [bool] 1 core_cmp_PartialOrd_le 0 1 [ptr_mut [var t_0]] body ([bool] block 1 let __result [bool] ([bool] binop BiLe ([ptr_mut [var t_0]] deref ([ref r_anon_0 [ptr_mut [var t_0]]] var self)) ([ptr_mut [var t_0]] deref ([ref r_anon_1 [ptr_mut [var t_0]]] var other))) ([bool] var __result)) 
fn core_ptr__x2amut_x20T__PartialOrd_gt 0 1 t_0 args 2 self [ref r_anon_0 [ptr_mut [var t_0]]] other [ref r_anon_1 [ptr_mut [var t_0]]] return [bool] 1 core_cmp_PartialOrd_gt 0 1 [ptr_mut [var t_0]] body ([bool] block 1 let __result [bool] ([bool] binop BiGt ([ptr_mut [var t_0]] deref ([ref r_anon_0 [ptr_mut [var t_0]]] var self)) ([ptr_mut [var t_0]] deref ([ref r_anon_1 [ptr_mut [var t_0]]] var other))) ([bool] var __result)) 
fn core_ptr__x2amut_x20T__PartialOrd_ge 0 1 t_0 args 2 self [ref r_anon_0 [ptr_mut [var t_0]]] other [ref r_anon_1 [ptr_mut [var t_0]]] return [bool] 1 core_cmp_PartialOrd_ge 0 1 [ptr_mut [var t_0]] body ([bool] block 1 let __result [bool] ([bool] binop BiGe ([ptr_mut [var t_0]] deref ([ref r_anon_0 [ptr_mut [var t_0]]] var self)) ([ptr_mut [var t_0]] deref ([ref r_anon_1 [ptr_mut [var t_0]]] var other))) ([bool] var __result)) 
struct core_marker_CovariantType 0 1 t_0 0 0 
fn core_marker_CovariantType__Clone_clone 0 1 t_0 args 1 self [ref r_anon_0 [adt core_marker_CovariantType 0 1 [var t_0]]] return [adt core_marker_CovariantType 0 1 [var t_0]] 1 core_clone_Clone_clone 0 1 [adt core_marker_CovariantType 0 1 [var t_0]] body ([adt core_marker_CovariantType 0 1 [var t_0]] block 1 let __result [adt core_marker_CovariantType 0 1 [var t_0]] ([adt core_marker_CovariantType 0 1 [var t_0]] deref ([ref r_anon_0 [adt core_marker_CovariantType 0 1 [var t_0]]] var self)) ([adt core_marker_CovariantType 0 1 [var t_0]] var __result)) 
struct core_marker_ContravariantType 0 1 t_0 0 0 
fn core_marker_ContravariantType__Clone_clone 0 1 t_0 args 1 self [ref r_anon_0 [adt core_marker_ContravariantType 0 1 [var t_0]]] return [adt core_marker_ContravariantType 0 1 [var t_0]] 1 core_clone_Clone_clone 0 1 [adt core_marker_ContravariantType 0 1 [var t_0]] body ([adt core_marker_ContravariantType 0 1 [var t_0]] block 1 let __result [adt core_marker_ContravariantType 0 1 [var t_0]] ([adt core_marker_ContravariantType 0 1 [var t_0]] deref ([ref r_anon_0 [adt core_marker_ContravariantType 0 1 [var t_0]]] var self)) ([adt core_marker_ContravariantType 0 1 [var t_0]] var __result)) 
struct core_marker_InvariantType 0 1 t_0 0 0 
fn core_marker_InvariantType__Clone_clone 0 1 t_0 args 1 self [ref r_anon_0 [adt core_marker_InvariantType 0 1 [var t_0]]] return [adt core_marker_InvariantType 0 1 [var t_0]] 1 core_clone_Clone_clone 0 1 [adt core_marker_InvariantType 0 1 [var t_0]] body ([adt core_marker_InvariantType 0 1 [var t_0]] block 1 let __result [adt core_marker_InvariantType 0 1 [var t_0]] ([adt core_marker_InvariantType 0 1 [var t_0]] deref ([ref r_anon_0 [adt core_marker_InvariantType 0 1 [var t_0]]] var self)) ([adt core_marker_InvariantType 0 1 [var t_0]] var __result)) 
struct core_marker_CovariantLifetime 1 r_named_0_25834 0 0 0 
struct core_marker_ContravariantLifetime 1 r_named_0_26095 0 0 0 
struct core_marker_InvariantLifetime 1 r_named_0_26356 0 0 0 
struct core_marker_NoCopy 0 0 0 0 
struct core_marker_Managed 0 0 0 0 
associated_type 0 0 core_ops_Add_Output 0 1 [uint 32] [uint 32] 
fn core_ops_uint__Add_add 0 0 args 2 self [uint 32] other [uint 32] return [uint 32] 1 core_ops_Add_add 0 1 [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiAdd ([uint 32] var self) ([uint 32] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_27165 0 core_ops_Add_Output 0 2 [uint 32] [ref r_named_0_27165 [uint 32]] [abstract core_ops_Add_Output 0 2 [uint 32] [uint 32]] 
fn core_ops__x26_x27a_x20uint__Add_add 1 r_named_0_27165 0 args 2 self [ref r_named_0_27165 [uint 32]] other [uint 32] return [abstract core_ops_Add_Output 0 2 [uint 32] [uint 32]] 1 core_ops_Add_add 0 2 [uint 32] [ref r_named_0_27165 [uint 32]] body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_ops_Add_add 0 2 [uint 32] [uint 32] 2 ([uint 32] deref ([ref r_named_0_27165 [uint 32]] var self)) ([uint 32] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_27207 0 core_ops_Add_Output 0 2 [ref r_named_0_27207 [uint 32]] [uint 32] [abstract core_ops_Add_Output 0 2 [uint 32] [uint 32]] 
fn core_ops_uint__Add_add 1 r_named_0_27207 0 args 2 self [uint 32] other [ref r_named_0_27207 [uint 32]] return [abstract core_ops_Add_Output 0 2 [uint 32] [uint 32]] 1 core_ops_Add_add 0 2 [ref r_named_0_27207 [uint 32]] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_ops_Add_add 0 2 [uint 32] [uint 32] 2 ([uint 32] var self) ([uint 32] deref ([ref r_named_0_27207 [uint 32]] var other))) ([uint 32] var __result)) 
associated_type 2 r_named_0_27248 r_named_0_27249 0 core_ops_Add_Output 0 2 [ref r_named_0_27248 [uint 32]] [ref r_named_0_27249 [uint 32]] [abstract core_ops_Add_Output 0 2 [uint 32] [uint 32]] 
fn core_ops__x26_x27b_x20uint__Add_add 2 r_named_0_27248 r_named_0_27249 0 args 2 self [ref r_named_0_27249 [uint 32]] other [ref r_named_0_27248 [uint 32]] return [abstract core_ops_Add_Output 0 2 [uint 32] [uint 32]] 1 core_ops_Add_add 0 2 [ref r_named_0_27248 [uint 32]] [ref r_named_0_27249 [uint 32]] body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_ops_Add_add 0 2 [uint 32] [uint 32] 2 ([uint 32] deref ([ref r_named_0_27249 [uint 32]] var self)) ([uint 32] deref ([ref r_named_0_27248 [uint 32]] var other))) ([uint 32] var __result)) 
associated_type 0 0 core_ops_Add_Output 0 1 [uint 8] [uint 8] 
fn core_ops_u8__Add_add 0 0 args 2 self [uint 8] other [uint 8] return [uint 8] 1 core_ops_Add_add 0 1 [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] binop BiAdd ([uint 8] var self) ([uint 8] var other)) ([uint 8] var __result)) 
associated_type 1 r_named_0_27310 0 core_ops_Add_Output 0 2 [uint 8] [ref r_named_0_27310 [uint 8]] [abstract core_ops_Add_Output 0 2 [uint 8] [uint 8]] 
fn core_ops__x26_x27a_x20u8__Add_add 1 r_named_0_27310 0 args 2 self [ref r_named_0_27310 [uint 8]] other [uint 8] return [abstract core_ops_Add_Output 0 2 [uint 8] [uint 8]] 1 core_ops_Add_add 0 2 [uint 8] [ref r_named_0_27310 [uint 8]] body ([uint 8] block 1 let __result [uint 8] ([uint 8] call core_ops_Add_add 0 2 [uint 8] [uint 8] 2 ([uint 8] deref ([ref r_named_0_27310 [uint 8]] var self)) ([uint 8] var other)) ([uint 8] var __result)) 
associated_type 1 r_named_0_27352 0 core_ops_Add_Output 0 2 [ref r_named_0_27352 [uint 8]] [uint 8] [abstract core_ops_Add_Output 0 2 [uint 8] [uint 8]] 
fn core_ops_u8__Add_add 1 r_named_0_27352 0 args 2 self [uint 8] other [ref r_named_0_27352 [uint 8]] return [abstract core_ops_Add_Output 0 2 [uint 8] [uint 8]] 1 core_ops_Add_add 0 2 [ref r_named_0_27352 [uint 8]] [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] call core_ops_Add_add 0 2 [uint 8] [uint 8] 2 ([uint 8] var self) ([uint 8] deref ([ref r_named_0_27352 [uint 8]] var other))) ([uint 8] var __result)) 
associated_type 2 r_named_0_27393 r_named_0_27394 0 core_ops_Add_Output 0 2 [ref r_named_0_27393 [uint 8]] [ref r_named_0_27394 [uint 8]] [abstract core_ops_Add_Output 0 2 [uint 8] [uint 8]] 
fn core_ops__x26_x27b_x20u8__Add_add 2 r_named_0_27393 r_named_0_27394 0 args 2 self [ref r_named_0_27394 [uint 8]] other [ref r_named_0_27393 [uint 8]] return [abstract core_ops_Add_Output 0 2 [uint 8] [uint 8]] 1 core_ops_Add_add 0 2 [ref r_named_0_27393 [uint 8]] [ref r_named_0_27394 [uint 8]] body ([uint 8] block 1 let __result [uint 8] ([uint 8] call core_ops_Add_add 0 2 [uint 8] [uint 8] 2 ([uint 8] deref ([ref r_named_0_27394 [uint 8]] var self)) ([uint 8] deref ([ref r_named_0_27393 [uint 8]] var other))) ([uint 8] var __result)) 
associated_type 0 0 core_ops_Add_Output 0 1 [uint 16] [uint 16] 
fn core_ops_u16__Add_add 0 0 args 2 self [uint 16] other [uint 16] return [uint 16] 1 core_ops_Add_add 0 1 [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] binop BiAdd ([uint 16] var self) ([uint 16] var other)) ([uint 16] var __result)) 
associated_type 1 r_named_0_27455 0 core_ops_Add_Output 0 2 [uint 16] [ref r_named_0_27455 [uint 16]] [abstract core_ops_Add_Output 0 2 [uint 16] [uint 16]] 
fn core_ops__x26_x27a_x20u16__Add_add 1 r_named_0_27455 0 args 2 self [ref r_named_0_27455 [uint 16]] other [uint 16] return [abstract core_ops_Add_Output 0 2 [uint 16] [uint 16]] 1 core_ops_Add_add 0 2 [uint 16] [ref r_named_0_27455 [uint 16]] body ([uint 16] block 1 let __result [uint 16] ([uint 16] call core_ops_Add_add 0 2 [uint 16] [uint 16] 2 ([uint 16] deref ([ref r_named_0_27455 [uint 16]] var self)) ([uint 16] var other)) ([uint 16] var __result)) 
associated_type 1 r_named_0_27497 0 core_ops_Add_Output 0 2 [ref r_named_0_27497 [uint 16]] [uint 16] [abstract core_ops_Add_Output 0 2 [uint 16] [uint 16]] 
fn core_ops_u16__Add_add 1 r_named_0_27497 0 args 2 self [uint 16] other [ref r_named_0_27497 [uint 16]] return [abstract core_ops_Add_Output 0 2 [uint 16] [uint 16]] 1 core_ops_Add_add 0 2 [ref r_named_0_27497 [uint 16]] [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] call core_ops_Add_add 0 2 [uint 16] [uint 16] 2 ([uint 16] var self) ([uint 16] deref ([ref r_named_0_27497 [uint 16]] var other))) ([uint 16] var __result)) 
associated_type 2 r_named_0_27538 r_named_0_27539 0 core_ops_Add_Output 0 2 [ref r_named_0_27538 [uint 16]] [ref r_named_0_27539 [uint 16]] [abstract core_ops_Add_Output 0 2 [uint 16] [uint 16]] 
fn core_ops__x26_x27b_x20u16__Add_add 2 r_named_0_27538 r_named_0_27539 0 args 2 self [ref r_named_0_27539 [uint 16]] other [ref r_named_0_27538 [uint 16]] return [abstract core_ops_Add_Output 0 2 [uint 16] [uint 16]] 1 core_ops_Add_add 0 2 [ref r_named_0_27538 [uint 16]] [ref r_named_0_27539 [uint 16]] body ([uint 16] block 1 let __result [uint 16] ([uint 16] call core_ops_Add_add 0 2 [uint 16] [uint 16] 2 ([uint 16] deref ([ref r_named_0_27539 [uint 16]] var self)) ([uint 16] deref ([ref r_named_0_27538 [uint 16]] var other))) ([uint 16] var __result)) 
associated_type 0 0 core_ops_Add_Output 0 1 [uint 32] [uint 32] 
fn core_ops_u32__Add_add 0 0 args 2 self [uint 32] other [uint 32] return [uint 32] 1 core_ops_Add_add 0 1 [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiAdd ([uint 32] var self) ([uint 32] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_27600 0 core_ops_Add_Output 0 2 [uint 32] [ref r_named_0_27600 [uint 32]] [abstract core_ops_Add_Output 0 2 [uint 32] [uint 32]] 
fn core_ops__x26_x27a_x20u32__Add_add 1 r_named_0_27600 0 args 2 self [ref r_named_0_27600 [uint 32]] other [uint 32] return [abstract core_ops_Add_Output 0 2 [uint 32] [uint 32]] 1 core_ops_Add_add 0 2 [uint 32] [ref r_named_0_27600 [uint 32]] body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_ops_Add_add 0 2 [uint 32] [uint 32] 2 ([uint 32] deref ([ref r_named_0_27600 [uint 32]] var self)) ([uint 32] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_27642 0 core_ops_Add_Output 0 2 [ref r_named_0_27642 [uint 32]] [uint 32] [abstract core_ops_Add_Output 0 2 [uint 32] [uint 32]] 
fn core_ops_u32__Add_add 1 r_named_0_27642 0 args 2 self [uint 32] other [ref r_named_0_27642 [uint 32]] return [abstract core_ops_Add_Output 0 2 [uint 32] [uint 32]] 1 core_ops_Add_add 0 2 [ref r_named_0_27642 [uint 32]] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_ops_Add_add 0 2 [uint 32] [uint 32] 2 ([uint 32] var self) ([uint 32] deref ([ref r_named_0_27642 [uint 32]] var other))) ([uint 32] var __result)) 
associated_type 2 r_named_0_27683 r_named_0_27684 0 core_ops_Add_Output 0 2 [ref r_named_0_27683 [uint 32]] [ref r_named_0_27684 [uint 32]] [abstract core_ops_Add_Output 0 2 [uint 32] [uint 32]] 
fn core_ops__x26_x27b_x20u32__Add_add 2 r_named_0_27683 r_named_0_27684 0 args 2 self [ref r_named_0_27684 [uint 32]] other [ref r_named_0_27683 [uint 32]] return [abstract core_ops_Add_Output 0 2 [uint 32] [uint 32]] 1 core_ops_Add_add 0 2 [ref r_named_0_27683 [uint 32]] [ref r_named_0_27684 [uint 32]] body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_ops_Add_add 0 2 [uint 32] [uint 32] 2 ([uint 32] deref ([ref r_named_0_27684 [uint 32]] var self)) ([uint 32] deref ([ref r_named_0_27683 [uint 32]] var other))) ([uint 32] var __result)) 
associated_type 0 0 core_ops_Add_Output 0 1 [uint 64] [uint 64] 
fn core_ops_u64__Add_add 0 0 args 2 self [uint 64] other [uint 64] return [uint 64] 1 core_ops_Add_add 0 1 [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] binop BiAdd ([uint 64] var self) ([uint 64] var other)) ([uint 64] var __result)) 
associated_type 1 r_named_0_27745 0 core_ops_Add_Output 0 2 [uint 64] [ref r_named_0_27745 [uint 64]] [abstract core_ops_Add_Output 0 2 [uint 64] [uint 64]] 
fn core_ops__x26_x27a_x20u64__Add_add 1 r_named_0_27745 0 args 2 self [ref r_named_0_27745 [uint 64]] other [uint 64] return [abstract core_ops_Add_Output 0 2 [uint 64] [uint 64]] 1 core_ops_Add_add 0 2 [uint 64] [ref r_named_0_27745 [uint 64]] body ([uint 64] block 1 let __result [uint 64] ([uint 64] call core_ops_Add_add 0 2 [uint 64] [uint 64] 2 ([uint 64] deref ([ref r_named_0_27745 [uint 64]] var self)) ([uint 64] var other)) ([uint 64] var __result)) 
associated_type 1 r_named_0_27787 0 core_ops_Add_Output 0 2 [ref r_named_0_27787 [uint 64]] [uint 64] [abstract core_ops_Add_Output 0 2 [uint 64] [uint 64]] 
fn core_ops_u64__Add_add 1 r_named_0_27787 0 args 2 self [uint 64] other [ref r_named_0_27787 [uint 64]] return [abstract core_ops_Add_Output 0 2 [uint 64] [uint 64]] 1 core_ops_Add_add 0 2 [ref r_named_0_27787 [uint 64]] [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] call core_ops_Add_add 0 2 [uint 64] [uint 64] 2 ([uint 64] var self) ([uint 64] deref ([ref r_named_0_27787 [uint 64]] var other))) ([uint 64] var __result)) 
associated_type 2 r_named_0_27828 r_named_0_27829 0 core_ops_Add_Output 0 2 [ref r_named_0_27828 [uint 64]] [ref r_named_0_27829 [uint 64]] [abstract core_ops_Add_Output 0 2 [uint 64] [uint 64]] 
fn core_ops__x26_x27b_x20u64__Add_add 2 r_named_0_27828 r_named_0_27829 0 args 2 self [ref r_named_0_27829 [uint 64]] other [ref r_named_0_27828 [uint 64]] return [abstract core_ops_Add_Output 0 2 [uint 64] [uint 64]] 1 core_ops_Add_add 0 2 [ref r_named_0_27828 [uint 64]] [ref r_named_0_27829 [uint 64]] body ([uint 64] block 1 let __result [uint 64] ([uint 64] call core_ops_Add_add 0 2 [uint 64] [uint 64] 2 ([uint 64] deref ([ref r_named_0_27829 [uint 64]] var self)) ([uint 64] deref ([ref r_named_0_27828 [uint 64]] var other))) ([uint 64] var __result)) 
associated_type 0 0 core_ops_Add_Output 0 1 [int 32] [int 32] 
fn core_ops_int__Add_add 0 0 args 2 self [int 32] other [int 32] return [int 32] 1 core_ops_Add_add 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiAdd ([int 32] var self) ([int 32] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_27890 0 core_ops_Add_Output 0 2 [int 32] [ref r_named_0_27890 [int 32]] [abstract core_ops_Add_Output 0 2 [int 32] [int 32]] 
fn core_ops__x26_x27a_x20int__Add_add 1 r_named_0_27890 0 args 2 self [ref r_named_0_27890 [int 32]] other [int 32] return [abstract core_ops_Add_Output 0 2 [int 32] [int 32]] 1 core_ops_Add_add 0 2 [int 32] [ref r_named_0_27890 [int 32]] body ([int 32] block 1 let __result [int 32] ([int 32] call core_ops_Add_add 0 2 [int 32] [int 32] 2 ([int 32] deref ([ref r_named_0_27890 [int 32]] var self)) ([int 32] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_27932 0 core_ops_Add_Output 0 2 [ref r_named_0_27932 [int 32]] [int 32] [abstract core_ops_Add_Output 0 2 [int 32] [int 32]] 
fn core_ops_int__Add_add 1 r_named_0_27932 0 args 2 self [int 32] other [ref r_named_0_27932 [int 32]] return [abstract core_ops_Add_Output 0 2 [int 32] [int 32]] 1 core_ops_Add_add 0 2 [ref r_named_0_27932 [int 32]] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] call core_ops_Add_add 0 2 [int 32] [int 32] 2 ([int 32] var self) ([int 32] deref ([ref r_named_0_27932 [int 32]] var other))) ([int 32] var __result)) 
associated_type 2 r_named_0_27973 r_named_0_27974 0 core_ops_Add_Output 0 2 [ref r_named_0_27973 [int 32]] [ref r_named_0_27974 [int 32]] [abstract core_ops_Add_Output 0 2 [int 32] [int 32]] 
fn core_ops__x26_x27b_x20int__Add_add 2 r_named_0_27973 r_named_0_27974 0 args 2 self [ref r_named_0_27974 [int 32]] other [ref r_named_0_27973 [int 32]] return [abstract core_ops_Add_Output 0 2 [int 32] [int 32]] 1 core_ops_Add_add 0 2 [ref r_named_0_27973 [int 32]] [ref r_named_0_27974 [int 32]] body ([int 32] block 1 let __result [int 32] ([int 32] call core_ops_Add_add 0 2 [int 32] [int 32] 2 ([int 32] deref ([ref r_named_0_27974 [int 32]] var self)) ([int 32] deref ([ref r_named_0_27973 [int 32]] var other))) ([int 32] var __result)) 
associated_type 0 0 core_ops_Add_Output 0 1 [int 8] [int 8] 
fn core_ops_i8__Add_add 0 0 args 2 self [int 8] other [int 8] return [int 8] 1 core_ops_Add_add 0 1 [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] binop BiAdd ([int 8] var self) ([int 8] var other)) ([int 8] var __result)) 
associated_type 1 r_named_0_28035 0 core_ops_Add_Output 0 2 [int 8] [ref r_named_0_28035 [int 8]] [abstract core_ops_Add_Output 0 2 [int 8] [int 8]] 
fn core_ops__x26_x27a_x20i8__Add_add 1 r_named_0_28035 0 args 2 self [ref r_named_0_28035 [int 8]] other [int 8] return [abstract core_ops_Add_Output 0 2 [int 8] [int 8]] 1 core_ops_Add_add 0 2 [int 8] [ref r_named_0_28035 [int 8]] body ([int 8] block 1 let __result [int 8] ([int 8] call core_ops_Add_add 0 2 [int 8] [int 8] 2 ([int 8] deref ([ref r_named_0_28035 [int 8]] var self)) ([int 8] var other)) ([int 8] var __result)) 
associated_type 1 r_named_0_28077 0 core_ops_Add_Output 0 2 [ref r_named_0_28077 [int 8]] [int 8] [abstract core_ops_Add_Output 0 2 [int 8] [int 8]] 
fn core_ops_i8__Add_add 1 r_named_0_28077 0 args 2 self [int 8] other [ref r_named_0_28077 [int 8]] return [abstract core_ops_Add_Output 0 2 [int 8] [int 8]] 1 core_ops_Add_add 0 2 [ref r_named_0_28077 [int 8]] [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] call core_ops_Add_add 0 2 [int 8] [int 8] 2 ([int 8] var self) ([int 8] deref ([ref r_named_0_28077 [int 8]] var other))) ([int 8] var __result)) 
associated_type 2 r_named_0_28118 r_named_0_28119 0 core_ops_Add_Output 0 2 [ref r_named_0_28118 [int 8]] [ref r_named_0_28119 [int 8]] [abstract core_ops_Add_Output 0 2 [int 8] [int 8]] 
fn core_ops__x26_x27b_x20i8__Add_add 2 r_named_0_28118 r_named_0_28119 0 args 2 self [ref r_named_0_28119 [int 8]] other [ref r_named_0_28118 [int 8]] return [abstract core_ops_Add_Output 0 2 [int 8] [int 8]] 1 core_ops_Add_add 0 2 [ref r_named_0_28118 [int 8]] [ref r_named_0_28119 [int 8]] body ([int 8] block 1 let __result [int 8] ([int 8] call core_ops_Add_add 0 2 [int 8] [int 8] 2 ([int 8] deref ([ref r_named_0_28119 [int 8]] var self)) ([int 8] deref ([ref r_named_0_28118 [int 8]] var other))) ([int 8] var __result)) 
associated_type 0 0 core_ops_Add_Output 0 1 [int 16] [int 16] 
fn core_ops_i16__Add_add 0 0 args 2 self [int 16] other [int 16] return [int 16] 1 core_ops_Add_add 0 1 [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] binop BiAdd ([int 16] var self) ([int 16] var other)) ([int 16] var __result)) 
associated_type 1 r_named_0_28180 0 core_ops_Add_Output 0 2 [int 16] [ref r_named_0_28180 [int 16]] [abstract core_ops_Add_Output 0 2 [int 16] [int 16]] 
fn core_ops__x26_x27a_x20i16__Add_add 1 r_named_0_28180 0 args 2 self [ref r_named_0_28180 [int 16]] other [int 16] return [abstract core_ops_Add_Output 0 2 [int 16] [int 16]] 1 core_ops_Add_add 0 2 [int 16] [ref r_named_0_28180 [int 16]] body ([int 16] block 1 let __result [int 16] ([int 16] call core_ops_Add_add 0 2 [int 16] [int 16] 2 ([int 16] deref ([ref r_named_0_28180 [int 16]] var self)) ([int 16] var other)) ([int 16] var __result)) 
associated_type 1 r_named_0_28222 0 core_ops_Add_Output 0 2 [ref r_named_0_28222 [int 16]] [int 16] [abstract core_ops_Add_Output 0 2 [int 16] [int 16]] 
fn core_ops_i16__Add_add 1 r_named_0_28222 0 args 2 self [int 16] other [ref r_named_0_28222 [int 16]] return [abstract core_ops_Add_Output 0 2 [int 16] [int 16]] 1 core_ops_Add_add 0 2 [ref r_named_0_28222 [int 16]] [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] call core_ops_Add_add 0 2 [int 16] [int 16] 2 ([int 16] var self) ([int 16] deref ([ref r_named_0_28222 [int 16]] var other))) ([int 16] var __result)) 
associated_type 2 r_named_0_28263 r_named_0_28264 0 core_ops_Add_Output 0 2 [ref r_named_0_28263 [int 16]] [ref r_named_0_28264 [int 16]] [abstract core_ops_Add_Output 0 2 [int 16] [int 16]] 
fn core_ops__x26_x27b_x20i16__Add_add 2 r_named_0_28263 r_named_0_28264 0 args 2 self [ref r_named_0_28264 [int 16]] other [ref r_named_0_28263 [int 16]] return [abstract core_ops_Add_Output 0 2 [int 16] [int 16]] 1 core_ops_Add_add 0 2 [ref r_named_0_28263 [int 16]] [ref r_named_0_28264 [int 16]] body ([int 16] block 1 let __result [int 16] ([int 16] call core_ops_Add_add 0 2 [int 16] [int 16] 2 ([int 16] deref ([ref r_named_0_28264 [int 16]] var self)) ([int 16] deref ([ref r_named_0_28263 [int 16]] var other))) ([int 16] var __result)) 
associated_type 0 0 core_ops_Add_Output 0 1 [int 32] [int 32] 
fn core_ops_i32__Add_add 0 0 args 2 self [int 32] other [int 32] return [int 32] 1 core_ops_Add_add 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiAdd ([int 32] var self) ([int 32] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_28325 0 core_ops_Add_Output 0 2 [int 32] [ref r_named_0_28325 [int 32]] [abstract core_ops_Add_Output 0 2 [int 32] [int 32]] 
fn core_ops__x26_x27a_x20i32__Add_add 1 r_named_0_28325 0 args 2 self [ref r_named_0_28325 [int 32]] other [int 32] return [abstract core_ops_Add_Output 0 2 [int 32] [int 32]] 1 core_ops_Add_add 0 2 [int 32] [ref r_named_0_28325 [int 32]] body ([int 32] block 1 let __result [int 32] ([int 32] call core_ops_Add_add 0 2 [int 32] [int 32] 2 ([int 32] deref ([ref r_named_0_28325 [int 32]] var self)) ([int 32] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_28367 0 core_ops_Add_Output 0 2 [ref r_named_0_28367 [int 32]] [int 32] [abstract core_ops_Add_Output 0 2 [int 32] [int 32]] 
fn core_ops_i32__Add_add 1 r_named_0_28367 0 args 2 self [int 32] other [ref r_named_0_28367 [int 32]] return [abstract core_ops_Add_Output 0 2 [int 32] [int 32]] 1 core_ops_Add_add 0 2 [ref r_named_0_28367 [int 32]] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] call core_ops_Add_add 0 2 [int 32] [int 32] 2 ([int 32] var self) ([int 32] deref ([ref r_named_0_28367 [int 32]] var other))) ([int 32] var __result)) 
associated_type 2 r_named_0_28408 r_named_0_28409 0 core_ops_Add_Output 0 2 [ref r_named_0_28408 [int 32]] [ref r_named_0_28409 [int 32]] [abstract core_ops_Add_Output 0 2 [int 32] [int 32]] 
fn core_ops__x26_x27b_x20i32__Add_add 2 r_named_0_28408 r_named_0_28409 0 args 2 self [ref r_named_0_28409 [int 32]] other [ref r_named_0_28408 [int 32]] return [abstract core_ops_Add_Output 0 2 [int 32] [int 32]] 1 core_ops_Add_add 0 2 [ref r_named_0_28408 [int 32]] [ref r_named_0_28409 [int 32]] body ([int 32] block 1 let __result [int 32] ([int 32] call core_ops_Add_add 0 2 [int 32] [int 32] 2 ([int 32] deref ([ref r_named_0_28409 [int 32]] var self)) ([int 32] deref ([ref r_named_0_28408 [int 32]] var other))) ([int 32] var __result)) 
associated_type 0 0 core_ops_Add_Output 0 1 [int 64] [int 64] 
fn core_ops_i64__Add_add 0 0 args 2 self [int 64] other [int 64] return [int 64] 1 core_ops_Add_add 0 1 [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] binop BiAdd ([int 64] var self) ([int 64] var other)) ([int 64] var __result)) 
associated_type 1 r_named_0_28470 0 core_ops_Add_Output 0 2 [int 64] [ref r_named_0_28470 [int 64]] [abstract core_ops_Add_Output 0 2 [int 64] [int 64]] 
fn core_ops__x26_x27a_x20i64__Add_add 1 r_named_0_28470 0 args 2 self [ref r_named_0_28470 [int 64]] other [int 64] return [abstract core_ops_Add_Output 0 2 [int 64] [int 64]] 1 core_ops_Add_add 0 2 [int 64] [ref r_named_0_28470 [int 64]] body ([int 64] block 1 let __result [int 64] ([int 64] call core_ops_Add_add 0 2 [int 64] [int 64] 2 ([int 64] deref ([ref r_named_0_28470 [int 64]] var self)) ([int 64] var other)) ([int 64] var __result)) 
associated_type 1 r_named_0_28512 0 core_ops_Add_Output 0 2 [ref r_named_0_28512 [int 64]] [int 64] [abstract core_ops_Add_Output 0 2 [int 64] [int 64]] 
fn core_ops_i64__Add_add 1 r_named_0_28512 0 args 2 self [int 64] other [ref r_named_0_28512 [int 64]] return [abstract core_ops_Add_Output 0 2 [int 64] [int 64]] 1 core_ops_Add_add 0 2 [ref r_named_0_28512 [int 64]] [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] call core_ops_Add_add 0 2 [int 64] [int 64] 2 ([int 64] var self) ([int 64] deref ([ref r_named_0_28512 [int 64]] var other))) ([int 64] var __result)) 
associated_type 2 r_named_0_28553 r_named_0_28554 0 core_ops_Add_Output 0 2 [ref r_named_0_28553 [int 64]] [ref r_named_0_28554 [int 64]] [abstract core_ops_Add_Output 0 2 [int 64] [int 64]] 
fn core_ops__x26_x27b_x20i64__Add_add 2 r_named_0_28553 r_named_0_28554 0 args 2 self [ref r_named_0_28554 [int 64]] other [ref r_named_0_28553 [int 64]] return [abstract core_ops_Add_Output 0 2 [int 64] [int 64]] 1 core_ops_Add_add 0 2 [ref r_named_0_28553 [int 64]] [ref r_named_0_28554 [int 64]] body ([int 64] block 1 let __result [int 64] ([int 64] call core_ops_Add_add 0 2 [int 64] [int 64] 2 ([int 64] deref ([ref r_named_0_28554 [int 64]] var self)) ([int 64] deref ([ref r_named_0_28553 [int 64]] var other))) ([int 64] var __result)) 
associated_type 0 0 core_ops_Sub_Output 0 1 [uint 32] [uint 32] 
fn core_ops_uint__Sub_sub 0 0 args 2 self [uint 32] other [uint 32] return [uint 32] 1 core_ops_Sub_sub 0 1 [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiSub ([uint 32] var self) ([uint 32] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_28922 0 core_ops_Sub_Output 0 2 [uint 32] [ref r_named_0_28922 [uint 32]] [abstract core_ops_Sub_Output 0 2 [uint 32] [uint 32]] 
fn core_ops__x26_x27a_x20uint__Sub_sub 1 r_named_0_28922 0 args 2 self [ref r_named_0_28922 [uint 32]] other [uint 32] return [abstract core_ops_Sub_Output 0 2 [uint 32] [uint 32]] 1 core_ops_Sub_sub 0 2 [uint 32] [ref r_named_0_28922 [uint 32]] body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_ops_Sub_sub 0 2 [uint 32] [uint 32] 2 ([uint 32] deref ([ref r_named_0_28922 [uint 32]] var self)) ([uint 32] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_28964 0 core_ops_Sub_Output 0 2 [ref r_named_0_28964 [uint 32]] [uint 32] [abstract core_ops_Sub_Output 0 2 [uint 32] [uint 32]] 
fn core_ops_uint__Sub_sub 1 r_named_0_28964 0 args 2 self [uint 32] other [ref r_named_0_28964 [uint 32]] return [abstract core_ops_Sub_Output 0 2 [uint 32] [uint 32]] 1 core_ops_Sub_sub 0 2 [ref r_named_0_28964 [uint 32]] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_ops_Sub_sub 0 2 [uint 32] [uint 32] 2 ([uint 32] var self) ([uint 32] deref ([ref r_named_0_28964 [uint 32]] var other))) ([uint 32] var __result)) 
associated_type 2 r_named_0_29005 r_named_0_29006 0 core_ops_Sub_Output 0 2 [ref r_named_0_29005 [uint 32]] [ref r_named_0_29006 [uint 32]] [abstract core_ops_Sub_Output 0 2 [uint 32] [uint 32]] 
fn core_ops__x26_x27b_x20uint__Sub_sub 2 r_named_0_29005 r_named_0_29006 0 args 2 self [ref r_named_0_29006 [uint 32]] other [ref r_named_0_29005 [uint 32]] return [abstract core_ops_Sub_Output 0 2 [uint 32] [uint 32]] 1 core_ops_Sub_sub 0 2 [ref r_named_0_29005 [uint 32]] [ref r_named_0_29006 [uint 32]] body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_ops_Sub_sub 0 2 [uint 32] [uint 32] 2 ([uint 32] deref ([ref r_named_0_29006 [uint 32]] var self)) ([uint 32] deref ([ref r_named_0_29005 [uint 32]] var other))) ([uint 32] var __result)) 
associated_type 0 0 core_ops_Sub_Output 0 1 [uint 8] [uint 8] 
fn core_ops_u8__Sub_sub 0 0 args 2 self [uint 8] other [uint 8] return [uint 8] 1 core_ops_Sub_sub 0 1 [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] binop BiSub ([uint 8] var self) ([uint 8] var other)) ([uint 8] var __result)) 
associated_type 1 r_named_0_29067 0 core_ops_Sub_Output 0 2 [uint 8] [ref r_named_0_29067 [uint 8]] [abstract core_ops_Sub_Output 0 2 [uint 8] [uint 8]] 
fn core_ops__x26_x27a_x20u8__Sub_sub 1 r_named_0_29067 0 args 2 self [ref r_named_0_29067 [uint 8]] other [uint 8] return [abstract core_ops_Sub_Output 0 2 [uint 8] [uint 8]] 1 core_ops_Sub_sub 0 2 [uint 8] [ref r_named_0_29067 [uint 8]] body ([uint 8] block 1 let __result [uint 8] ([uint 8] call core_ops_Sub_sub 0 2 [uint 8] [uint 8] 2 ([uint 8] deref ([ref r_named_0_29067 [uint 8]] var self)) ([uint 8] var other)) ([uint 8] var __result)) 
associated_type 1 r_named_0_29109 0 core_ops_Sub_Output 0 2 [ref r_named_0_29109 [uint 8]] [uint 8] [abstract core_ops_Sub_Output 0 2 [uint 8] [uint 8]] 
fn core_ops_u8__Sub_sub 1 r_named_0_29109 0 args 2 self [uint 8] other [ref r_named_0_29109 [uint 8]] return [abstract core_ops_Sub_Output 0 2 [uint 8] [uint 8]] 1 core_ops_Sub_sub 0 2 [ref r_named_0_29109 [uint 8]] [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] call core_ops_Sub_sub 0 2 [uint 8] [uint 8] 2 ([uint 8] var self) ([uint 8] deref ([ref r_named_0_29109 [uint 8]] var other))) ([uint 8] var __result)) 
associated_type 2 r_named_0_29150 r_named_0_29151 0 core_ops_Sub_Output 0 2 [ref r_named_0_29150 [uint 8]] [ref r_named_0_29151 [uint 8]] [abstract core_ops_Sub_Output 0 2 [uint 8] [uint 8]] 
fn core_ops__x26_x27b_x20u8__Sub_sub 2 r_named_0_29150 r_named_0_29151 0 args 2 self [ref r_named_0_29151 [uint 8]] other [ref r_named_0_29150 [uint 8]] return [abstract core_ops_Sub_Output 0 2 [uint 8] [uint 8]] 1 core_ops_Sub_sub 0 2 [ref r_named_0_29150 [uint 8]] [ref r_named_0_29151 [uint 8]] body ([uint 8] block 1 let __result [uint 8] ([uint 8] call core_ops_Sub_sub 0 2 [uint 8] [uint 8] 2 ([uint 8] deref ([ref r_named_0_29151 [uint 8]] var self)) ([uint 8] deref ([ref r_named_0_29150 [uint 8]] var other))) ([uint 8] var __result)) 
associated_type 0 0 core_ops_Sub_Output 0 1 [uint 16] [uint 16] 
fn core_ops_u16__Sub_sub 0 0 args 2 self [uint 16] other [uint 16] return [uint 16] 1 core_ops_Sub_sub 0 1 [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] binop BiSub ([uint 16] var self) ([uint 16] var other)) ([uint 16] var __result)) 
associated_type 1 r_named_0_29212 0 core_ops_Sub_Output 0 2 [uint 16] [ref r_named_0_29212 [uint 16]] [abstract core_ops_Sub_Output 0 2 [uint 16] [uint 16]] 
fn core_ops__x26_x27a_x20u16__Sub_sub 1 r_named_0_29212 0 args 2 self [ref r_named_0_29212 [uint 16]] other [uint 16] return [abstract core_ops_Sub_Output 0 2 [uint 16] [uint 16]] 1 core_ops_Sub_sub 0 2 [uint 16] [ref r_named_0_29212 [uint 16]] body ([uint 16] block 1 let __result [uint 16] ([uint 16] call core_ops_Sub_sub 0 2 [uint 16] [uint 16] 2 ([uint 16] deref ([ref r_named_0_29212 [uint 16]] var self)) ([uint 16] var other)) ([uint 16] var __result)) 
associated_type 1 r_named_0_29254 0 core_ops_Sub_Output 0 2 [ref r_named_0_29254 [uint 16]] [uint 16] [abstract core_ops_Sub_Output 0 2 [uint 16] [uint 16]] 
fn core_ops_u16__Sub_sub 1 r_named_0_29254 0 args 2 self [uint 16] other [ref r_named_0_29254 [uint 16]] return [abstract core_ops_Sub_Output 0 2 [uint 16] [uint 16]] 1 core_ops_Sub_sub 0 2 [ref r_named_0_29254 [uint 16]] [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] call core_ops_Sub_sub 0 2 [uint 16] [uint 16] 2 ([uint 16] var self) ([uint 16] deref ([ref r_named_0_29254 [uint 16]] var other))) ([uint 16] var __result)) 
associated_type 2 r_named_0_29295 r_named_0_29296 0 core_ops_Sub_Output 0 2 [ref r_named_0_29295 [uint 16]] [ref r_named_0_29296 [uint 16]] [abstract core_ops_Sub_Output 0 2 [uint 16] [uint 16]] 
fn core_ops__x26_x27b_x20u16__Sub_sub 2 r_named_0_29295 r_named_0_29296 0 args 2 self [ref r_named_0_29296 [uint 16]] other [ref r_named_0_29295 [uint 16]] return [abstract core_ops_Sub_Output 0 2 [uint 16] [uint 16]] 1 core_ops_Sub_sub 0 2 [ref r_named_0_29295 [uint 16]] [ref r_named_0_29296 [uint 16]] body ([uint 16] block 1 let __result [uint 16] ([uint 16] call core_ops_Sub_sub 0 2 [uint 16] [uint 16] 2 ([uint 16] deref ([ref r_named_0_29296 [uint 16]] var self)) ([uint 16] deref ([ref r_named_0_29295 [uint 16]] var other))) ([uint 16] var __result)) 
associated_type 0 0 core_ops_Sub_Output 0 1 [uint 32] [uint 32] 
fn core_ops_u32__Sub_sub 0 0 args 2 self [uint 32] other [uint 32] return [uint 32] 1 core_ops_Sub_sub 0 1 [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiSub ([uint 32] var self) ([uint 32] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_29357 0 core_ops_Sub_Output 0 2 [uint 32] [ref r_named_0_29357 [uint 32]] [abstract core_ops_Sub_Output 0 2 [uint 32] [uint 32]] 
fn core_ops__x26_x27a_x20u32__Sub_sub 1 r_named_0_29357 0 args 2 self [ref r_named_0_29357 [uint 32]] other [uint 32] return [abstract core_ops_Sub_Output 0 2 [uint 32] [uint 32]] 1 core_ops_Sub_sub 0 2 [uint 32] [ref r_named_0_29357 [uint 32]] body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_ops_Sub_sub 0 2 [uint 32] [uint 32] 2 ([uint 32] deref ([ref r_named_0_29357 [uint 32]] var self)) ([uint 32] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_29399 0 core_ops_Sub_Output 0 2 [ref r_named_0_29399 [uint 32]] [uint 32] [abstract core_ops_Sub_Output 0 2 [uint 32] [uint 32]] 
fn core_ops_u32__Sub_sub 1 r_named_0_29399 0 args 2 self [uint 32] other [ref r_named_0_29399 [uint 32]] return [abstract core_ops_Sub_Output 0 2 [uint 32] [uint 32]] 1 core_ops_Sub_sub 0 2 [ref r_named_0_29399 [uint 32]] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_ops_Sub_sub 0 2 [uint 32] [uint 32] 2 ([uint 32] var self) ([uint 32] deref ([ref r_named_0_29399 [uint 32]] var other))) ([uint 32] var __result)) 
associated_type 2 r_named_0_29440 r_named_0_29441 0 core_ops_Sub_Output 0 2 [ref r_named_0_29440 [uint 32]] [ref r_named_0_29441 [uint 32]] [abstract core_ops_Sub_Output 0 2 [uint 32] [uint 32]] 
fn core_ops__x26_x27b_x20u32__Sub_sub 2 r_named_0_29440 r_named_0_29441 0 args 2 self [ref r_named_0_29441 [uint 32]] other [ref r_named_0_29440 [uint 32]] return [abstract core_ops_Sub_Output 0 2 [uint 32] [uint 32]] 1 core_ops_Sub_sub 0 2 [ref r_named_0_29440 [uint 32]] [ref r_named_0_29441 [uint 32]] body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_ops_Sub_sub 0 2 [uint 32] [uint 32] 2 ([uint 32] deref ([ref r_named_0_29441 [uint 32]] var self)) ([uint 32] deref ([ref r_named_0_29440 [uint 32]] var other))) ([uint 32] var __result)) 
associated_type 0 0 core_ops_Sub_Output 0 1 [uint 64] [uint 64] 
fn core_ops_u64__Sub_sub 0 0 args 2 self [uint 64] other [uint 64] return [uint 64] 1 core_ops_Sub_sub 0 1 [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] binop BiSub ([uint 64] var self) ([uint 64] var other)) ([uint 64] var __result)) 
associated_type 1 r_named_0_29502 0 core_ops_Sub_Output 0 2 [uint 64] [ref r_named_0_29502 [uint 64]] [abstract core_ops_Sub_Output 0 2 [uint 64] [uint 64]] 
fn core_ops__x26_x27a_x20u64__Sub_sub 1 r_named_0_29502 0 args 2 self [ref r_named_0_29502 [uint 64]] other [uint 64] return [abstract core_ops_Sub_Output 0 2 [uint 64] [uint 64]] 1 core_ops_Sub_sub 0 2 [uint 64] [ref r_named_0_29502 [uint 64]] body ([uint 64] block 1 let __result [uint 64] ([uint 64] call core_ops_Sub_sub 0 2 [uint 64] [uint 64] 2 ([uint 64] deref ([ref r_named_0_29502 [uint 64]] var self)) ([uint 64] var other)) ([uint 64] var __result)) 
associated_type 1 r_named_0_29544 0 core_ops_Sub_Output 0 2 [ref r_named_0_29544 [uint 64]] [uint 64] [abstract core_ops_Sub_Output 0 2 [uint 64] [uint 64]] 
fn core_ops_u64__Sub_sub 1 r_named_0_29544 0 args 2 self [uint 64] other [ref r_named_0_29544 [uint 64]] return [abstract core_ops_Sub_Output 0 2 [uint 64] [uint 64]] 1 core_ops_Sub_sub 0 2 [ref r_named_0_29544 [uint 64]] [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] call core_ops_Sub_sub 0 2 [uint 64] [uint 64] 2 ([uint 64] var self) ([uint 64] deref ([ref r_named_0_29544 [uint 64]] var other))) ([uint 64] var __result)) 
associated_type 2 r_named_0_29585 r_named_0_29586 0 core_ops_Sub_Output 0 2 [ref r_named_0_29585 [uint 64]] [ref r_named_0_29586 [uint 64]] [abstract core_ops_Sub_Output 0 2 [uint 64] [uint 64]] 
fn core_ops__x26_x27b_x20u64__Sub_sub 2 r_named_0_29585 r_named_0_29586 0 args 2 self [ref r_named_0_29586 [uint 64]] other [ref r_named_0_29585 [uint 64]] return [abstract core_ops_Sub_Output 0 2 [uint 64] [uint 64]] 1 core_ops_Sub_sub 0 2 [ref r_named_0_29585 [uint 64]] [ref r_named_0_29586 [uint 64]] body ([uint 64] block 1 let __result [uint 64] ([uint 64] call core_ops_Sub_sub 0 2 [uint 64] [uint 64] 2 ([uint 64] deref ([ref r_named_0_29586 [uint 64]] var self)) ([uint 64] deref ([ref r_named_0_29585 [uint 64]] var other))) ([uint 64] var __result)) 
associated_type 0 0 core_ops_Sub_Output 0 1 [int 32] [int 32] 
fn core_ops_int__Sub_sub 0 0 args 2 self [int 32] other [int 32] return [int 32] 1 core_ops_Sub_sub 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiSub ([int 32] var self) ([int 32] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_29647 0 core_ops_Sub_Output 0 2 [int 32] [ref r_named_0_29647 [int 32]] [abstract core_ops_Sub_Output 0 2 [int 32] [int 32]] 
fn core_ops__x26_x27a_x20int__Sub_sub 1 r_named_0_29647 0 args 2 self [ref r_named_0_29647 [int 32]] other [int 32] return [abstract core_ops_Sub_Output 0 2 [int 32] [int 32]] 1 core_ops_Sub_sub 0 2 [int 32] [ref r_named_0_29647 [int 32]] body ([int 32] block 1 let __result [int 32] ([int 32] call core_ops_Sub_sub 0 2 [int 32] [int 32] 2 ([int 32] deref ([ref r_named_0_29647 [int 32]] var self)) ([int 32] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_29689 0 core_ops_Sub_Output 0 2 [ref r_named_0_29689 [int 32]] [int 32] [abstract core_ops_Sub_Output 0 2 [int 32] [int 32]] 
fn core_ops_int__Sub_sub 1 r_named_0_29689 0 args 2 self [int 32] other [ref r_named_0_29689 [int 32]] return [abstract core_ops_Sub_Output 0 2 [int 32] [int 32]] 1 core_ops_Sub_sub 0 2 [ref r_named_0_29689 [int 32]] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] call core_ops_Sub_sub 0 2 [int 32] [int 32] 2 ([int 32] var self) ([int 32] deref ([ref r_named_0_29689 [int 32]] var other))) ([int 32] var __result)) 
associated_type 2 r_named_0_29730 r_named_0_29731 0 core_ops_Sub_Output 0 2 [ref r_named_0_29730 [int 32]] [ref r_named_0_29731 [int 32]] [abstract core_ops_Sub_Output 0 2 [int 32] [int 32]] 
fn core_ops__x26_x27b_x20int__Sub_sub 2 r_named_0_29730 r_named_0_29731 0 args 2 self [ref r_named_0_29731 [int 32]] other [ref r_named_0_29730 [int 32]] return [abstract core_ops_Sub_Output 0 2 [int 32] [int 32]] 1 core_ops_Sub_sub 0 2 [ref r_named_0_29730 [int 32]] [ref r_named_0_29731 [int 32]] body ([int 32] block 1 let __result [int 32] ([int 32] call core_ops_Sub_sub 0 2 [int 32] [int 32] 2 ([int 32] deref ([ref r_named_0_29731 [int 32]] var self)) ([int 32] deref ([ref r_named_0_29730 [int 32]] var other))) ([int 32] var __result)) 
associated_type 0 0 core_ops_Sub_Output 0 1 [int 8] [int 8] 
fn core_ops_i8__Sub_sub 0 0 args 2 self [int 8] other [int 8] return [int 8] 1 core_ops_Sub_sub 0 1 [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] binop BiSub ([int 8] var self) ([int 8] var other)) ([int 8] var __result)) 
associated_type 1 r_named_0_29792 0 core_ops_Sub_Output 0 2 [int 8] [ref r_named_0_29792 [int 8]] [abstract core_ops_Sub_Output 0 2 [int 8] [int 8]] 
fn core_ops__x26_x27a_x20i8__Sub_sub 1 r_named_0_29792 0 args 2 self [ref r_named_0_29792 [int 8]] other [int 8] return [abstract core_ops_Sub_Output 0 2 [int 8] [int 8]] 1 core_ops_Sub_sub 0 2 [int 8] [ref r_named_0_29792 [int 8]] body ([int 8] block 1 let __result [int 8] ([int 8] call core_ops_Sub_sub 0 2 [int 8] [int 8] 2 ([int 8] deref ([ref r_named_0_29792 [int 8]] var self)) ([int 8] var other)) ([int 8] var __result)) 
associated_type 1 r_named_0_29834 0 core_ops_Sub_Output 0 2 [ref r_named_0_29834 [int 8]] [int 8] [abstract core_ops_Sub_Output 0 2 [int 8] [int 8]] 
fn core_ops_i8__Sub_sub 1 r_named_0_29834 0 args 2 self [int 8] other [ref r_named_0_29834 [int 8]] return [abstract core_ops_Sub_Output 0 2 [int 8] [int 8]] 1 core_ops_Sub_sub 0 2 [ref r_named_0_29834 [int 8]] [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] call core_ops_Sub_sub 0 2 [int 8] [int 8] 2 ([int 8] var self) ([int 8] deref ([ref r_named_0_29834 [int 8]] var other))) ([int 8] var __result)) 
associated_type 2 r_named_0_29875 r_named_0_29876 0 core_ops_Sub_Output 0 2 [ref r_named_0_29875 [int 8]] [ref r_named_0_29876 [int 8]] [abstract core_ops_Sub_Output 0 2 [int 8] [int 8]] 
fn core_ops__x26_x27b_x20i8__Sub_sub 2 r_named_0_29875 r_named_0_29876 0 args 2 self [ref r_named_0_29876 [int 8]] other [ref r_named_0_29875 [int 8]] return [abstract core_ops_Sub_Output 0 2 [int 8] [int 8]] 1 core_ops_Sub_sub 0 2 [ref r_named_0_29875 [int 8]] [ref r_named_0_29876 [int 8]] body ([int 8] block 1 let __result [int 8] ([int 8] call core_ops_Sub_sub 0 2 [int 8] [int 8] 2 ([int 8] deref ([ref r_named_0_29876 [int 8]] var self)) ([int 8] deref ([ref r_named_0_29875 [int 8]] var other))) ([int 8] var __result)) 
associated_type 0 0 core_ops_Sub_Output 0 1 [int 16] [int 16] 
fn core_ops_i16__Sub_sub 0 0 args 2 self [int 16] other [int 16] return [int 16] 1 core_ops_Sub_sub 0 1 [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] binop BiSub ([int 16] var self) ([int 16] var other)) ([int 16] var __result)) 
associated_type 1 r_named_0_29937 0 core_ops_Sub_Output 0 2 [int 16] [ref r_named_0_29937 [int 16]] [abstract core_ops_Sub_Output 0 2 [int 16] [int 16]] 
fn core_ops__x26_x27a_x20i16__Sub_sub 1 r_named_0_29937 0 args 2 self [ref r_named_0_29937 [int 16]] other [int 16] return [abstract core_ops_Sub_Output 0 2 [int 16] [int 16]] 1 core_ops_Sub_sub 0 2 [int 16] [ref r_named_0_29937 [int 16]] body ([int 16] block 1 let __result [int 16] ([int 16] call core_ops_Sub_sub 0 2 [int 16] [int 16] 2 ([int 16] deref ([ref r_named_0_29937 [int 16]] var self)) ([int 16] var other)) ([int 16] var __result)) 
associated_type 1 r_named_0_29979 0 core_ops_Sub_Output 0 2 [ref r_named_0_29979 [int 16]] [int 16] [abstract core_ops_Sub_Output 0 2 [int 16] [int 16]] 
fn core_ops_i16__Sub_sub 1 r_named_0_29979 0 args 2 self [int 16] other [ref r_named_0_29979 [int 16]] return [abstract core_ops_Sub_Output 0 2 [int 16] [int 16]] 1 core_ops_Sub_sub 0 2 [ref r_named_0_29979 [int 16]] [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] call core_ops_Sub_sub 0 2 [int 16] [int 16] 2 ([int 16] var self) ([int 16] deref ([ref r_named_0_29979 [int 16]] var other))) ([int 16] var __result)) 
associated_type 2 r_named_0_30020 r_named_0_30021 0 core_ops_Sub_Output 0 2 [ref r_named_0_30020 [int 16]] [ref r_named_0_30021 [int 16]] [abstract core_ops_Sub_Output 0 2 [int 16] [int 16]] 
fn core_ops__x26_x27b_x20i16__Sub_sub 2 r_named_0_30020 r_named_0_30021 0 args 2 self [ref r_named_0_30021 [int 16]] other [ref r_named_0_30020 [int 16]] return [abstract core_ops_Sub_Output 0 2 [int 16] [int 16]] 1 core_ops_Sub_sub 0 2 [ref r_named_0_30020 [int 16]] [ref r_named_0_30021 [int 16]] body ([int 16] block 1 let __result [int 16] ([int 16] call core_ops_Sub_sub 0 2 [int 16] [int 16] 2 ([int 16] deref ([ref r_named_0_30021 [int 16]] var self)) ([int 16] deref ([ref r_named_0_30020 [int 16]] var other))) ([int 16] var __result)) 
associated_type 0 0 core_ops_Sub_Output 0 1 [int 32] [int 32] 
fn core_ops_i32__Sub_sub 0 0 args 2 self [int 32] other [int 32] return [int 32] 1 core_ops_Sub_sub 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiSub ([int 32] var self) ([int 32] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_30082 0 core_ops_Sub_Output 0 2 [int 32] [ref r_named_0_30082 [int 32]] [abstract core_ops_Sub_Output 0 2 [int 32] [int 32]] 
fn core_ops__x26_x27a_x20i32__Sub_sub 1 r_named_0_30082 0 args 2 self [ref r_named_0_30082 [int 32]] other [int 32] return [abstract core_ops_Sub_Output 0 2 [int 32] [int 32]] 1 core_ops_Sub_sub 0 2 [int 32] [ref r_named_0_30082 [int 32]] body ([int 32] block 1 let __result [int 32] ([int 32] call core_ops_Sub_sub 0 2 [int 32] [int 32] 2 ([int 32] deref ([ref r_named_0_30082 [int 32]] var self)) ([int 32] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_30124 0 core_ops_Sub_Output 0 2 [ref r_named_0_30124 [int 32]] [int 32] [abstract core_ops_Sub_Output 0 2 [int 32] [int 32]] 
fn core_ops_i32__Sub_sub 1 r_named_0_30124 0 args 2 self [int 32] other [ref r_named_0_30124 [int 32]] return [abstract core_ops_Sub_Output 0 2 [int 32] [int 32]] 1 core_ops_Sub_sub 0 2 [ref r_named_0_30124 [int 32]] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] call core_ops_Sub_sub 0 2 [int 32] [int 32] 2 ([int 32] var self) ([int 32] deref ([ref r_named_0_30124 [int 32]] var other))) ([int 32] var __result)) 
associated_type 2 r_named_0_30165 r_named_0_30166 0 core_ops_Sub_Output 0 2 [ref r_named_0_30165 [int 32]] [ref r_named_0_30166 [int 32]] [abstract core_ops_Sub_Output 0 2 [int 32] [int 32]] 
fn core_ops__x26_x27b_x20i32__Sub_sub 2 r_named_0_30165 r_named_0_30166 0 args 2 self [ref r_named_0_30166 [int 32]] other [ref r_named_0_30165 [int 32]] return [abstract core_ops_Sub_Output 0 2 [int 32] [int 32]] 1 core_ops_Sub_sub 0 2 [ref r_named_0_30165 [int 32]] [ref r_named_0_30166 [int 32]] body ([int 32] block 1 let __result [int 32] ([int 32] call core_ops_Sub_sub 0 2 [int 32] [int 32] 2 ([int 32] deref ([ref r_named_0_30166 [int 32]] var self)) ([int 32] deref ([ref r_named_0_30165 [int 32]] var other))) ([int 32] var __result)) 
associated_type 0 0 core_ops_Sub_Output 0 1 [int 64] [int 64] 
fn core_ops_i64__Sub_sub 0 0 args 2 self [int 64] other [int 64] return [int 64] 1 core_ops_Sub_sub 0 1 [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] binop BiSub ([int 64] var self) ([int 64] var other)) ([int 64] var __result)) 
associated_type 1 r_named_0_30227 0 core_ops_Sub_Output 0 2 [int 64] [ref r_named_0_30227 [int 64]] [abstract core_ops_Sub_Output 0 2 [int 64] [int 64]] 
fn core_ops__x26_x27a_x20i64__Sub_sub 1 r_named_0_30227 0 args 2 self [ref r_named_0_30227 [int 64]] other [int 64] return [abstract core_ops_Sub_Output 0 2 [int 64] [int 64]] 1 core_ops_Sub_sub 0 2 [int 64] [ref r_named_0_30227 [int 64]] body ([int 64] block 1 let __result [int 64] ([int 64] call core_ops_Sub_sub 0 2 [int 64] [int 64] 2 ([int 64] deref ([ref r_named_0_30227 [int 64]] var self)) ([int 64] var other)) ([int 64] var __result)) 
associated_type 1 r_named_0_30269 0 core_ops_Sub_Output 0 2 [ref r_named_0_30269 [int 64]] [int 64] [abstract core_ops_Sub_Output 0 2 [int 64] [int 64]] 
fn core_ops_i64__Sub_sub 1 r_named_0_30269 0 args 2 self [int 64] other [ref r_named_0_30269 [int 64]] return [abstract core_ops_Sub_Output 0 2 [int 64] [int 64]] 1 core_ops_Sub_sub 0 2 [ref r_named_0_30269 [int 64]] [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] call core_ops_Sub_sub 0 2 [int 64] [int 64] 2 ([int 64] var self) ([int 64] deref ([ref r_named_0_30269 [int 64]] var other))) ([int 64] var __result)) 
associated_type 2 r_named_0_30310 r_named_0_30311 0 core_ops_Sub_Output 0 2 [ref r_named_0_30310 [int 64]] [ref r_named_0_30311 [int 64]] [abstract core_ops_Sub_Output 0 2 [int 64] [int 64]] 
fn core_ops__x26_x27b_x20i64__Sub_sub 2 r_named_0_30310 r_named_0_30311 0 args 2 self [ref r_named_0_30311 [int 64]] other [ref r_named_0_30310 [int 64]] return [abstract core_ops_Sub_Output 0 2 [int 64] [int 64]] 1 core_ops_Sub_sub 0 2 [ref r_named_0_30310 [int 64]] [ref r_named_0_30311 [int 64]] body ([int 64] block 1 let __result [int 64] ([int 64] call core_ops_Sub_sub 0 2 [int 64] [int 64] 2 ([int 64] deref ([ref r_named_0_30311 [int 64]] var self)) ([int 64] deref ([ref r_named_0_30310 [int 64]] var other))) ([int 64] var __result)) 
associated_type 0 0 core_ops_Mul_Output 0 1 [uint 32] [uint 32] 
fn core_ops_uint__Mul_mul 0 0 args 2 self [uint 32] other [uint 32] return [uint 32] 1 core_ops_Mul_mul 0 1 [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiMul ([uint 32] var self) ([uint 32] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_30679 0 core_ops_Mul_Output 0 2 [uint 32] [ref r_named_0_30679 [uint 32]] [abstract core_ops_Mul_Output 0 2 [uint 32] [uint 32]] 
associated_type 1 r_named_0_30721 0 core_ops_Mul_Output 0 2 [ref r_named_0_30721 [uint 32]] [uint 32] [abstract core_ops_Mul_Output 0 2 [uint 32] [uint 32]] 
associated_type 2 r_named_0_30762 r_named_0_30763 0 core_ops_Mul_Output 0 2 [ref r_named_0_30762 [uint 32]] [ref r_named_0_30763 [uint 32]] [abstract core_ops_Mul_Output 0 2 [uint 32] [uint 32]] 
associated_type 0 0 core_ops_Mul_Output 0 1 [uint 8] [uint 8] 
fn core_ops_u8__Mul_mul 0 0 args 2 self [uint 8] other [uint 8] return [uint 8] 1 core_ops_Mul_mul 0 1 [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] binop BiMul ([uint 8] var self) ([uint 8] var other)) ([uint 8] var __result)) 
associated_type 1 r_named_0_30824 0 core_ops_Mul_Output 0 2 [uint 8] [ref r_named_0_30824 [uint 8]] [abstract core_ops_Mul_Output 0 2 [uint 8] [uint 8]] 
associated_type 1 r_named_0_30866 0 core_ops_Mul_Output 0 2 [ref r_named_0_30866 [uint 8]] [uint 8] [abstract core_ops_Mul_Output 0 2 [uint 8] [uint 8]] 
associated_type 2 r_named_0_30907 r_named_0_30908 0 core_ops_Mul_Output 0 2 [ref r_named_0_30907 [uint 8]] [ref r_named_0_30908 [uint 8]] [abstract core_ops_Mul_Output 0 2 [uint 8] [uint 8]] 
associated_type 0 0 core_ops_Mul_Output 0 1 [uint 16] [uint 16] 
fn core_ops_u16__Mul_mul 0 0 args 2 self [uint 16] other [uint 16] return [uint 16] 1 core_ops_Mul_mul 0 1 [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] binop BiMul ([uint 16] var self) ([uint 16] var other)) ([uint 16] var __result)) 
associated_type 1 r_named_0_30969 0 core_ops_Mul_Output 0 2 [uint 16] [ref r_named_0_30969 [uint 16]] [abstract core_ops_Mul_Output 0 2 [uint 16] [uint 16]] 
associated_type 1 r_named_0_31011 0 core_ops_Mul_Output 0 2 [ref r_named_0_31011 [uint 16]] [uint 16] [abstract core_ops_Mul_Output 0 2 [uint 16] [uint 16]] 
associated_type 2 r_named_0_31052 r_named_0_31053 0 core_ops_Mul_Output 0 2 [ref r_named_0_31052 [uint 16]] [ref r_named_0_31053 [uint 16]] [abstract core_ops_Mul_Output 0 2 [uint 16] [uint 16]] 
associated_type 0 0 core_ops_Mul_Output 0 1 [uint 32] [uint 32] 
fn core_ops_u32__Mul_mul 0 0 args 2 self [uint 32] other [uint 32] return [uint 32] 1 core_ops_Mul_mul 0 1 [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiMul ([uint 32] var self) ([uint 32] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_31114 0 core_ops_Mul_Output 0 2 [uint 32] [ref r_named_0_31114 [uint 32]] [abstract core_ops_Mul_Output 0 2 [uint 32] [uint 32]] 
associated_type 1 r_named_0_31156 0 core_ops_Mul_Output 0 2 [ref r_named_0_31156 [uint 32]] [uint 32] [abstract core_ops_Mul_Output 0 2 [uint 32] [uint 32]] 
associated_type 2 r_named_0_31197 r_named_0_31198 0 core_ops_Mul_Output 0 2 [ref r_named_0_31197 [uint 32]] [ref r_named_0_31198 [uint 32]] [abstract core_ops_Mul_Output 0 2 [uint 32] [uint 32]] 
associated_type 0 0 core_ops_Mul_Output 0 1 [uint 64] [uint 64] 
fn core_ops_u64__Mul_mul 0 0 args 2 self [uint 64] other [uint 64] return [uint 64] 1 core_ops_Mul_mul 0 1 [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] binop BiMul ([uint 64] var self) ([uint 64] var other)) ([uint 64] var __result)) 
associated_type 1 r_named_0_31259 0 core_ops_Mul_Output 0 2 [uint 64] [ref r_named_0_31259 [uint 64]] [abstract core_ops_Mul_Output 0 2 [uint 64] [uint 64]] 
associated_type 1 r_named_0_31301 0 core_ops_Mul_Output 0 2 [ref r_named_0_31301 [uint 64]] [uint 64] [abstract core_ops_Mul_Output 0 2 [uint 64] [uint 64]] 
associated_type 2 r_named_0_31342 r_named_0_31343 0 core_ops_Mul_Output 0 2 [ref r_named_0_31342 [uint 64]] [ref r_named_0_31343 [uint 64]] [abstract core_ops_Mul_Output 0 2 [uint 64] [uint 64]] 
associated_type 0 0 core_ops_Mul_Output 0 1 [int 32] [int 32] 
fn core_ops_int__Mul_mul 0 0 args 2 self [int 32] other [int 32] return [int 32] 1 core_ops_Mul_mul 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiMul ([int 32] var self) ([int 32] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_31404 0 core_ops_Mul_Output 0 2 [int 32] [ref r_named_0_31404 [int 32]] [abstract core_ops_Mul_Output 0 2 [int 32] [int 32]] 
associated_type 1 r_named_0_31446 0 core_ops_Mul_Output 0 2 [ref r_named_0_31446 [int 32]] [int 32] [abstract core_ops_Mul_Output 0 2 [int 32] [int 32]] 
associated_type 2 r_named_0_31487 r_named_0_31488 0 core_ops_Mul_Output 0 2 [ref r_named_0_31487 [int 32]] [ref r_named_0_31488 [int 32]] [abstract core_ops_Mul_Output 0 2 [int 32] [int 32]] 
associated_type 0 0 core_ops_Mul_Output 0 1 [int 8] [int 8] 
fn core_ops_i8__Mul_mul 0 0 args 2 self [int 8] other [int 8] return [int 8] 1 core_ops_Mul_mul 0 1 [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] binop BiMul ([int 8] var self) ([int 8] var other)) ([int 8] var __result)) 
associated_type 1 r_named_0_31549 0 core_ops_Mul_Output 0 2 [int 8] [ref r_named_0_31549 [int 8]] [abstract core_ops_Mul_Output 0 2 [int 8] [int 8]] 
associated_type 1 r_named_0_31591 0 core_ops_Mul_Output 0 2 [ref r_named_0_31591 [int 8]] [int 8] [abstract core_ops_Mul_Output 0 2 [int 8] [int 8]] 
associated_type 2 r_named_0_31632 r_named_0_31633 0 core_ops_Mul_Output 0 2 [ref r_named_0_31632 [int 8]] [ref r_named_0_31633 [int 8]] [abstract core_ops_Mul_Output 0 2 [int 8] [int 8]] 
associated_type 0 0 core_ops_Mul_Output 0 1 [int 16] [int 16] 
fn core_ops_i16__Mul_mul 0 0 args 2 self [int 16] other [int 16] return [int 16] 1 core_ops_Mul_mul 0 1 [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] binop BiMul ([int 16] var self) ([int 16] var other)) ([int 16] var __result)) 
associated_type 1 r_named_0_31694 0 core_ops_Mul_Output 0 2 [int 16] [ref r_named_0_31694 [int 16]] [abstract core_ops_Mul_Output 0 2 [int 16] [int 16]] 
associated_type 1 r_named_0_31736 0 core_ops_Mul_Output 0 2 [ref r_named_0_31736 [int 16]] [int 16] [abstract core_ops_Mul_Output 0 2 [int 16] [int 16]] 
associated_type 2 r_named_0_31777 r_named_0_31778 0 core_ops_Mul_Output 0 2 [ref r_named_0_31777 [int 16]] [ref r_named_0_31778 [int 16]] [abstract core_ops_Mul_Output 0 2 [int 16] [int 16]] 
associated_type 0 0 core_ops_Mul_Output 0 1 [int 32] [int 32] 
fn core_ops_i32__Mul_mul 0 0 args 2 self [int 32] other [int 32] return [int 32] 1 core_ops_Mul_mul 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiMul ([int 32] var self) ([int 32] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_31839 0 core_ops_Mul_Output 0 2 [int 32] [ref r_named_0_31839 [int 32]] [abstract core_ops_Mul_Output 0 2 [int 32] [int 32]] 
associated_type 1 r_named_0_31881 0 core_ops_Mul_Output 0 2 [ref r_named_0_31881 [int 32]] [int 32] [abstract core_ops_Mul_Output 0 2 [int 32] [int 32]] 
associated_type 2 r_named_0_31922 r_named_0_31923 0 core_ops_Mul_Output 0 2 [ref r_named_0_31922 [int 32]] [ref r_named_0_31923 [int 32]] [abstract core_ops_Mul_Output 0 2 [int 32] [int 32]] 
associated_type 0 0 core_ops_Mul_Output 0 1 [int 64] [int 64] 
fn core_ops_i64__Mul_mul 0 0 args 2 self [int 64] other [int 64] return [int 64] 1 core_ops_Mul_mul 0 1 [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] binop BiMul ([int 64] var self) ([int 64] var other)) ([int 64] var __result)) 
associated_type 1 r_named_0_31984 0 core_ops_Mul_Output 0 2 [int 64] [ref r_named_0_31984 [int 64]] [abstract core_ops_Mul_Output 0 2 [int 64] [int 64]] 
associated_type 1 r_named_0_32026 0 core_ops_Mul_Output 0 2 [ref r_named_0_32026 [int 64]] [int 64] [abstract core_ops_Mul_Output 0 2 [int 64] [int 64]] 
associated_type 2 r_named_0_32067 r_named_0_32068 0 core_ops_Mul_Output 0 2 [ref r_named_0_32067 [int 64]] [ref r_named_0_32068 [int 64]] [abstract core_ops_Mul_Output 0 2 [int 64] [int 64]] 
associated_type 0 0 core_ops_Div_Output 0 1 [uint 32] [uint 32] 
fn core_ops_uint__Div_div 0 0 args 2 self [uint 32] other [uint 32] return [uint 32] 1 core_ops_Div_div 0 1 [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiDiv ([uint 32] var self) ([uint 32] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_32436 0 core_ops_Div_Output 0 2 [uint 32] [ref r_named_0_32436 [uint 32]] [abstract core_ops_Div_Output 0 2 [uint 32] [uint 32]] 
associated_type 1 r_named_0_32478 0 core_ops_Div_Output 0 2 [ref r_named_0_32478 [uint 32]] [uint 32] [abstract core_ops_Div_Output 0 2 [uint 32] [uint 32]] 
associated_type 2 r_named_0_32519 r_named_0_32520 0 core_ops_Div_Output 0 2 [ref r_named_0_32519 [uint 32]] [ref r_named_0_32520 [uint 32]] [abstract core_ops_Div_Output 0 2 [uint 32] [uint 32]] 
associated_type 0 0 core_ops_Div_Output 0 1 [uint 8] [uint 8] 
fn core_ops_u8__Div_div 0 0 args 2 self [uint 8] other [uint 8] return [uint 8] 1 core_ops_Div_div 0 1 [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] binop BiDiv ([uint 8] var self) ([uint 8] var other)) ([uint 8] var __result)) 
associated_type 1 r_named_0_32581 0 core_ops_Div_Output 0 2 [uint 8] [ref r_named_0_32581 [uint 8]] [abstract core_ops_Div_Output 0 2 [uint 8] [uint 8]] 
associated_type 1 r_named_0_32623 0 core_ops_Div_Output 0 2 [ref r_named_0_32623 [uint 8]] [uint 8] [abstract core_ops_Div_Output 0 2 [uint 8] [uint 8]] 
associated_type 2 r_named_0_32664 r_named_0_32665 0 core_ops_Div_Output 0 2 [ref r_named_0_32664 [uint 8]] [ref r_named_0_32665 [uint 8]] [abstract core_ops_Div_Output 0 2 [uint 8] [uint 8]] 
associated_type 0 0 core_ops_Div_Output 0 1 [uint 16] [uint 16] 
fn core_ops_u16__Div_div 0 0 args 2 self [uint 16] other [uint 16] return [uint 16] 1 core_ops_Div_div 0 1 [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] binop BiDiv ([uint 16] var self) ([uint 16] var other)) ([uint 16] var __result)) 
associated_type 1 r_named_0_32726 0 core_ops_Div_Output 0 2 [uint 16] [ref r_named_0_32726 [uint 16]] [abstract core_ops_Div_Output 0 2 [uint 16] [uint 16]] 
associated_type 1 r_named_0_32768 0 core_ops_Div_Output 0 2 [ref r_named_0_32768 [uint 16]] [uint 16] [abstract core_ops_Div_Output 0 2 [uint 16] [uint 16]] 
associated_type 2 r_named_0_32809 r_named_0_32810 0 core_ops_Div_Output 0 2 [ref r_named_0_32809 [uint 16]] [ref r_named_0_32810 [uint 16]] [abstract core_ops_Div_Output 0 2 [uint 16] [uint 16]] 
associated_type 0 0 core_ops_Div_Output 0 1 [uint 32] [uint 32] 
fn core_ops_u32__Div_div 0 0 args 2 self [uint 32] other [uint 32] return [uint 32] 1 core_ops_Div_div 0 1 [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiDiv ([uint 32] var self) ([uint 32] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_32871 0 core_ops_Div_Output 0 2 [uint 32] [ref r_named_0_32871 [uint 32]] [abstract core_ops_Div_Output 0 2 [uint 32] [uint 32]] 
associated_type 1 r_named_0_32913 0 core_ops_Div_Output 0 2 [ref r_named_0_32913 [uint 32]] [uint 32] [abstract core_ops_Div_Output 0 2 [uint 32] [uint 32]] 
associated_type 2 r_named_0_32954 r_named_0_32955 0 core_ops_Div_Output 0 2 [ref r_named_0_32954 [uint 32]] [ref r_named_0_32955 [uint 32]] [abstract core_ops_Div_Output 0 2 [uint 32] [uint 32]] 
associated_type 0 0 core_ops_Div_Output 0 1 [uint 64] [uint 64] 
fn core_ops_u64__Div_div 0 0 args 2 self [uint 64] other [uint 64] return [uint 64] 1 core_ops_Div_div 0 1 [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] binop BiDiv ([uint 64] var self) ([uint 64] var other)) ([uint 64] var __result)) 
associated_type 1 r_named_0_33016 0 core_ops_Div_Output 0 2 [uint 64] [ref r_named_0_33016 [uint 64]] [abstract core_ops_Div_Output 0 2 [uint 64] [uint 64]] 
associated_type 1 r_named_0_33058 0 core_ops_Div_Output 0 2 [ref r_named_0_33058 [uint 64]] [uint 64] [abstract core_ops_Div_Output 0 2 [uint 64] [uint 64]] 
associated_type 2 r_named_0_33099 r_named_0_33100 0 core_ops_Div_Output 0 2 [ref r_named_0_33099 [uint 64]] [ref r_named_0_33100 [uint 64]] [abstract core_ops_Div_Output 0 2 [uint 64] [uint 64]] 
associated_type 0 0 core_ops_Div_Output 0 1 [int 32] [int 32] 
fn core_ops_int__Div_div 0 0 args 2 self [int 32] other [int 32] return [int 32] 1 core_ops_Div_div 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiDiv ([int 32] var self) ([int 32] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_33161 0 core_ops_Div_Output 0 2 [int 32] [ref r_named_0_33161 [int 32]] [abstract core_ops_Div_Output 0 2 [int 32] [int 32]] 
associated_type 1 r_named_0_33203 0 core_ops_Div_Output 0 2 [ref r_named_0_33203 [int 32]] [int 32] [abstract core_ops_Div_Output 0 2 [int 32] [int 32]] 
associated_type 2 r_named_0_33244 r_named_0_33245 0 core_ops_Div_Output 0 2 [ref r_named_0_33244 [int 32]] [ref r_named_0_33245 [int 32]] [abstract core_ops_Div_Output 0 2 [int 32] [int 32]] 
associated_type 0 0 core_ops_Div_Output 0 1 [int 8] [int 8] 
fn core_ops_i8__Div_div 0 0 args 2 self [int 8] other [int 8] return [int 8] 1 core_ops_Div_div 0 1 [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] binop BiDiv ([int 8] var self) ([int 8] var other)) ([int 8] var __result)) 
associated_type 1 r_named_0_33306 0 core_ops_Div_Output 0 2 [int 8] [ref r_named_0_33306 [int 8]] [abstract core_ops_Div_Output 0 2 [int 8] [int 8]] 
associated_type 1 r_named_0_33348 0 core_ops_Div_Output 0 2 [ref r_named_0_33348 [int 8]] [int 8] [abstract core_ops_Div_Output 0 2 [int 8] [int 8]] 
associated_type 2 r_named_0_33389 r_named_0_33390 0 core_ops_Div_Output 0 2 [ref r_named_0_33389 [int 8]] [ref r_named_0_33390 [int 8]] [abstract core_ops_Div_Output 0 2 [int 8] [int 8]] 
associated_type 0 0 core_ops_Div_Output 0 1 [int 16] [int 16] 
fn core_ops_i16__Div_div 0 0 args 2 self [int 16] other [int 16] return [int 16] 1 core_ops_Div_div 0 1 [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] binop BiDiv ([int 16] var self) ([int 16] var other)) ([int 16] var __result)) 
associated_type 1 r_named_0_33451 0 core_ops_Div_Output 0 2 [int 16] [ref r_named_0_33451 [int 16]] [abstract core_ops_Div_Output 0 2 [int 16] [int 16]] 
associated_type 1 r_named_0_33493 0 core_ops_Div_Output 0 2 [ref r_named_0_33493 [int 16]] [int 16] [abstract core_ops_Div_Output 0 2 [int 16] [int 16]] 
associated_type 2 r_named_0_33534 r_named_0_33535 0 core_ops_Div_Output 0 2 [ref r_named_0_33534 [int 16]] [ref r_named_0_33535 [int 16]] [abstract core_ops_Div_Output 0 2 [int 16] [int 16]] 
associated_type 0 0 core_ops_Div_Output 0 1 [int 32] [int 32] 
fn core_ops_i32__Div_div 0 0 args 2 self [int 32] other [int 32] return [int 32] 1 core_ops_Div_div 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiDiv ([int 32] var self) ([int 32] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_33596 0 core_ops_Div_Output 0 2 [int 32] [ref r_named_0_33596 [int 32]] [abstract core_ops_Div_Output 0 2 [int 32] [int 32]] 
associated_type 1 r_named_0_33638 0 core_ops_Div_Output 0 2 [ref r_named_0_33638 [int 32]] [int 32] [abstract core_ops_Div_Output 0 2 [int 32] [int 32]] 
associated_type 2 r_named_0_33679 r_named_0_33680 0 core_ops_Div_Output 0 2 [ref r_named_0_33679 [int 32]] [ref r_named_0_33680 [int 32]] [abstract core_ops_Div_Output 0 2 [int 32] [int 32]] 
associated_type 0 0 core_ops_Div_Output 0 1 [int 64] [int 64] 
fn core_ops_i64__Div_div 0 0 args 2 self [int 64] other [int 64] return [int 64] 1 core_ops_Div_div 0 1 [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] binop BiDiv ([int 64] var self) ([int 64] var other)) ([int 64] var __result)) 
associated_type 1 r_named_0_33741 0 core_ops_Div_Output 0 2 [int 64] [ref r_named_0_33741 [int 64]] [abstract core_ops_Div_Output 0 2 [int 64] [int 64]] 
associated_type 1 r_named_0_33783 0 core_ops_Div_Output 0 2 [ref r_named_0_33783 [int 64]] [int 64] [abstract core_ops_Div_Output 0 2 [int 64] [int 64]] 
associated_type 2 r_named_0_33824 r_named_0_33825 0 core_ops_Div_Output 0 2 [ref r_named_0_33824 [int 64]] [ref r_named_0_33825 [int 64]] [abstract core_ops_Div_Output 0 2 [int 64] [int 64]] 
associated_type 0 0 core_ops_Rem_Output 0 1 [uint 32] [uint 32] 
fn core_ops_uint__Rem_rem 0 0 args 2 self [uint 32] other [uint 32] return [uint 32] 1 core_ops_Rem_rem 0 1 [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiRem ([uint 32] var self) ([uint 32] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_34195 0 core_ops_Rem_Output 0 2 [uint 32] [ref r_named_0_34195 [uint 32]] [abstract core_ops_Rem_Output 0 2 [uint 32] [uint 32]] 
associated_type 1 r_named_0_34237 0 core_ops_Rem_Output 0 2 [ref r_named_0_34237 [uint 32]] [uint 32] [abstract core_ops_Rem_Output 0 2 [uint 32] [uint 32]] 
associated_type 2 r_named_0_34278 r_named_0_34279 0 core_ops_Rem_Output 0 2 [ref r_named_0_34278 [uint 32]] [ref r_named_0_34279 [uint 32]] [abstract core_ops_Rem_Output 0 2 [uint 32] [uint 32]] 
associated_type 0 0 core_ops_Rem_Output 0 1 [uint 8] [uint 8] 
fn core_ops_u8__Rem_rem 0 0 args 2 self [uint 8] other [uint 8] return [uint 8] 1 core_ops_Rem_rem 0 1 [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] binop BiRem ([uint 8] var self) ([uint 8] var other)) ([uint 8] var __result)) 
associated_type 1 r_named_0_34340 0 core_ops_Rem_Output 0 2 [uint 8] [ref r_named_0_34340 [uint 8]] [abstract core_ops_Rem_Output 0 2 [uint 8] [uint 8]] 
associated_type 1 r_named_0_34382 0 core_ops_Rem_Output 0 2 [ref r_named_0_34382 [uint 8]] [uint 8] [abstract core_ops_Rem_Output 0 2 [uint 8] [uint 8]] 
associated_type 2 r_named_0_34423 r_named_0_34424 0 core_ops_Rem_Output 0 2 [ref r_named_0_34423 [uint 8]] [ref r_named_0_34424 [uint 8]] [abstract core_ops_Rem_Output 0 2 [uint 8] [uint 8]] 
associated_type 0 0 core_ops_Rem_Output 0 1 [uint 16] [uint 16] 
fn core_ops_u16__Rem_rem 0 0 args 2 self [uint 16] other [uint 16] return [uint 16] 1 core_ops_Rem_rem 0 1 [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] binop BiRem ([uint 16] var self) ([uint 16] var other)) ([uint 16] var __result)) 
associated_type 1 r_named_0_34485 0 core_ops_Rem_Output 0 2 [uint 16] [ref r_named_0_34485 [uint 16]] [abstract core_ops_Rem_Output 0 2 [uint 16] [uint 16]] 
associated_type 1 r_named_0_34527 0 core_ops_Rem_Output 0 2 [ref r_named_0_34527 [uint 16]] [uint 16] [abstract core_ops_Rem_Output 0 2 [uint 16] [uint 16]] 
associated_type 2 r_named_0_34568 r_named_0_34569 0 core_ops_Rem_Output 0 2 [ref r_named_0_34568 [uint 16]] [ref r_named_0_34569 [uint 16]] [abstract core_ops_Rem_Output 0 2 [uint 16] [uint 16]] 
associated_type 0 0 core_ops_Rem_Output 0 1 [uint 32] [uint 32] 
fn core_ops_u32__Rem_rem 0 0 args 2 self [uint 32] other [uint 32] return [uint 32] 1 core_ops_Rem_rem 0 1 [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiRem ([uint 32] var self) ([uint 32] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_34630 0 core_ops_Rem_Output 0 2 [uint 32] [ref r_named_0_34630 [uint 32]] [abstract core_ops_Rem_Output 0 2 [uint 32] [uint 32]] 
associated_type 1 r_named_0_34672 0 core_ops_Rem_Output 0 2 [ref r_named_0_34672 [uint 32]] [uint 32] [abstract core_ops_Rem_Output 0 2 [uint 32] [uint 32]] 
associated_type 2 r_named_0_34713 r_named_0_34714 0 core_ops_Rem_Output 0 2 [ref r_named_0_34713 [uint 32]] [ref r_named_0_34714 [uint 32]] [abstract core_ops_Rem_Output 0 2 [uint 32] [uint 32]] 
associated_type 0 0 core_ops_Rem_Output 0 1 [uint 64] [uint 64] 
fn core_ops_u64__Rem_rem 0 0 args 2 self [uint 64] other [uint 64] return [uint 64] 1 core_ops_Rem_rem 0 1 [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] binop BiRem ([uint 64] var self) ([uint 64] var other)) ([uint 64] var __result)) 
associated_type 1 r_named_0_34775 0 core_ops_Rem_Output 0 2 [uint 64] [ref r_named_0_34775 [uint 64]] [abstract core_ops_Rem_Output 0 2 [uint 64] [uint 64]] 
associated_type 1 r_named_0_34817 0 core_ops_Rem_Output 0 2 [ref r_named_0_34817 [uint 64]] [uint 64] [abstract core_ops_Rem_Output 0 2 [uint 64] [uint 64]] 
associated_type 2 r_named_0_34858 r_named_0_34859 0 core_ops_Rem_Output 0 2 [ref r_named_0_34858 [uint 64]] [ref r_named_0_34859 [uint 64]] [abstract core_ops_Rem_Output 0 2 [uint 64] [uint 64]] 
associated_type 0 0 core_ops_Rem_Output 0 1 [int 32] [int 32] 
fn core_ops_int__Rem_rem 0 0 args 2 self [int 32] other [int 32] return [int 32] 1 core_ops_Rem_rem 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiRem ([int 32] var self) ([int 32] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_34920 0 core_ops_Rem_Output 0 2 [int 32] [ref r_named_0_34920 [int 32]] [abstract core_ops_Rem_Output 0 2 [int 32] [int 32]] 
associated_type 1 r_named_0_34962 0 core_ops_Rem_Output 0 2 [ref r_named_0_34962 [int 32]] [int 32] [abstract core_ops_Rem_Output 0 2 [int 32] [int 32]] 
associated_type 2 r_named_0_35003 r_named_0_35004 0 core_ops_Rem_Output 0 2 [ref r_named_0_35003 [int 32]] [ref r_named_0_35004 [int 32]] [abstract core_ops_Rem_Output 0 2 [int 32] [int 32]] 
associated_type 0 0 core_ops_Rem_Output 0 1 [int 8] [int 8] 
fn core_ops_i8__Rem_rem 0 0 args 2 self [int 8] other [int 8] return [int 8] 1 core_ops_Rem_rem 0 1 [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] binop BiRem ([int 8] var self) ([int 8] var other)) ([int 8] var __result)) 
associated_type 1 r_named_0_35065 0 core_ops_Rem_Output 0 2 [int 8] [ref r_named_0_35065 [int 8]] [abstract core_ops_Rem_Output 0 2 [int 8] [int 8]] 
associated_type 1 r_named_0_35107 0 core_ops_Rem_Output 0 2 [ref r_named_0_35107 [int 8]] [int 8] [abstract core_ops_Rem_Output 0 2 [int 8] [int 8]] 
associated_type 2 r_named_0_35148 r_named_0_35149 0 core_ops_Rem_Output 0 2 [ref r_named_0_35148 [int 8]] [ref r_named_0_35149 [int 8]] [abstract core_ops_Rem_Output 0 2 [int 8] [int 8]] 
associated_type 0 0 core_ops_Rem_Output 0 1 [int 16] [int 16] 
fn core_ops_i16__Rem_rem 0 0 args 2 self [int 16] other [int 16] return [int 16] 1 core_ops_Rem_rem 0 1 [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] binop BiRem ([int 16] var self) ([int 16] var other)) ([int 16] var __result)) 
associated_type 1 r_named_0_35210 0 core_ops_Rem_Output 0 2 [int 16] [ref r_named_0_35210 [int 16]] [abstract core_ops_Rem_Output 0 2 [int 16] [int 16]] 
associated_type 1 r_named_0_35252 0 core_ops_Rem_Output 0 2 [ref r_named_0_35252 [int 16]] [int 16] [abstract core_ops_Rem_Output 0 2 [int 16] [int 16]] 
associated_type 2 r_named_0_35293 r_named_0_35294 0 core_ops_Rem_Output 0 2 [ref r_named_0_35293 [int 16]] [ref r_named_0_35294 [int 16]] [abstract core_ops_Rem_Output 0 2 [int 16] [int 16]] 
associated_type 0 0 core_ops_Rem_Output 0 1 [int 32] [int 32] 
fn core_ops_i32__Rem_rem 0 0 args 2 self [int 32] other [int 32] return [int 32] 1 core_ops_Rem_rem 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiRem ([int 32] var self) ([int 32] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_35355 0 core_ops_Rem_Output 0 2 [int 32] [ref r_named_0_35355 [int 32]] [abstract core_ops_Rem_Output 0 2 [int 32] [int 32]] 
associated_type 1 r_named_0_35397 0 core_ops_Rem_Output 0 2 [ref r_named_0_35397 [int 32]] [int 32] [abstract core_ops_Rem_Output 0 2 [int 32] [int 32]] 
associated_type 2 r_named_0_35438 r_named_0_35439 0 core_ops_Rem_Output 0 2 [ref r_named_0_35438 [int 32]] [ref r_named_0_35439 [int 32]] [abstract core_ops_Rem_Output 0 2 [int 32] [int 32]] 
associated_type 0 0 core_ops_Rem_Output 0 1 [int 64] [int 64] 
fn core_ops_i64__Rem_rem 0 0 args 2 self [int 64] other [int 64] return [int 64] 1 core_ops_Rem_rem 0 1 [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] binop BiRem ([int 64] var self) ([int 64] var other)) ([int 64] var __result)) 
associated_type 1 r_named_0_35500 0 core_ops_Rem_Output 0 2 [int 64] [ref r_named_0_35500 [int 64]] [abstract core_ops_Rem_Output 0 2 [int 64] [int 64]] 
associated_type 1 r_named_0_35542 0 core_ops_Rem_Output 0 2 [ref r_named_0_35542 [int 64]] [int 64] [abstract core_ops_Rem_Output 0 2 [int 64] [int 64]] 
associated_type 2 r_named_0_35583 r_named_0_35584 0 core_ops_Rem_Output 0 2 [ref r_named_0_35583 [int 64]] [ref r_named_0_35584 [int 64]] [abstract core_ops_Rem_Output 0 2 [int 64] [int 64]] 
associated_type 0 0 core_ops_Neg_Output 0 1 [int 32] [int 32] 
fn core_ops_int__Neg_neg 0 0 args 1 self [int 32] return [int 32] 1 core_ops_Neg_neg 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] unop UnNeg ([int 32] var self)) ([int 32] var __result)) 
associated_type 1 r_named_0_35963 0 core_ops_Neg_Output 0 1 [ref r_named_0_35963 [int 32]] [abstract core_ops_Neg_Output 0 1 [int 32]] 
associated_type 0 0 core_ops_Neg_Output 0 1 [int 8] [int 8] 
fn core_ops_i8__Neg_neg 0 0 args 1 self [int 8] return [int 8] 1 core_ops_Neg_neg 0 1 [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] unop UnNeg ([int 8] var self)) ([int 8] var __result)) 
associated_type 1 r_named_0_36008 0 core_ops_Neg_Output 0 1 [ref r_named_0_36008 [int 8]] [abstract core_ops_Neg_Output 0 1 [int 8]] 
associated_type 0 0 core_ops_Neg_Output 0 1 [int 16] [int 16] 
fn core_ops_i16__Neg_neg 0 0 args 1 self [int 16] return [int 16] 1 core_ops_Neg_neg 0 1 [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] unop UnNeg ([int 16] var self)) ([int 16] var __result)) 
associated_type 1 r_named_0_36053 0 core_ops_Neg_Output 0 1 [ref r_named_0_36053 [int 16]] [abstract core_ops_Neg_Output 0 1 [int 16]] 
associated_type 0 0 core_ops_Neg_Output 0 1 [int 32] [int 32] 
fn core_ops_i32__Neg_neg 0 0 args 1 self [int 32] return [int 32] 1 core_ops_Neg_neg 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] unop UnNeg ([int 32] var self)) ([int 32] var __result)) 
associated_type 1 r_named_0_36098 0 core_ops_Neg_Output 0 1 [ref r_named_0_36098 [int 32]] [abstract core_ops_Neg_Output 0 1 [int 32]] 
associated_type 0 0 core_ops_Neg_Output 0 1 [int 64] [int 64] 
fn core_ops_i64__Neg_neg 0 0 args 1 self [int 64] return [int 64] 1 core_ops_Neg_neg 0 1 [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] unop UnNeg ([int 64] var self)) ([int 64] var __result)) 
associated_type 1 r_named_0_36143 0 core_ops_Neg_Output 0 1 [ref r_named_0_36143 [int 64]] [abstract core_ops_Neg_Output 0 1 [int 64]] 
associated_type 0 0 core_ops_Neg_Output 0 1 [uint 32] [uint 32] 
fn core_ops_uint__Neg_neg 0 0 args 1 self [uint 32] return [uint 32] 1 core_ops_Neg_neg 0 1 [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] cast ([int 32] unop UnNeg ([int 32] cast ([uint 32] var self) [int 32])) [uint 32]) ([uint 32] var __result)) 
associated_type 1 r_named_0_36285 0 core_ops_Neg_Output 0 1 [ref r_named_0_36285 [uint 32]] [abstract core_ops_Neg_Output 0 1 [uint 32]] 
associated_type 0 0 core_ops_Neg_Output 0 1 [uint 8] [uint 8] 
fn core_ops_u8__Neg_neg 0 0 args 1 self [uint 8] return [uint 8] 1 core_ops_Neg_neg 0 1 [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] cast ([int 8] unop UnNeg ([int 8] cast ([uint 8] var self) [int 8])) [uint 8]) ([uint 8] var __result)) 
associated_type 1 r_named_0_36337 0 core_ops_Neg_Output 0 1 [ref r_named_0_36337 [uint 8]] [abstract core_ops_Neg_Output 0 1 [uint 8]] 
associated_type 0 0 core_ops_Neg_Output 0 1 [uint 16] [uint 16] 
fn core_ops_u16__Neg_neg 0 0 args 1 self [uint 16] return [uint 16] 1 core_ops_Neg_neg 0 1 [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] cast ([int 16] unop UnNeg ([int 16] cast ([uint 16] var self) [int 16])) [uint 16]) ([uint 16] var __result)) 
associated_type 1 r_named_0_36389 0 core_ops_Neg_Output 0 1 [ref r_named_0_36389 [uint 16]] [abstract core_ops_Neg_Output 0 1 [uint 16]] 
associated_type 0 0 core_ops_Neg_Output 0 1 [uint 32] [uint 32] 
fn core_ops_u32__Neg_neg 0 0 args 1 self [uint 32] return [uint 32] 1 core_ops_Neg_neg 0 1 [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] cast ([int 32] unop UnNeg ([int 32] cast ([uint 32] var self) [int 32])) [uint 32]) ([uint 32] var __result)) 
associated_type 1 r_named_0_36441 0 core_ops_Neg_Output 0 1 [ref r_named_0_36441 [uint 32]] [abstract core_ops_Neg_Output 0 1 [uint 32]] 
associated_type 0 0 core_ops_Neg_Output 0 1 [uint 64] [uint 64] 
fn core_ops_u64__Neg_neg 0 0 args 1 self [uint 64] return [uint 64] 1 core_ops_Neg_neg 0 1 [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] cast ([int 64] unop UnNeg ([int 64] cast ([uint 64] var self) [int 64])) [uint 64]) ([uint 64] var __result)) 
associated_type 1 r_named_0_36493 0 core_ops_Neg_Output 0 1 [ref r_named_0_36493 [uint 64]] [abstract core_ops_Neg_Output 0 1 [uint 64]] 
associated_type 0 0 core_ops_Not_Output 0 1 [bool] [bool] 
fn core_ops_bool__Not_not 0 0 args 1 self [bool] return [bool] 1 core_ops_Not_not 0 1 [bool] body ([bool] block 1 let __result [bool] ([bool] unop UnNot ([bool] var self)) ([bool] var __result)) 
associated_type 1 r_named_0_36548 0 core_ops_Not_Output 0 1 [ref r_named_0_36548 [bool]] [abstract core_ops_Not_Output 0 1 [bool]] 
associated_type 0 0 core_ops_Not_Output 0 1 [uint 32] [uint 32] 
fn core_ops_uint__Not_not 0 0 args 1 self [uint 32] return [uint 32] 1 core_ops_Not_not 0 1 [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] unop UnNot ([uint 32] var self)) ([uint 32] var __result)) 
associated_type 1 r_named_0_36593 0 core_ops_Not_Output 0 1 [ref r_named_0_36593 [uint 32]] [abstract core_ops_Not_Output 0 1 [uint 32]] 
associated_type 0 0 core_ops_Not_Output 0 1 [uint 8] [uint 8] 
fn core_ops_u8__Not_not 0 0 args 1 self [uint 8] return [uint 8] 1 core_ops_Not_not 0 1 [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] unop UnNot ([uint 8] var self)) ([uint 8] var __result)) 
associated_type 1 r_named_0_36638 0 core_ops_Not_Output 0 1 [ref r_named_0_36638 [uint 8]] [abstract core_ops_Not_Output 0 1 [uint 8]] 
associated_type 0 0 core_ops_Not_Output 0 1 [uint 16] [uint 16] 
fn core_ops_u16__Not_not 0 0 args 1 self [uint 16] return [uint 16] 1 core_ops_Not_not 0 1 [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] unop UnNot ([uint 16] var self)) ([uint 16] var __result)) 
associated_type 1 r_named_0_36683 0 core_ops_Not_Output 0 1 [ref r_named_0_36683 [uint 16]] [abstract core_ops_Not_Output 0 1 [uint 16]] 
associated_type 0 0 core_ops_Not_Output 0 1 [uint 32] [uint 32] 
fn core_ops_u32__Not_not 0 0 args 1 self [uint 32] return [uint 32] 1 core_ops_Not_not 0 1 [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] unop UnNot ([uint 32] var self)) ([uint 32] var __result)) 
associated_type 1 r_named_0_36728 0 core_ops_Not_Output 0 1 [ref r_named_0_36728 [uint 32]] [abstract core_ops_Not_Output 0 1 [uint 32]] 
associated_type 0 0 core_ops_Not_Output 0 1 [uint 64] [uint 64] 
fn core_ops_u64__Not_not 0 0 args 1 self [uint 64] return [uint 64] 1 core_ops_Not_not 0 1 [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] unop UnNot ([uint 64] var self)) ([uint 64] var __result)) 
associated_type 1 r_named_0_36773 0 core_ops_Not_Output 0 1 [ref r_named_0_36773 [uint 64]] [abstract core_ops_Not_Output 0 1 [uint 64]] 
associated_type 0 0 core_ops_Not_Output 0 1 [int 32] [int 32] 
fn core_ops_int__Not_not 0 0 args 1 self [int 32] return [int 32] 1 core_ops_Not_not 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] unop UnNot ([int 32] var self)) ([int 32] var __result)) 
associated_type 1 r_named_0_36818 0 core_ops_Not_Output 0 1 [ref r_named_0_36818 [int 32]] [abstract core_ops_Not_Output 0 1 [int 32]] 
associated_type 0 0 core_ops_Not_Output 0 1 [int 8] [int 8] 
fn core_ops_i8__Not_not 0 0 args 1 self [int 8] return [int 8] 1 core_ops_Not_not 0 1 [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] unop UnNot ([int 8] var self)) ([int 8] var __result)) 
associated_type 1 r_named_0_36863 0 core_ops_Not_Output 0 1 [ref r_named_0_36863 [int 8]] [abstract core_ops_Not_Output 0 1 [int 8]] 
associated_type 0 0 core_ops_Not_Output 0 1 [int 16] [int 16] 
fn core_ops_i16__Not_not 0 0 args 1 self [int 16] return [int 16] 1 core_ops_Not_not 0 1 [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] unop UnNot ([int 16] var self)) ([int 16] var __result)) 
associated_type 1 r_named_0_36908 0 core_ops_Not_Output 0 1 [ref r_named_0_36908 [int 16]] [abstract core_ops_Not_Output 0 1 [int 16]] 
associated_type 0 0 core_ops_Not_Output 0 1 [int 32] [int 32] 
fn core_ops_i32__Not_not 0 0 args 1 self [int 32] return [int 32] 1 core_ops_Not_not 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] unop UnNot ([int 32] var self)) ([int 32] var __result)) 
associated_type 1 r_named_0_36953 0 core_ops_Not_Output 0 1 [ref r_named_0_36953 [int 32]] [abstract core_ops_Not_Output 0 1 [int 32]] 
associated_type 0 0 core_ops_Not_Output 0 1 [int 64] [int 64] 
fn core_ops_i64__Not_not 0 0 args 1 self [int 64] return [int 64] 1 core_ops_Not_not 0 1 [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] unop UnNot ([int 64] var self)) ([int 64] var __result)) 
associated_type 1 r_named_0_36998 0 core_ops_Not_Output 0 1 [ref r_named_0_36998 [int 64]] [abstract core_ops_Not_Output 0 1 [int 64]] 
associated_type 0 0 core_ops_BitAnd_Output 0 1 [bool] [bool] 
fn core_ops_bool__BitAnd_bitand 0 0 args 2 self [bool] rhs [bool] return [bool] 1 core_ops_BitAnd_bitand 0 1 [bool] body ([bool] block 1 let __result [bool] ([bool] binop BiBitAnd ([bool] var self) ([bool] var rhs)) ([bool] var __result)) 
associated_type 1 r_named_0_37076 0 core_ops_BitAnd_Output 0 2 [bool] [ref r_named_0_37076 [bool]] [abstract core_ops_BitAnd_Output 0 2 [bool] [bool]] 
associated_type 1 r_named_0_37118 0 core_ops_BitAnd_Output 0 2 [ref r_named_0_37118 [bool]] [bool] [abstract core_ops_BitAnd_Output 0 2 [bool] [bool]] 
associated_type 2 r_named_0_37159 r_named_0_37160 0 core_ops_BitAnd_Output 0 2 [ref r_named_0_37159 [bool]] [ref r_named_0_37160 [bool]] [abstract core_ops_BitAnd_Output 0 2 [bool] [bool]] 
associated_type 0 0 core_ops_BitAnd_Output 0 1 [uint 32] [uint 32] 
fn core_ops_uint__BitAnd_bitand 0 0 args 2 self [uint 32] rhs [uint 32] return [uint 32] 1 core_ops_BitAnd_bitand 0 1 [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiBitAnd ([uint 32] var self) ([uint 32] var rhs)) ([uint 32] var __result)) 
associated_type 1 r_named_0_37221 0 core_ops_BitAnd_Output 0 2 [uint 32] [ref r_named_0_37221 [uint 32]] [abstract core_ops_BitAnd_Output 0 2 [uint 32] [uint 32]] 
associated_type 1 r_named_0_37263 0 core_ops_BitAnd_Output 0 2 [ref r_named_0_37263 [uint 32]] [uint 32] [abstract core_ops_BitAnd_Output 0 2 [uint 32] [uint 32]] 
associated_type 2 r_named_0_37304 r_named_0_37305 0 core_ops_BitAnd_Output 0 2 [ref r_named_0_37304 [uint 32]] [ref r_named_0_37305 [uint 32]] [abstract core_ops_BitAnd_Output 0 2 [uint 32] [uint 32]] 
associated_type 0 0 core_ops_BitAnd_Output 0 1 [uint 8] [uint 8] 
fn core_ops_u8__BitAnd_bitand 0 0 args 2 self [uint 8] rhs [uint 8] return [uint 8] 1 core_ops_BitAnd_bitand 0 1 [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] binop BiBitAnd ([uint 8] var self) ([uint 8] var rhs)) ([uint 8] var __result)) 
associated_type 1 r_named_0_37366 0 core_ops_BitAnd_Output 0 2 [uint 8] [ref r_named_0_37366 [uint 8]] [abstract core_ops_BitAnd_Output 0 2 [uint 8] [uint 8]] 
associated_type 1 r_named_0_37408 0 core_ops_BitAnd_Output 0 2 [ref r_named_0_37408 [uint 8]] [uint 8] [abstract core_ops_BitAnd_Output 0 2 [uint 8] [uint 8]] 
associated_type 2 r_named_0_37449 r_named_0_37450 0 core_ops_BitAnd_Output 0 2 [ref r_named_0_37449 [uint 8]] [ref r_named_0_37450 [uint 8]] [abstract core_ops_BitAnd_Output 0 2 [uint 8] [uint 8]] 
associated_type 0 0 core_ops_BitAnd_Output 0 1 [uint 16] [uint 16] 
fn core_ops_u16__BitAnd_bitand 0 0 args 2 self [uint 16] rhs [uint 16] return [uint 16] 1 core_ops_BitAnd_bitand 0 1 [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] binop BiBitAnd ([uint 16] var self) ([uint 16] var rhs)) ([uint 16] var __result)) 
associated_type 1 r_named_0_37511 0 core_ops_BitAnd_Output 0 2 [uint 16] [ref r_named_0_37511 [uint 16]] [abstract core_ops_BitAnd_Output 0 2 [uint 16] [uint 16]] 
associated_type 1 r_named_0_37553 0 core_ops_BitAnd_Output 0 2 [ref r_named_0_37553 [uint 16]] [uint 16] [abstract core_ops_BitAnd_Output 0 2 [uint 16] [uint 16]] 
associated_type 2 r_named_0_37594 r_named_0_37595 0 core_ops_BitAnd_Output 0 2 [ref r_named_0_37594 [uint 16]] [ref r_named_0_37595 [uint 16]] [abstract core_ops_BitAnd_Output 0 2 [uint 16] [uint 16]] 
associated_type 0 0 core_ops_BitAnd_Output 0 1 [uint 32] [uint 32] 
fn core_ops_u32__BitAnd_bitand 0 0 args 2 self [uint 32] rhs [uint 32] return [uint 32] 1 core_ops_BitAnd_bitand 0 1 [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiBitAnd ([uint 32] var self) ([uint 32] var rhs)) ([uint 32] var __result)) 
associated_type 1 r_named_0_37656 0 core_ops_BitAnd_Output 0 2 [uint 32] [ref r_named_0_37656 [uint 32]] [abstract core_ops_BitAnd_Output 0 2 [uint 32] [uint 32]] 
associated_type 1 r_named_0_37698 0 core_ops_BitAnd_Output 0 2 [ref r_named_0_37698 [uint 32]] [uint 32] [abstract core_ops_BitAnd_Output 0 2 [uint 32] [uint 32]] 
associated_type 2 r_named_0_37739 r_named_0_37740 0 core_ops_BitAnd_Output 0 2 [ref r_named_0_37739 [uint 32]] [ref r_named_0_37740 [uint 32]] [abstract core_ops_BitAnd_Output 0 2 [uint 32] [uint 32]] 
associated_type 0 0 core_ops_BitAnd_Output 0 1 [uint 64] [uint 64] 
fn core_ops_u64__BitAnd_bitand 0 0 args 2 self [uint 64] rhs [uint 64] return [uint 64] 1 core_ops_BitAnd_bitand 0 1 [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] binop BiBitAnd ([uint 64] var self) ([uint 64] var rhs)) ([uint 64] var __result)) 
associated_type 1 r_named_0_37801 0 core_ops_BitAnd_Output 0 2 [uint 64] [ref r_named_0_37801 [uint 64]] [abstract core_ops_BitAnd_Output 0 2 [uint 64] [uint 64]] 
associated_type 1 r_named_0_37843 0 core_ops_BitAnd_Output 0 2 [ref r_named_0_37843 [uint 64]] [uint 64] [abstract core_ops_BitAnd_Output 0 2 [uint 64] [uint 64]] 
associated_type 2 r_named_0_37884 r_named_0_37885 0 core_ops_BitAnd_Output 0 2 [ref r_named_0_37884 [uint 64]] [ref r_named_0_37885 [uint 64]] [abstract core_ops_BitAnd_Output 0 2 [uint 64] [uint 64]] 
associated_type 0 0 core_ops_BitAnd_Output 0 1 [int 32] [int 32] 
fn core_ops_int__BitAnd_bitand 0 0 args 2 self [int 32] rhs [int 32] return [int 32] 1 core_ops_BitAnd_bitand 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiBitAnd ([int 32] var self) ([int 32] var rhs)) ([int 32] var __result)) 
associated_type 1 r_named_0_37946 0 core_ops_BitAnd_Output 0 2 [int 32] [ref r_named_0_37946 [int 32]] [abstract core_ops_BitAnd_Output 0 2 [int 32] [int 32]] 
associated_type 1 r_named_0_37988 0 core_ops_BitAnd_Output 0 2 [ref r_named_0_37988 [int 32]] [int 32] [abstract core_ops_BitAnd_Output 0 2 [int 32] [int 32]] 
associated_type 2 r_named_0_38029 r_named_0_38030 0 core_ops_BitAnd_Output 0 2 [ref r_named_0_38029 [int 32]] [ref r_named_0_38030 [int 32]] [abstract core_ops_BitAnd_Output 0 2 [int 32] [int 32]] 
associated_type 0 0 core_ops_BitAnd_Output 0 1 [int 8] [int 8] 
fn core_ops_i8__BitAnd_bitand 0 0 args 2 self [int 8] rhs [int 8] return [int 8] 1 core_ops_BitAnd_bitand 0 1 [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] binop BiBitAnd ([int 8] var self) ([int 8] var rhs)) ([int 8] var __result)) 
associated_type 1 r_named_0_38091 0 core_ops_BitAnd_Output 0 2 [int 8] [ref r_named_0_38091 [int 8]] [abstract core_ops_BitAnd_Output 0 2 [int 8] [int 8]] 
associated_type 1 r_named_0_38133 0 core_ops_BitAnd_Output 0 2 [ref r_named_0_38133 [int 8]] [int 8] [abstract core_ops_BitAnd_Output 0 2 [int 8] [int 8]] 
associated_type 2 r_named_0_38174 r_named_0_38175 0 core_ops_BitAnd_Output 0 2 [ref r_named_0_38174 [int 8]] [ref r_named_0_38175 [int 8]] [abstract core_ops_BitAnd_Output 0 2 [int 8] [int 8]] 
associated_type 0 0 core_ops_BitAnd_Output 0 1 [int 16] [int 16] 
fn core_ops_i16__BitAnd_bitand 0 0 args 2 self [int 16] rhs [int 16] return [int 16] 1 core_ops_BitAnd_bitand 0 1 [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] binop BiBitAnd ([int 16] var self) ([int 16] var rhs)) ([int 16] var __result)) 
associated_type 1 r_named_0_38236 0 core_ops_BitAnd_Output 0 2 [int 16] [ref r_named_0_38236 [int 16]] [abstract core_ops_BitAnd_Output 0 2 [int 16] [int 16]] 
associated_type 1 r_named_0_38278 0 core_ops_BitAnd_Output 0 2 [ref r_named_0_38278 [int 16]] [int 16] [abstract core_ops_BitAnd_Output 0 2 [int 16] [int 16]] 
associated_type 2 r_named_0_38319 r_named_0_38320 0 core_ops_BitAnd_Output 0 2 [ref r_named_0_38319 [int 16]] [ref r_named_0_38320 [int 16]] [abstract core_ops_BitAnd_Output 0 2 [int 16] [int 16]] 
associated_type 0 0 core_ops_BitAnd_Output 0 1 [int 32] [int 32] 
fn core_ops_i32__BitAnd_bitand 0 0 args 2 self [int 32] rhs [int 32] return [int 32] 1 core_ops_BitAnd_bitand 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiBitAnd ([int 32] var self) ([int 32] var rhs)) ([int 32] var __result)) 
associated_type 1 r_named_0_38381 0 core_ops_BitAnd_Output 0 2 [int 32] [ref r_named_0_38381 [int 32]] [abstract core_ops_BitAnd_Output 0 2 [int 32] [int 32]] 
associated_type 1 r_named_0_38423 0 core_ops_BitAnd_Output 0 2 [ref r_named_0_38423 [int 32]] [int 32] [abstract core_ops_BitAnd_Output 0 2 [int 32] [int 32]] 
associated_type 2 r_named_0_38464 r_named_0_38465 0 core_ops_BitAnd_Output 0 2 [ref r_named_0_38464 [int 32]] [ref r_named_0_38465 [int 32]] [abstract core_ops_BitAnd_Output 0 2 [int 32] [int 32]] 
associated_type 0 0 core_ops_BitAnd_Output 0 1 [int 64] [int 64] 
fn core_ops_i64__BitAnd_bitand 0 0 args 2 self [int 64] rhs [int 64] return [int 64] 1 core_ops_BitAnd_bitand 0 1 [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] binop BiBitAnd ([int 64] var self) ([int 64] var rhs)) ([int 64] var __result)) 
associated_type 1 r_named_0_38526 0 core_ops_BitAnd_Output 0 2 [int 64] [ref r_named_0_38526 [int 64]] [abstract core_ops_BitAnd_Output 0 2 [int 64] [int 64]] 
associated_type 1 r_named_0_38568 0 core_ops_BitAnd_Output 0 2 [ref r_named_0_38568 [int 64]] [int 64] [abstract core_ops_BitAnd_Output 0 2 [int 64] [int 64]] 
associated_type 2 r_named_0_38609 r_named_0_38610 0 core_ops_BitAnd_Output 0 2 [ref r_named_0_38609 [int 64]] [ref r_named_0_38610 [int 64]] [abstract core_ops_BitAnd_Output 0 2 [int 64] [int 64]] 
associated_type 0 0 core_ops_BitOr_Output 0 1 [bool] [bool] 
fn core_ops_bool__BitOr_bitor 0 0 args 2 self [bool] rhs [bool] return [bool] 1 core_ops_BitOr_bitor 0 1 [bool] body ([bool] block 1 let __result [bool] ([bool] binop BiBitOr ([bool] var self) ([bool] var rhs)) ([bool] var __result)) 
associated_type 1 r_named_0_38688 0 core_ops_BitOr_Output 0 2 [bool] [ref r_named_0_38688 [bool]] [abstract core_ops_BitOr_Output 0 2 [bool] [bool]] 
associated_type 1 r_named_0_38730 0 core_ops_BitOr_Output 0 2 [ref r_named_0_38730 [bool]] [bool] [abstract core_ops_BitOr_Output 0 2 [bool] [bool]] 
associated_type 2 r_named_0_38771 r_named_0_38772 0 core_ops_BitOr_Output 0 2 [ref r_named_0_38771 [bool]] [ref r_named_0_38772 [bool]] [abstract core_ops_BitOr_Output 0 2 [bool] [bool]] 
associated_type 0 0 core_ops_BitOr_Output 0 1 [uint 32] [uint 32] 
fn core_ops_uint__BitOr_bitor 0 0 args 2 self [uint 32] rhs [uint 32] return [uint 32] 1 core_ops_BitOr_bitor 0 1 [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiBitOr ([uint 32] var self) ([uint 32] var rhs)) ([uint 32] var __result)) 
associated_type 1 r_named_0_38833 0 core_ops_BitOr_Output 0 2 [uint 32] [ref r_named_0_38833 [uint 32]] [abstract core_ops_BitOr_Output 0 2 [uint 32] [uint 32]] 
associated_type 1 r_named_0_38875 0 core_ops_BitOr_Output 0 2 [ref r_named_0_38875 [uint 32]] [uint 32] [abstract core_ops_BitOr_Output 0 2 [uint 32] [uint 32]] 
associated_type 2 r_named_0_38916 r_named_0_38917 0 core_ops_BitOr_Output 0 2 [ref r_named_0_38916 [uint 32]] [ref r_named_0_38917 [uint 32]] [abstract core_ops_BitOr_Output 0 2 [uint 32] [uint 32]] 
associated_type 0 0 core_ops_BitOr_Output 0 1 [uint 8] [uint 8] 
fn core_ops_u8__BitOr_bitor 0 0 args 2 self [uint 8] rhs [uint 8] return [uint 8] 1 core_ops_BitOr_bitor 0 1 [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] binop BiBitOr ([uint 8] var self) ([uint 8] var rhs)) ([uint 8] var __result)) 
associated_type 1 r_named_0_38978 0 core_ops_BitOr_Output 0 2 [uint 8] [ref r_named_0_38978 [uint 8]] [abstract core_ops_BitOr_Output 0 2 [uint 8] [uint 8]] 
associated_type 1 r_named_0_39020 0 core_ops_BitOr_Output 0 2 [ref r_named_0_39020 [uint 8]] [uint 8] [abstract core_ops_BitOr_Output 0 2 [uint 8] [uint 8]] 
associated_type 2 r_named_0_39061 r_named_0_39062 0 core_ops_BitOr_Output 0 2 [ref r_named_0_39061 [uint 8]] [ref r_named_0_39062 [uint 8]] [abstract core_ops_BitOr_Output 0 2 [uint 8] [uint 8]] 
associated_type 0 0 core_ops_BitOr_Output 0 1 [uint 16] [uint 16] 
fn core_ops_u16__BitOr_bitor 0 0 args 2 self [uint 16] rhs [uint 16] return [uint 16] 1 core_ops_BitOr_bitor 0 1 [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] binop BiBitOr ([uint 16] var self) ([uint 16] var rhs)) ([uint 16] var __result)) 
associated_type 1 r_named_0_39123 0 core_ops_BitOr_Output 0 2 [uint 16] [ref r_named_0_39123 [uint 16]] [abstract core_ops_BitOr_Output 0 2 [uint 16] [uint 16]] 
associated_type 1 r_named_0_39165 0 core_ops_BitOr_Output 0 2 [ref r_named_0_39165 [uint 16]] [uint 16] [abstract core_ops_BitOr_Output 0 2 [uint 16] [uint 16]] 
associated_type 2 r_named_0_39206 r_named_0_39207 0 core_ops_BitOr_Output 0 2 [ref r_named_0_39206 [uint 16]] [ref r_named_0_39207 [uint 16]] [abstract core_ops_BitOr_Output 0 2 [uint 16] [uint 16]] 
associated_type 0 0 core_ops_BitOr_Output 0 1 [uint 32] [uint 32] 
fn core_ops_u32__BitOr_bitor 0 0 args 2 self [uint 32] rhs [uint 32] return [uint 32] 1 core_ops_BitOr_bitor 0 1 [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiBitOr ([uint 32] var self) ([uint 32] var rhs)) ([uint 32] var __result)) 
associated_type 1 r_named_0_39268 0 core_ops_BitOr_Output 0 2 [uint 32] [ref r_named_0_39268 [uint 32]] [abstract core_ops_BitOr_Output 0 2 [uint 32] [uint 32]] 
associated_type 1 r_named_0_39310 0 core_ops_BitOr_Output 0 2 [ref r_named_0_39310 [uint 32]] [uint 32] [abstract core_ops_BitOr_Output 0 2 [uint 32] [uint 32]] 
associated_type 2 r_named_0_39351 r_named_0_39352 0 core_ops_BitOr_Output 0 2 [ref r_named_0_39351 [uint 32]] [ref r_named_0_39352 [uint 32]] [abstract core_ops_BitOr_Output 0 2 [uint 32] [uint 32]] 
associated_type 0 0 core_ops_BitOr_Output 0 1 [uint 64] [uint 64] 
fn core_ops_u64__BitOr_bitor 0 0 args 2 self [uint 64] rhs [uint 64] return [uint 64] 1 core_ops_BitOr_bitor 0 1 [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] binop BiBitOr ([uint 64] var self) ([uint 64] var rhs)) ([uint 64] var __result)) 
associated_type 1 r_named_0_39413 0 core_ops_BitOr_Output 0 2 [uint 64] [ref r_named_0_39413 [uint 64]] [abstract core_ops_BitOr_Output 0 2 [uint 64] [uint 64]] 
associated_type 1 r_named_0_39455 0 core_ops_BitOr_Output 0 2 [ref r_named_0_39455 [uint 64]] [uint 64] [abstract core_ops_BitOr_Output 0 2 [uint 64] [uint 64]] 
associated_type 2 r_named_0_39496 r_named_0_39497 0 core_ops_BitOr_Output 0 2 [ref r_named_0_39496 [uint 64]] [ref r_named_0_39497 [uint 64]] [abstract core_ops_BitOr_Output 0 2 [uint 64] [uint 64]] 
associated_type 0 0 core_ops_BitOr_Output 0 1 [int 32] [int 32] 
fn core_ops_int__BitOr_bitor 0 0 args 2 self [int 32] rhs [int 32] return [int 32] 1 core_ops_BitOr_bitor 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiBitOr ([int 32] var self) ([int 32] var rhs)) ([int 32] var __result)) 
associated_type 1 r_named_0_39558 0 core_ops_BitOr_Output 0 2 [int 32] [ref r_named_0_39558 [int 32]] [abstract core_ops_BitOr_Output 0 2 [int 32] [int 32]] 
associated_type 1 r_named_0_39600 0 core_ops_BitOr_Output 0 2 [ref r_named_0_39600 [int 32]] [int 32] [abstract core_ops_BitOr_Output 0 2 [int 32] [int 32]] 
associated_type 2 r_named_0_39641 r_named_0_39642 0 core_ops_BitOr_Output 0 2 [ref r_named_0_39641 [int 32]] [ref r_named_0_39642 [int 32]] [abstract core_ops_BitOr_Output 0 2 [int 32] [int 32]] 
associated_type 0 0 core_ops_BitOr_Output 0 1 [int 8] [int 8] 
fn core_ops_i8__BitOr_bitor 0 0 args 2 self [int 8] rhs [int 8] return [int 8] 1 core_ops_BitOr_bitor 0 1 [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] binop BiBitOr ([int 8] var self) ([int 8] var rhs)) ([int 8] var __result)) 
associated_type 1 r_named_0_39703 0 core_ops_BitOr_Output 0 2 [int 8] [ref r_named_0_39703 [int 8]] [abstract core_ops_BitOr_Output 0 2 [int 8] [int 8]] 
associated_type 1 r_named_0_39745 0 core_ops_BitOr_Output 0 2 [ref r_named_0_39745 [int 8]] [int 8] [abstract core_ops_BitOr_Output 0 2 [int 8] [int 8]] 
associated_type 2 r_named_0_39786 r_named_0_39787 0 core_ops_BitOr_Output 0 2 [ref r_named_0_39786 [int 8]] [ref r_named_0_39787 [int 8]] [abstract core_ops_BitOr_Output 0 2 [int 8] [int 8]] 
associated_type 0 0 core_ops_BitOr_Output 0 1 [int 16] [int 16] 
fn core_ops_i16__BitOr_bitor 0 0 args 2 self [int 16] rhs [int 16] return [int 16] 1 core_ops_BitOr_bitor 0 1 [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] binop BiBitOr ([int 16] var self) ([int 16] var rhs)) ([int 16] var __result)) 
associated_type 1 r_named_0_39848 0 core_ops_BitOr_Output 0 2 [int 16] [ref r_named_0_39848 [int 16]] [abstract core_ops_BitOr_Output 0 2 [int 16] [int 16]] 
associated_type 1 r_named_0_39890 0 core_ops_BitOr_Output 0 2 [ref r_named_0_39890 [int 16]] [int 16] [abstract core_ops_BitOr_Output 0 2 [int 16] [int 16]] 
associated_type 2 r_named_0_39931 r_named_0_39932 0 core_ops_BitOr_Output 0 2 [ref r_named_0_39931 [int 16]] [ref r_named_0_39932 [int 16]] [abstract core_ops_BitOr_Output 0 2 [int 16] [int 16]] 
associated_type 0 0 core_ops_BitOr_Output 0 1 [int 32] [int 32] 
fn core_ops_i32__BitOr_bitor 0 0 args 2 self [int 32] rhs [int 32] return [int 32] 1 core_ops_BitOr_bitor 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiBitOr ([int 32] var self) ([int 32] var rhs)) ([int 32] var __result)) 
associated_type 1 r_named_0_39993 0 core_ops_BitOr_Output 0 2 [int 32] [ref r_named_0_39993 [int 32]] [abstract core_ops_BitOr_Output 0 2 [int 32] [int 32]] 
associated_type 1 r_named_0_40035 0 core_ops_BitOr_Output 0 2 [ref r_named_0_40035 [int 32]] [int 32] [abstract core_ops_BitOr_Output 0 2 [int 32] [int 32]] 
associated_type 2 r_named_0_40076 r_named_0_40077 0 core_ops_BitOr_Output 0 2 [ref r_named_0_40076 [int 32]] [ref r_named_0_40077 [int 32]] [abstract core_ops_BitOr_Output 0 2 [int 32] [int 32]] 
associated_type 0 0 core_ops_BitOr_Output 0 1 [int 64] [int 64] 
fn core_ops_i64__BitOr_bitor 0 0 args 2 self [int 64] rhs [int 64] return [int 64] 1 core_ops_BitOr_bitor 0 1 [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] binop BiBitOr ([int 64] var self) ([int 64] var rhs)) ([int 64] var __result)) 
associated_type 1 r_named_0_40138 0 core_ops_BitOr_Output 0 2 [int 64] [ref r_named_0_40138 [int 64]] [abstract core_ops_BitOr_Output 0 2 [int 64] [int 64]] 
associated_type 1 r_named_0_40180 0 core_ops_BitOr_Output 0 2 [ref r_named_0_40180 [int 64]] [int 64] [abstract core_ops_BitOr_Output 0 2 [int 64] [int 64]] 
associated_type 2 r_named_0_40221 r_named_0_40222 0 core_ops_BitOr_Output 0 2 [ref r_named_0_40221 [int 64]] [ref r_named_0_40222 [int 64]] [abstract core_ops_BitOr_Output 0 2 [int 64] [int 64]] 
associated_type 0 0 core_ops_BitXor_Output 0 1 [bool] [bool] 
fn core_ops_bool__BitXor_bitxor 0 0 args 2 self [bool] other [bool] return [bool] 1 core_ops_BitXor_bitxor 0 1 [bool] body ([bool] block 1 let __result [bool] ([bool] binop BiBitXor ([bool] var self) ([bool] var other)) ([bool] var __result)) 
associated_type 1 r_named_0_40300 0 core_ops_BitXor_Output 0 2 [bool] [ref r_named_0_40300 [bool]] [abstract core_ops_BitXor_Output 0 2 [bool] [bool]] 
associated_type 1 r_named_0_40342 0 core_ops_BitXor_Output 0 2 [ref r_named_0_40342 [bool]] [bool] [abstract core_ops_BitXor_Output 0 2 [bool] [bool]] 
associated_type 2 r_named_0_40383 r_named_0_40384 0 core_ops_BitXor_Output 0 2 [ref r_named_0_40383 [bool]] [ref r_named_0_40384 [bool]] [abstract core_ops_BitXor_Output 0 2 [bool] [bool]] 
associated_type 0 0 core_ops_BitXor_Output 0 1 [uint 32] [uint 32] 
fn core_ops_uint__BitXor_bitxor 0 0 args 2 self [uint 32] other [uint 32] return [uint 32] 1 core_ops_BitXor_bitxor 0 1 [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiBitXor ([uint 32] var self) ([uint 32] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_40445 0 core_ops_BitXor_Output 0 2 [uint 32] [ref r_named_0_40445 [uint 32]] [abstract core_ops_BitXor_Output 0 2 [uint 32] [uint 32]] 
associated_type 1 r_named_0_40487 0 core_ops_BitXor_Output 0 2 [ref r_named_0_40487 [uint 32]] [uint 32] [abstract core_ops_BitXor_Output 0 2 [uint 32] [uint 32]] 
associated_type 2 r_named_0_40528 r_named_0_40529 0 core_ops_BitXor_Output 0 2 [ref r_named_0_40528 [uint 32]] [ref r_named_0_40529 [uint 32]] [abstract core_ops_BitXor_Output 0 2 [uint 32] [uint 32]] 
associated_type 0 0 core_ops_BitXor_Output 0 1 [uint 8] [uint 8] 
fn core_ops_u8__BitXor_bitxor 0 0 args 2 self [uint 8] other [uint 8] return [uint 8] 1 core_ops_BitXor_bitxor 0 1 [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] binop BiBitXor ([uint 8] var self) ([uint 8] var other)) ([uint 8] var __result)) 
associated_type 1 r_named_0_40590 0 core_ops_BitXor_Output 0 2 [uint 8] [ref r_named_0_40590 [uint 8]] [abstract core_ops_BitXor_Output 0 2 [uint 8] [uint 8]] 
associated_type 1 r_named_0_40632 0 core_ops_BitXor_Output 0 2 [ref r_named_0_40632 [uint 8]] [uint 8] [abstract core_ops_BitXor_Output 0 2 [uint 8] [uint 8]] 
associated_type 2 r_named_0_40673 r_named_0_40674 0 core_ops_BitXor_Output 0 2 [ref r_named_0_40673 [uint 8]] [ref r_named_0_40674 [uint 8]] [abstract core_ops_BitXor_Output 0 2 [uint 8] [uint 8]] 
associated_type 0 0 core_ops_BitXor_Output 0 1 [uint 16] [uint 16] 
fn core_ops_u16__BitXor_bitxor 0 0 args 2 self [uint 16] other [uint 16] return [uint 16] 1 core_ops_BitXor_bitxor 0 1 [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] binop BiBitXor ([uint 16] var self) ([uint 16] var other)) ([uint 16] var __result)) 
associated_type 1 r_named_0_40735 0 core_ops_BitXor_Output 0 2 [uint 16] [ref r_named_0_40735 [uint 16]] [abstract core_ops_BitXor_Output 0 2 [uint 16] [uint 16]] 
associated_type 1 r_named_0_40777 0 core_ops_BitXor_Output 0 2 [ref r_named_0_40777 [uint 16]] [uint 16] [abstract core_ops_BitXor_Output 0 2 [uint 16] [uint 16]] 
associated_type 2 r_named_0_40818 r_named_0_40819 0 core_ops_BitXor_Output 0 2 [ref r_named_0_40818 [uint 16]] [ref r_named_0_40819 [uint 16]] [abstract core_ops_BitXor_Output 0 2 [uint 16] [uint 16]] 
associated_type 0 0 core_ops_BitXor_Output 0 1 [uint 32] [uint 32] 
fn core_ops_u32__BitXor_bitxor 0 0 args 2 self [uint 32] other [uint 32] return [uint 32] 1 core_ops_BitXor_bitxor 0 1 [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiBitXor ([uint 32] var self) ([uint 32] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_40880 0 core_ops_BitXor_Output 0 2 [uint 32] [ref r_named_0_40880 [uint 32]] [abstract core_ops_BitXor_Output 0 2 [uint 32] [uint 32]] 
associated_type 1 r_named_0_40922 0 core_ops_BitXor_Output 0 2 [ref r_named_0_40922 [uint 32]] [uint 32] [abstract core_ops_BitXor_Output 0 2 [uint 32] [uint 32]] 
associated_type 2 r_named_0_40963 r_named_0_40964 0 core_ops_BitXor_Output 0 2 [ref r_named_0_40963 [uint 32]] [ref r_named_0_40964 [uint 32]] [abstract core_ops_BitXor_Output 0 2 [uint 32] [uint 32]] 
associated_type 0 0 core_ops_BitXor_Output 0 1 [uint 64] [uint 64] 
fn core_ops_u64__BitXor_bitxor 0 0 args 2 self [uint 64] other [uint 64] return [uint 64] 1 core_ops_BitXor_bitxor 0 1 [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] binop BiBitXor ([uint 64] var self) ([uint 64] var other)) ([uint 64] var __result)) 
associated_type 1 r_named_0_41025 0 core_ops_BitXor_Output 0 2 [uint 64] [ref r_named_0_41025 [uint 64]] [abstract core_ops_BitXor_Output 0 2 [uint 64] [uint 64]] 
associated_type 1 r_named_0_41067 0 core_ops_BitXor_Output 0 2 [ref r_named_0_41067 [uint 64]] [uint 64] [abstract core_ops_BitXor_Output 0 2 [uint 64] [uint 64]] 
associated_type 2 r_named_0_41108 r_named_0_41109 0 core_ops_BitXor_Output 0 2 [ref r_named_0_41108 [uint 64]] [ref r_named_0_41109 [uint 64]] [abstract core_ops_BitXor_Output 0 2 [uint 64] [uint 64]] 
associated_type 0 0 core_ops_BitXor_Output 0 1 [int 32] [int 32] 
fn core_ops_int__BitXor_bitxor 0 0 args 2 self [int 32] other [int 32] return [int 32] 1 core_ops_BitXor_bitxor 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiBitXor ([int 32] var self) ([int 32] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_41170 0 core_ops_BitXor_Output 0 2 [int 32] [ref r_named_0_41170 [int 32]] [abstract core_ops_BitXor_Output 0 2 [int 32] [int 32]] 
associated_type 1 r_named_0_41212 0 core_ops_BitXor_Output 0 2 [ref r_named_0_41212 [int 32]] [int 32] [abstract core_ops_BitXor_Output 0 2 [int 32] [int 32]] 
associated_type 2 r_named_0_41253 r_named_0_41254 0 core_ops_BitXor_Output 0 2 [ref r_named_0_41253 [int 32]] [ref r_named_0_41254 [int 32]] [abstract core_ops_BitXor_Output 0 2 [int 32] [int 32]] 
associated_type 0 0 core_ops_BitXor_Output 0 1 [int 8] [int 8] 
fn core_ops_i8__BitXor_bitxor 0 0 args 2 self [int 8] other [int 8] return [int 8] 1 core_ops_BitXor_bitxor 0 1 [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] binop BiBitXor ([int 8] var self) ([int 8] var other)) ([int 8] var __result)) 
associated_type 1 r_named_0_41315 0 core_ops_BitXor_Output 0 2 [int 8] [ref r_named_0_41315 [int 8]] [abstract core_ops_BitXor_Output 0 2 [int 8] [int 8]] 
associated_type 1 r_named_0_41357 0 core_ops_BitXor_Output 0 2 [ref r_named_0_41357 [int 8]] [int 8] [abstract core_ops_BitXor_Output 0 2 [int 8] [int 8]] 
associated_type 2 r_named_0_41398 r_named_0_41399 0 core_ops_BitXor_Output 0 2 [ref r_named_0_41398 [int 8]] [ref r_named_0_41399 [int 8]] [abstract core_ops_BitXor_Output 0 2 [int 8] [int 8]] 
associated_type 0 0 core_ops_BitXor_Output 0 1 [int 16] [int 16] 
fn core_ops_i16__BitXor_bitxor 0 0 args 2 self [int 16] other [int 16] return [int 16] 1 core_ops_BitXor_bitxor 0 1 [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] binop BiBitXor ([int 16] var self) ([int 16] var other)) ([int 16] var __result)) 
associated_type 1 r_named_0_41460 0 core_ops_BitXor_Output 0 2 [int 16] [ref r_named_0_41460 [int 16]] [abstract core_ops_BitXor_Output 0 2 [int 16] [int 16]] 
associated_type 1 r_named_0_41502 0 core_ops_BitXor_Output 0 2 [ref r_named_0_41502 [int 16]] [int 16] [abstract core_ops_BitXor_Output 0 2 [int 16] [int 16]] 
associated_type 2 r_named_0_41543 r_named_0_41544 0 core_ops_BitXor_Output 0 2 [ref r_named_0_41543 [int 16]] [ref r_named_0_41544 [int 16]] [abstract core_ops_BitXor_Output 0 2 [int 16] [int 16]] 
associated_type 0 0 core_ops_BitXor_Output 0 1 [int 32] [int 32] 
fn core_ops_i32__BitXor_bitxor 0 0 args 2 self [int 32] other [int 32] return [int 32] 1 core_ops_BitXor_bitxor 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiBitXor ([int 32] var self) ([int 32] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_41605 0 core_ops_BitXor_Output 0 2 [int 32] [ref r_named_0_41605 [int 32]] [abstract core_ops_BitXor_Output 0 2 [int 32] [int 32]] 
associated_type 1 r_named_0_41647 0 core_ops_BitXor_Output 0 2 [ref r_named_0_41647 [int 32]] [int 32] [abstract core_ops_BitXor_Output 0 2 [int 32] [int 32]] 
associated_type 2 r_named_0_41688 r_named_0_41689 0 core_ops_BitXor_Output 0 2 [ref r_named_0_41688 [int 32]] [ref r_named_0_41689 [int 32]] [abstract core_ops_BitXor_Output 0 2 [int 32] [int 32]] 
associated_type 0 0 core_ops_BitXor_Output 0 1 [int 64] [int 64] 
fn core_ops_i64__BitXor_bitxor 0 0 args 2 self [int 64] other [int 64] return [int 64] 1 core_ops_BitXor_bitxor 0 1 [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] binop BiBitXor ([int 64] var self) ([int 64] var other)) ([int 64] var __result)) 
associated_type 1 r_named_0_41750 0 core_ops_BitXor_Output 0 2 [int 64] [ref r_named_0_41750 [int 64]] [abstract core_ops_BitXor_Output 0 2 [int 64] [int 64]] 
associated_type 1 r_named_0_41792 0 core_ops_BitXor_Output 0 2 [ref r_named_0_41792 [int 64]] [int 64] [abstract core_ops_BitXor_Output 0 2 [int 64] [int 64]] 
associated_type 2 r_named_0_41833 r_named_0_41834 0 core_ops_BitXor_Output 0 2 [ref r_named_0_41833 [int 64]] [ref r_named_0_41834 [int 64]] [abstract core_ops_BitXor_Output 0 2 [int 64] [int 64]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 8] [uint 8] [uint 8] 
fn core_ops_u8__Shl_shl 0 0 args 2 self [uint 8] other [uint 8] return [uint 8] 1 core_ops_Shl_shl 0 2 [uint 8] [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] binop BiShl ([uint 8] var self) ([uint 8] var other)) ([uint 8] var __result)) 
associated_type 1 r_named_0_41912 0 core_ops_Shl_Output 0 2 [uint 8] [ref r_named_0_41912 [uint 8]] [abstract core_ops_Shl_Output 0 2 [uint 8] [uint 8]] 
associated_type 1 r_named_0_41954 0 core_ops_Shl_Output 0 2 [ref r_named_0_41954 [uint 8]] [uint 8] [abstract core_ops_Shl_Output 0 2 [uint 8] [uint 8]] 
associated_type 2 r_named_0_41995 r_named_0_41996 0 core_ops_Shl_Output 0 2 [ref r_named_0_41995 [uint 8]] [ref r_named_0_41996 [uint 8]] [abstract core_ops_Shl_Output 0 2 [uint 8] [uint 8]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 16] [uint 8] [uint 8] 
fn core_ops_u8__Shl_shl 0 0 args 2 self [uint 8] other [uint 16] return [uint 8] 1 core_ops_Shl_shl 0 2 [uint 16] [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] binop BiShl ([uint 8] var self) ([uint 16] var other)) ([uint 8] var __result)) 
associated_type 1 r_named_0_42059 0 core_ops_Shl_Output 0 2 [uint 16] [ref r_named_0_42059 [uint 8]] [abstract core_ops_Shl_Output 0 2 [uint 16] [uint 8]] 
associated_type 1 r_named_0_42101 0 core_ops_Shl_Output 0 2 [ref r_named_0_42101 [uint 16]] [uint 8] [abstract core_ops_Shl_Output 0 2 [uint 16] [uint 8]] 
associated_type 2 r_named_0_42142 r_named_0_42143 0 core_ops_Shl_Output 0 2 [ref r_named_0_42142 [uint 16]] [ref r_named_0_42143 [uint 8]] [abstract core_ops_Shl_Output 0 2 [uint 16] [uint 8]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 32] [uint 8] [uint 8] 
fn core_ops_u8__Shl_shl 0 0 args 2 self [uint 8] other [uint 32] return [uint 8] 1 core_ops_Shl_shl 0 2 [uint 32] [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] binop BiShl ([uint 8] var self) ([uint 32] var other)) ([uint 8] var __result)) 
associated_type 1 r_named_0_42206 0 core_ops_Shl_Output 0 2 [uint 32] [ref r_named_0_42206 [uint 8]] [abstract core_ops_Shl_Output 0 2 [uint 32] [uint 8]] 
associated_type 1 r_named_0_42248 0 core_ops_Shl_Output 0 2 [ref r_named_0_42248 [uint 32]] [uint 8] [abstract core_ops_Shl_Output 0 2 [uint 32] [uint 8]] 
associated_type 2 r_named_0_42289 r_named_0_42290 0 core_ops_Shl_Output 0 2 [ref r_named_0_42289 [uint 32]] [ref r_named_0_42290 [uint 8]] [abstract core_ops_Shl_Output 0 2 [uint 32] [uint 8]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 64] [uint 8] [uint 8] 
fn core_ops_u8__Shl_shl 0 0 args 2 self [uint 8] other [uint 64] return [uint 8] 1 core_ops_Shl_shl 0 2 [uint 64] [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] binop BiShl ([uint 8] var self) ([uint 64] var other)) ([uint 8] var __result)) 
associated_type 1 r_named_0_42353 0 core_ops_Shl_Output 0 2 [uint 64] [ref r_named_0_42353 [uint 8]] [abstract core_ops_Shl_Output 0 2 [uint 64] [uint 8]] 
associated_type 1 r_named_0_42395 0 core_ops_Shl_Output 0 2 [ref r_named_0_42395 [uint 64]] [uint 8] [abstract core_ops_Shl_Output 0 2 [uint 64] [uint 8]] 
associated_type 2 r_named_0_42436 r_named_0_42437 0 core_ops_Shl_Output 0 2 [ref r_named_0_42436 [uint 64]] [ref r_named_0_42437 [uint 8]] [abstract core_ops_Shl_Output 0 2 [uint 64] [uint 8]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 32] [uint 8] [uint 8] 
fn core_ops_u8__Shl_shl 0 0 args 2 self [uint 8] other [uint 32] return [uint 8] 1 core_ops_Shl_shl 0 2 [uint 32] [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] binop BiShl ([uint 8] var self) ([uint 32] var other)) ([uint 8] var __result)) 
associated_type 1 r_named_0_42500 0 core_ops_Shl_Output 0 2 [uint 32] [ref r_named_0_42500 [uint 8]] [abstract core_ops_Shl_Output 0 2 [uint 32] [uint 8]] 
associated_type 1 r_named_0_42542 0 core_ops_Shl_Output 0 2 [ref r_named_0_42542 [uint 32]] [uint 8] [abstract core_ops_Shl_Output 0 2 [uint 32] [uint 8]] 
associated_type 2 r_named_0_42583 r_named_0_42584 0 core_ops_Shl_Output 0 2 [ref r_named_0_42583 [uint 32]] [ref r_named_0_42584 [uint 8]] [abstract core_ops_Shl_Output 0 2 [uint 32] [uint 8]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 8] [uint 8] [uint 8] 
fn core_ops_u8__Shl_shl 0 0 args 2 self [uint 8] other [int 8] return [uint 8] 1 core_ops_Shl_shl 0 2 [int 8] [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] binop BiShl ([uint 8] var self) ([int 8] var other)) ([uint 8] var __result)) 
associated_type 1 r_named_0_42647 0 core_ops_Shl_Output 0 2 [int 8] [ref r_named_0_42647 [uint 8]] [abstract core_ops_Shl_Output 0 2 [int 8] [uint 8]] 
associated_type 1 r_named_0_42689 0 core_ops_Shl_Output 0 2 [ref r_named_0_42689 [int 8]] [uint 8] [abstract core_ops_Shl_Output 0 2 [int 8] [uint 8]] 
associated_type 2 r_named_0_42730 r_named_0_42731 0 core_ops_Shl_Output 0 2 [ref r_named_0_42730 [int 8]] [ref r_named_0_42731 [uint 8]] [abstract core_ops_Shl_Output 0 2 [int 8] [uint 8]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 16] [uint 8] [uint 8] 
fn core_ops_u8__Shl_shl 0 0 args 2 self [uint 8] other [int 16] return [uint 8] 1 core_ops_Shl_shl 0 2 [int 16] [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] binop BiShl ([uint 8] var self) ([int 16] var other)) ([uint 8] var __result)) 
associated_type 1 r_named_0_42794 0 core_ops_Shl_Output 0 2 [int 16] [ref r_named_0_42794 [uint 8]] [abstract core_ops_Shl_Output 0 2 [int 16] [uint 8]] 
associated_type 1 r_named_0_42836 0 core_ops_Shl_Output 0 2 [ref r_named_0_42836 [int 16]] [uint 8] [abstract core_ops_Shl_Output 0 2 [int 16] [uint 8]] 
associated_type 2 r_named_0_42877 r_named_0_42878 0 core_ops_Shl_Output 0 2 [ref r_named_0_42877 [int 16]] [ref r_named_0_42878 [uint 8]] [abstract core_ops_Shl_Output 0 2 [int 16] [uint 8]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 32] [uint 8] [uint 8] 
fn core_ops_u8__Shl_shl 0 0 args 2 self [uint 8] other [int 32] return [uint 8] 1 core_ops_Shl_shl 0 2 [int 32] [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] binop BiShl ([uint 8] var self) ([int 32] var other)) ([uint 8] var __result)) 
associated_type 1 r_named_0_42941 0 core_ops_Shl_Output 0 2 [int 32] [ref r_named_0_42941 [uint 8]] [abstract core_ops_Shl_Output 0 2 [int 32] [uint 8]] 
associated_type 1 r_named_0_42983 0 core_ops_Shl_Output 0 2 [ref r_named_0_42983 [int 32]] [uint 8] [abstract core_ops_Shl_Output 0 2 [int 32] [uint 8]] 
associated_type 2 r_named_0_43024 r_named_0_43025 0 core_ops_Shl_Output 0 2 [ref r_named_0_43024 [int 32]] [ref r_named_0_43025 [uint 8]] [abstract core_ops_Shl_Output 0 2 [int 32] [uint 8]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 64] [uint 8] [uint 8] 
fn core_ops_u8__Shl_shl 0 0 args 2 self [uint 8] other [int 64] return [uint 8] 1 core_ops_Shl_shl 0 2 [int 64] [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] binop BiShl ([uint 8] var self) ([int 64] var other)) ([uint 8] var __result)) 
associated_type 1 r_named_0_43088 0 core_ops_Shl_Output 0 2 [int 64] [ref r_named_0_43088 [uint 8]] [abstract core_ops_Shl_Output 0 2 [int 64] [uint 8]] 
associated_type 1 r_named_0_43130 0 core_ops_Shl_Output 0 2 [ref r_named_0_43130 [int 64]] [uint 8] [abstract core_ops_Shl_Output 0 2 [int 64] [uint 8]] 
associated_type 2 r_named_0_43171 r_named_0_43172 0 core_ops_Shl_Output 0 2 [ref r_named_0_43171 [int 64]] [ref r_named_0_43172 [uint 8]] [abstract core_ops_Shl_Output 0 2 [int 64] [uint 8]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 32] [uint 8] [uint 8] 
fn core_ops_u8__Shl_shl 0 0 args 2 self [uint 8] other [int 32] return [uint 8] 1 core_ops_Shl_shl 0 2 [int 32] [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] binop BiShl ([uint 8] var self) ([int 32] var other)) ([uint 8] var __result)) 
associated_type 1 r_named_0_43235 0 core_ops_Shl_Output 0 2 [int 32] [ref r_named_0_43235 [uint 8]] [abstract core_ops_Shl_Output 0 2 [int 32] [uint 8]] 
associated_type 1 r_named_0_43277 0 core_ops_Shl_Output 0 2 [ref r_named_0_43277 [int 32]] [uint 8] [abstract core_ops_Shl_Output 0 2 [int 32] [uint 8]] 
associated_type 2 r_named_0_43318 r_named_0_43319 0 core_ops_Shl_Output 0 2 [ref r_named_0_43318 [int 32]] [ref r_named_0_43319 [uint 8]] [abstract core_ops_Shl_Output 0 2 [int 32] [uint 8]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 8] [uint 16] [uint 16] 
fn core_ops_u16__Shl_shl 0 0 args 2 self [uint 16] other [uint 8] return [uint 16] 1 core_ops_Shl_shl 0 2 [uint 8] [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] binop BiShl ([uint 16] var self) ([uint 8] var other)) ([uint 16] var __result)) 
associated_type 1 r_named_0_43382 0 core_ops_Shl_Output 0 2 [uint 8] [ref r_named_0_43382 [uint 16]] [abstract core_ops_Shl_Output 0 2 [uint 8] [uint 16]] 
associated_type 1 r_named_0_43424 0 core_ops_Shl_Output 0 2 [ref r_named_0_43424 [uint 8]] [uint 16] [abstract core_ops_Shl_Output 0 2 [uint 8] [uint 16]] 
associated_type 2 r_named_0_43465 r_named_0_43466 0 core_ops_Shl_Output 0 2 [ref r_named_0_43465 [uint 8]] [ref r_named_0_43466 [uint 16]] [abstract core_ops_Shl_Output 0 2 [uint 8] [uint 16]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 16] [uint 16] [uint 16] 
fn core_ops_u16__Shl_shl 0 0 args 2 self [uint 16] other [uint 16] return [uint 16] 1 core_ops_Shl_shl 0 2 [uint 16] [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] binop BiShl ([uint 16] var self) ([uint 16] var other)) ([uint 16] var __result)) 
associated_type 1 r_named_0_43529 0 core_ops_Shl_Output 0 2 [uint 16] [ref r_named_0_43529 [uint 16]] [abstract core_ops_Shl_Output 0 2 [uint 16] [uint 16]] 
associated_type 1 r_named_0_43571 0 core_ops_Shl_Output 0 2 [ref r_named_0_43571 [uint 16]] [uint 16] [abstract core_ops_Shl_Output 0 2 [uint 16] [uint 16]] 
associated_type 2 r_named_0_43612 r_named_0_43613 0 core_ops_Shl_Output 0 2 [ref r_named_0_43612 [uint 16]] [ref r_named_0_43613 [uint 16]] [abstract core_ops_Shl_Output 0 2 [uint 16] [uint 16]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 32] [uint 16] [uint 16] 
fn core_ops_u16__Shl_shl 0 0 args 2 self [uint 16] other [uint 32] return [uint 16] 1 core_ops_Shl_shl 0 2 [uint 32] [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] binop BiShl ([uint 16] var self) ([uint 32] var other)) ([uint 16] var __result)) 
associated_type 1 r_named_0_43676 0 core_ops_Shl_Output 0 2 [uint 32] [ref r_named_0_43676 [uint 16]] [abstract core_ops_Shl_Output 0 2 [uint 32] [uint 16]] 
associated_type 1 r_named_0_43718 0 core_ops_Shl_Output 0 2 [ref r_named_0_43718 [uint 32]] [uint 16] [abstract core_ops_Shl_Output 0 2 [uint 32] [uint 16]] 
associated_type 2 r_named_0_43759 r_named_0_43760 0 core_ops_Shl_Output 0 2 [ref r_named_0_43759 [uint 32]] [ref r_named_0_43760 [uint 16]] [abstract core_ops_Shl_Output 0 2 [uint 32] [uint 16]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 64] [uint 16] [uint 16] 
fn core_ops_u16__Shl_shl 0 0 args 2 self [uint 16] other [uint 64] return [uint 16] 1 core_ops_Shl_shl 0 2 [uint 64] [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] binop BiShl ([uint 16] var self) ([uint 64] var other)) ([uint 16] var __result)) 
associated_type 1 r_named_0_43823 0 core_ops_Shl_Output 0 2 [uint 64] [ref r_named_0_43823 [uint 16]] [abstract core_ops_Shl_Output 0 2 [uint 64] [uint 16]] 
associated_type 1 r_named_0_43865 0 core_ops_Shl_Output 0 2 [ref r_named_0_43865 [uint 64]] [uint 16] [abstract core_ops_Shl_Output 0 2 [uint 64] [uint 16]] 
associated_type 2 r_named_0_43906 r_named_0_43907 0 core_ops_Shl_Output 0 2 [ref r_named_0_43906 [uint 64]] [ref r_named_0_43907 [uint 16]] [abstract core_ops_Shl_Output 0 2 [uint 64] [uint 16]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 32] [uint 16] [uint 16] 
fn core_ops_u16__Shl_shl 0 0 args 2 self [uint 16] other [uint 32] return [uint 16] 1 core_ops_Shl_shl 0 2 [uint 32] [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] binop BiShl ([uint 16] var self) ([uint 32] var other)) ([uint 16] var __result)) 
associated_type 1 r_named_0_43970 0 core_ops_Shl_Output 0 2 [uint 32] [ref r_named_0_43970 [uint 16]] [abstract core_ops_Shl_Output 0 2 [uint 32] [uint 16]] 
associated_type 1 r_named_0_44012 0 core_ops_Shl_Output 0 2 [ref r_named_0_44012 [uint 32]] [uint 16] [abstract core_ops_Shl_Output 0 2 [uint 32] [uint 16]] 
associated_type 2 r_named_0_44053 r_named_0_44054 0 core_ops_Shl_Output 0 2 [ref r_named_0_44053 [uint 32]] [ref r_named_0_44054 [uint 16]] [abstract core_ops_Shl_Output 0 2 [uint 32] [uint 16]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 8] [uint 16] [uint 16] 
fn core_ops_u16__Shl_shl 0 0 args 2 self [uint 16] other [int 8] return [uint 16] 1 core_ops_Shl_shl 0 2 [int 8] [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] binop BiShl ([uint 16] var self) ([int 8] var other)) ([uint 16] var __result)) 
associated_type 1 r_named_0_44117 0 core_ops_Shl_Output 0 2 [int 8] [ref r_named_0_44117 [uint 16]] [abstract core_ops_Shl_Output 0 2 [int 8] [uint 16]] 
associated_type 1 r_named_0_44159 0 core_ops_Shl_Output 0 2 [ref r_named_0_44159 [int 8]] [uint 16] [abstract core_ops_Shl_Output 0 2 [int 8] [uint 16]] 
associated_type 2 r_named_0_44200 r_named_0_44201 0 core_ops_Shl_Output 0 2 [ref r_named_0_44200 [int 8]] [ref r_named_0_44201 [uint 16]] [abstract core_ops_Shl_Output 0 2 [int 8] [uint 16]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 16] [uint 16] [uint 16] 
fn core_ops_u16__Shl_shl 0 0 args 2 self [uint 16] other [int 16] return [uint 16] 1 core_ops_Shl_shl 0 2 [int 16] [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] binop BiShl ([uint 16] var self) ([int 16] var other)) ([uint 16] var __result)) 
associated_type 1 r_named_0_44264 0 core_ops_Shl_Output 0 2 [int 16] [ref r_named_0_44264 [uint 16]] [abstract core_ops_Shl_Output 0 2 [int 16] [uint 16]] 
associated_type 1 r_named_0_44306 0 core_ops_Shl_Output 0 2 [ref r_named_0_44306 [int 16]] [uint 16] [abstract core_ops_Shl_Output 0 2 [int 16] [uint 16]] 
associated_type 2 r_named_0_44347 r_named_0_44348 0 core_ops_Shl_Output 0 2 [ref r_named_0_44347 [int 16]] [ref r_named_0_44348 [uint 16]] [abstract core_ops_Shl_Output 0 2 [int 16] [uint 16]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 32] [uint 16] [uint 16] 
fn core_ops_u16__Shl_shl 0 0 args 2 self [uint 16] other [int 32] return [uint 16] 1 core_ops_Shl_shl 0 2 [int 32] [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] binop BiShl ([uint 16] var self) ([int 32] var other)) ([uint 16] var __result)) 
associated_type 1 r_named_0_44411 0 core_ops_Shl_Output 0 2 [int 32] [ref r_named_0_44411 [uint 16]] [abstract core_ops_Shl_Output 0 2 [int 32] [uint 16]] 
associated_type 1 r_named_0_44453 0 core_ops_Shl_Output 0 2 [ref r_named_0_44453 [int 32]] [uint 16] [abstract core_ops_Shl_Output 0 2 [int 32] [uint 16]] 
associated_type 2 r_named_0_44494 r_named_0_44495 0 core_ops_Shl_Output 0 2 [ref r_named_0_44494 [int 32]] [ref r_named_0_44495 [uint 16]] [abstract core_ops_Shl_Output 0 2 [int 32] [uint 16]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 64] [uint 16] [uint 16] 
fn core_ops_u16__Shl_shl 0 0 args 2 self [uint 16] other [int 64] return [uint 16] 1 core_ops_Shl_shl 0 2 [int 64] [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] binop BiShl ([uint 16] var self) ([int 64] var other)) ([uint 16] var __result)) 
associated_type 1 r_named_0_44558 0 core_ops_Shl_Output 0 2 [int 64] [ref r_named_0_44558 [uint 16]] [abstract core_ops_Shl_Output 0 2 [int 64] [uint 16]] 
associated_type 1 r_named_0_44600 0 core_ops_Shl_Output 0 2 [ref r_named_0_44600 [int 64]] [uint 16] [abstract core_ops_Shl_Output 0 2 [int 64] [uint 16]] 
associated_type 2 r_named_0_44641 r_named_0_44642 0 core_ops_Shl_Output 0 2 [ref r_named_0_44641 [int 64]] [ref r_named_0_44642 [uint 16]] [abstract core_ops_Shl_Output 0 2 [int 64] [uint 16]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 32] [uint 16] [uint 16] 
fn core_ops_u16__Shl_shl 0 0 args 2 self [uint 16] other [int 32] return [uint 16] 1 core_ops_Shl_shl 0 2 [int 32] [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] binop BiShl ([uint 16] var self) ([int 32] var other)) ([uint 16] var __result)) 
associated_type 1 r_named_0_44705 0 core_ops_Shl_Output 0 2 [int 32] [ref r_named_0_44705 [uint 16]] [abstract core_ops_Shl_Output 0 2 [int 32] [uint 16]] 
associated_type 1 r_named_0_44747 0 core_ops_Shl_Output 0 2 [ref r_named_0_44747 [int 32]] [uint 16] [abstract core_ops_Shl_Output 0 2 [int 32] [uint 16]] 
associated_type 2 r_named_0_44788 r_named_0_44789 0 core_ops_Shl_Output 0 2 [ref r_named_0_44788 [int 32]] [ref r_named_0_44789 [uint 16]] [abstract core_ops_Shl_Output 0 2 [int 32] [uint 16]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 8] [uint 32] [uint 32] 
fn core_ops_u32__Shl_shl 0 0 args 2 self [uint 32] other [uint 8] return [uint 32] 1 core_ops_Shl_shl 0 2 [uint 8] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShl ([uint 32] var self) ([uint 8] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_44852 0 core_ops_Shl_Output 0 2 [uint 8] [ref r_named_0_44852 [uint 32]] [abstract core_ops_Shl_Output 0 2 [uint 8] [uint 32]] 
associated_type 1 r_named_0_44894 0 core_ops_Shl_Output 0 2 [ref r_named_0_44894 [uint 8]] [uint 32] [abstract core_ops_Shl_Output 0 2 [uint 8] [uint 32]] 
associated_type 2 r_named_0_44935 r_named_0_44936 0 core_ops_Shl_Output 0 2 [ref r_named_0_44935 [uint 8]] [ref r_named_0_44936 [uint 32]] [abstract core_ops_Shl_Output 0 2 [uint 8] [uint 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 16] [uint 32] [uint 32] 
fn core_ops_u32__Shl_shl 0 0 args 2 self [uint 32] other [uint 16] return [uint 32] 1 core_ops_Shl_shl 0 2 [uint 16] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShl ([uint 32] var self) ([uint 16] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_44999 0 core_ops_Shl_Output 0 2 [uint 16] [ref r_named_0_44999 [uint 32]] [abstract core_ops_Shl_Output 0 2 [uint 16] [uint 32]] 
associated_type 1 r_named_0_45041 0 core_ops_Shl_Output 0 2 [ref r_named_0_45041 [uint 16]] [uint 32] [abstract core_ops_Shl_Output 0 2 [uint 16] [uint 32]] 
associated_type 2 r_named_0_45082 r_named_0_45083 0 core_ops_Shl_Output 0 2 [ref r_named_0_45082 [uint 16]] [ref r_named_0_45083 [uint 32]] [abstract core_ops_Shl_Output 0 2 [uint 16] [uint 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 32] [uint 32] [uint 32] 
fn core_ops_u32__Shl_shl 0 0 args 2 self [uint 32] other [uint 32] return [uint 32] 1 core_ops_Shl_shl 0 2 [uint 32] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShl ([uint 32] var self) ([uint 32] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_45146 0 core_ops_Shl_Output 0 2 [uint 32] [ref r_named_0_45146 [uint 32]] [abstract core_ops_Shl_Output 0 2 [uint 32] [uint 32]] 
associated_type 1 r_named_0_45188 0 core_ops_Shl_Output 0 2 [ref r_named_0_45188 [uint 32]] [uint 32] [abstract core_ops_Shl_Output 0 2 [uint 32] [uint 32]] 
associated_type 2 r_named_0_45229 r_named_0_45230 0 core_ops_Shl_Output 0 2 [ref r_named_0_45229 [uint 32]] [ref r_named_0_45230 [uint 32]] [abstract core_ops_Shl_Output 0 2 [uint 32] [uint 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 64] [uint 32] [uint 32] 
fn core_ops_u32__Shl_shl 0 0 args 2 self [uint 32] other [uint 64] return [uint 32] 1 core_ops_Shl_shl 0 2 [uint 64] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShl ([uint 32] var self) ([uint 64] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_45293 0 core_ops_Shl_Output 0 2 [uint 64] [ref r_named_0_45293 [uint 32]] [abstract core_ops_Shl_Output 0 2 [uint 64] [uint 32]] 
associated_type 1 r_named_0_45335 0 core_ops_Shl_Output 0 2 [ref r_named_0_45335 [uint 64]] [uint 32] [abstract core_ops_Shl_Output 0 2 [uint 64] [uint 32]] 
associated_type 2 r_named_0_45376 r_named_0_45377 0 core_ops_Shl_Output 0 2 [ref r_named_0_45376 [uint 64]] [ref r_named_0_45377 [uint 32]] [abstract core_ops_Shl_Output 0 2 [uint 64] [uint 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 32] [uint 32] [uint 32] 
fn core_ops_u32__Shl_shl 0 0 args 2 self [uint 32] other [uint 32] return [uint 32] 1 core_ops_Shl_shl 0 2 [uint 32] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShl ([uint 32] var self) ([uint 32] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_45440 0 core_ops_Shl_Output 0 2 [uint 32] [ref r_named_0_45440 [uint 32]] [abstract core_ops_Shl_Output 0 2 [uint 32] [uint 32]] 
associated_type 1 r_named_0_45482 0 core_ops_Shl_Output 0 2 [ref r_named_0_45482 [uint 32]] [uint 32] [abstract core_ops_Shl_Output 0 2 [uint 32] [uint 32]] 
associated_type 2 r_named_0_45523 r_named_0_45524 0 core_ops_Shl_Output 0 2 [ref r_named_0_45523 [uint 32]] [ref r_named_0_45524 [uint 32]] [abstract core_ops_Shl_Output 0 2 [uint 32] [uint 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 8] [uint 32] [uint 32] 
fn core_ops_u32__Shl_shl 0 0 args 2 self [uint 32] other [int 8] return [uint 32] 1 core_ops_Shl_shl 0 2 [int 8] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShl ([uint 32] var self) ([int 8] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_45587 0 core_ops_Shl_Output 0 2 [int 8] [ref r_named_0_45587 [uint 32]] [abstract core_ops_Shl_Output 0 2 [int 8] [uint 32]] 
associated_type 1 r_named_0_45629 0 core_ops_Shl_Output 0 2 [ref r_named_0_45629 [int 8]] [uint 32] [abstract core_ops_Shl_Output 0 2 [int 8] [uint 32]] 
associated_type 2 r_named_0_45670 r_named_0_45671 0 core_ops_Shl_Output 0 2 [ref r_named_0_45670 [int 8]] [ref r_named_0_45671 [uint 32]] [abstract core_ops_Shl_Output 0 2 [int 8] [uint 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 16] [uint 32] [uint 32] 
fn core_ops_u32__Shl_shl 0 0 args 2 self [uint 32] other [int 16] return [uint 32] 1 core_ops_Shl_shl 0 2 [int 16] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShl ([uint 32] var self) ([int 16] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_45734 0 core_ops_Shl_Output 0 2 [int 16] [ref r_named_0_45734 [uint 32]] [abstract core_ops_Shl_Output 0 2 [int 16] [uint 32]] 
associated_type 1 r_named_0_45776 0 core_ops_Shl_Output 0 2 [ref r_named_0_45776 [int 16]] [uint 32] [abstract core_ops_Shl_Output 0 2 [int 16] [uint 32]] 
associated_type 2 r_named_0_45817 r_named_0_45818 0 core_ops_Shl_Output 0 2 [ref r_named_0_45817 [int 16]] [ref r_named_0_45818 [uint 32]] [abstract core_ops_Shl_Output 0 2 [int 16] [uint 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 32] [uint 32] [uint 32] 
fn core_ops_u32__Shl_shl 0 0 args 2 self [uint 32] other [int 32] return [uint 32] 1 core_ops_Shl_shl 0 2 [int 32] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShl ([uint 32] var self) ([int 32] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_45881 0 core_ops_Shl_Output 0 2 [int 32] [ref r_named_0_45881 [uint 32]] [abstract core_ops_Shl_Output 0 2 [int 32] [uint 32]] 
associated_type 1 r_named_0_45923 0 core_ops_Shl_Output 0 2 [ref r_named_0_45923 [int 32]] [uint 32] [abstract core_ops_Shl_Output 0 2 [int 32] [uint 32]] 
associated_type 2 r_named_0_45964 r_named_0_45965 0 core_ops_Shl_Output 0 2 [ref r_named_0_45964 [int 32]] [ref r_named_0_45965 [uint 32]] [abstract core_ops_Shl_Output 0 2 [int 32] [uint 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 64] [uint 32] [uint 32] 
fn core_ops_u32__Shl_shl 0 0 args 2 self [uint 32] other [int 64] return [uint 32] 1 core_ops_Shl_shl 0 2 [int 64] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShl ([uint 32] var self) ([int 64] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_46028 0 core_ops_Shl_Output 0 2 [int 64] [ref r_named_0_46028 [uint 32]] [abstract core_ops_Shl_Output 0 2 [int 64] [uint 32]] 
associated_type 1 r_named_0_46070 0 core_ops_Shl_Output 0 2 [ref r_named_0_46070 [int 64]] [uint 32] [abstract core_ops_Shl_Output 0 2 [int 64] [uint 32]] 
associated_type 2 r_named_0_46111 r_named_0_46112 0 core_ops_Shl_Output 0 2 [ref r_named_0_46111 [int 64]] [ref r_named_0_46112 [uint 32]] [abstract core_ops_Shl_Output 0 2 [int 64] [uint 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 32] [uint 32] [uint 32] 
fn core_ops_u32__Shl_shl 0 0 args 2 self [uint 32] other [int 32] return [uint 32] 1 core_ops_Shl_shl 0 2 [int 32] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShl ([uint 32] var self) ([int 32] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_46175 0 core_ops_Shl_Output 0 2 [int 32] [ref r_named_0_46175 [uint 32]] [abstract core_ops_Shl_Output 0 2 [int 32] [uint 32]] 
associated_type 1 r_named_0_46217 0 core_ops_Shl_Output 0 2 [ref r_named_0_46217 [int 32]] [uint 32] [abstract core_ops_Shl_Output 0 2 [int 32] [uint 32]] 
associated_type 2 r_named_0_46258 r_named_0_46259 0 core_ops_Shl_Output 0 2 [ref r_named_0_46258 [int 32]] [ref r_named_0_46259 [uint 32]] [abstract core_ops_Shl_Output 0 2 [int 32] [uint 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 8] [uint 64] [uint 64] 
fn core_ops_u64__Shl_shl 0 0 args 2 self [uint 64] other [uint 8] return [uint 64] 1 core_ops_Shl_shl 0 2 [uint 8] [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] binop BiShl ([uint 64] var self) ([uint 8] var other)) ([uint 64] var __result)) 
associated_type 1 r_named_0_46322 0 core_ops_Shl_Output 0 2 [uint 8] [ref r_named_0_46322 [uint 64]] [abstract core_ops_Shl_Output 0 2 [uint 8] [uint 64]] 
associated_type 1 r_named_0_46364 0 core_ops_Shl_Output 0 2 [ref r_named_0_46364 [uint 8]] [uint 64] [abstract core_ops_Shl_Output 0 2 [uint 8] [uint 64]] 
associated_type 2 r_named_0_46405 r_named_0_46406 0 core_ops_Shl_Output 0 2 [ref r_named_0_46405 [uint 8]] [ref r_named_0_46406 [uint 64]] [abstract core_ops_Shl_Output 0 2 [uint 8] [uint 64]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 16] [uint 64] [uint 64] 
fn core_ops_u64__Shl_shl 0 0 args 2 self [uint 64] other [uint 16] return [uint 64] 1 core_ops_Shl_shl 0 2 [uint 16] [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] binop BiShl ([uint 64] var self) ([uint 16] var other)) ([uint 64] var __result)) 
associated_type 1 r_named_0_46469 0 core_ops_Shl_Output 0 2 [uint 16] [ref r_named_0_46469 [uint 64]] [abstract core_ops_Shl_Output 0 2 [uint 16] [uint 64]] 
associated_type 1 r_named_0_46511 0 core_ops_Shl_Output 0 2 [ref r_named_0_46511 [uint 16]] [uint 64] [abstract core_ops_Shl_Output 0 2 [uint 16] [uint 64]] 
associated_type 2 r_named_0_46552 r_named_0_46553 0 core_ops_Shl_Output 0 2 [ref r_named_0_46552 [uint 16]] [ref r_named_0_46553 [uint 64]] [abstract core_ops_Shl_Output 0 2 [uint 16] [uint 64]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 32] [uint 64] [uint 64] 
fn core_ops_u64__Shl_shl 0 0 args 2 self [uint 64] other [uint 32] return [uint 64] 1 core_ops_Shl_shl 0 2 [uint 32] [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] binop BiShl ([uint 64] var self) ([uint 32] var other)) ([uint 64] var __result)) 
associated_type 1 r_named_0_46616 0 core_ops_Shl_Output 0 2 [uint 32] [ref r_named_0_46616 [uint 64]] [abstract core_ops_Shl_Output 0 2 [uint 32] [uint 64]] 
associated_type 1 r_named_0_46658 0 core_ops_Shl_Output 0 2 [ref r_named_0_46658 [uint 32]] [uint 64] [abstract core_ops_Shl_Output 0 2 [uint 32] [uint 64]] 
associated_type 2 r_named_0_46699 r_named_0_46700 0 core_ops_Shl_Output 0 2 [ref r_named_0_46699 [uint 32]] [ref r_named_0_46700 [uint 64]] [abstract core_ops_Shl_Output 0 2 [uint 32] [uint 64]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 64] [uint 64] [uint 64] 
fn core_ops_u64__Shl_shl 0 0 args 2 self [uint 64] other [uint 64] return [uint 64] 1 core_ops_Shl_shl 0 2 [uint 64] [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] binop BiShl ([uint 64] var self) ([uint 64] var other)) ([uint 64] var __result)) 
associated_type 1 r_named_0_46763 0 core_ops_Shl_Output 0 2 [uint 64] [ref r_named_0_46763 [uint 64]] [abstract core_ops_Shl_Output 0 2 [uint 64] [uint 64]] 
associated_type 1 r_named_0_46805 0 core_ops_Shl_Output 0 2 [ref r_named_0_46805 [uint 64]] [uint 64] [abstract core_ops_Shl_Output 0 2 [uint 64] [uint 64]] 
associated_type 2 r_named_0_46846 r_named_0_46847 0 core_ops_Shl_Output 0 2 [ref r_named_0_46846 [uint 64]] [ref r_named_0_46847 [uint 64]] [abstract core_ops_Shl_Output 0 2 [uint 64] [uint 64]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 32] [uint 64] [uint 64] 
fn core_ops_u64__Shl_shl 0 0 args 2 self [uint 64] other [uint 32] return [uint 64] 1 core_ops_Shl_shl 0 2 [uint 32] [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] binop BiShl ([uint 64] var self) ([uint 32] var other)) ([uint 64] var __result)) 
associated_type 1 r_named_0_46910 0 core_ops_Shl_Output 0 2 [uint 32] [ref r_named_0_46910 [uint 64]] [abstract core_ops_Shl_Output 0 2 [uint 32] [uint 64]] 
associated_type 1 r_named_0_46952 0 core_ops_Shl_Output 0 2 [ref r_named_0_46952 [uint 32]] [uint 64] [abstract core_ops_Shl_Output 0 2 [uint 32] [uint 64]] 
associated_type 2 r_named_0_46993 r_named_0_46994 0 core_ops_Shl_Output 0 2 [ref r_named_0_46993 [uint 32]] [ref r_named_0_46994 [uint 64]] [abstract core_ops_Shl_Output 0 2 [uint 32] [uint 64]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 8] [uint 64] [uint 64] 
fn core_ops_u64__Shl_shl 0 0 args 2 self [uint 64] other [int 8] return [uint 64] 1 core_ops_Shl_shl 0 2 [int 8] [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] binop BiShl ([uint 64] var self) ([int 8] var other)) ([uint 64] var __result)) 
associated_type 1 r_named_0_47057 0 core_ops_Shl_Output 0 2 [int 8] [ref r_named_0_47057 [uint 64]] [abstract core_ops_Shl_Output 0 2 [int 8] [uint 64]] 
associated_type 1 r_named_0_47099 0 core_ops_Shl_Output 0 2 [ref r_named_0_47099 [int 8]] [uint 64] [abstract core_ops_Shl_Output 0 2 [int 8] [uint 64]] 
associated_type 2 r_named_0_47140 r_named_0_47141 0 core_ops_Shl_Output 0 2 [ref r_named_0_47140 [int 8]] [ref r_named_0_47141 [uint 64]] [abstract core_ops_Shl_Output 0 2 [int 8] [uint 64]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 16] [uint 64] [uint 64] 
fn core_ops_u64__Shl_shl 0 0 args 2 self [uint 64] other [int 16] return [uint 64] 1 core_ops_Shl_shl 0 2 [int 16] [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] binop BiShl ([uint 64] var self) ([int 16] var other)) ([uint 64] var __result)) 
associated_type 1 r_named_0_47204 0 core_ops_Shl_Output 0 2 [int 16] [ref r_named_0_47204 [uint 64]] [abstract core_ops_Shl_Output 0 2 [int 16] [uint 64]] 
associated_type 1 r_named_0_47246 0 core_ops_Shl_Output 0 2 [ref r_named_0_47246 [int 16]] [uint 64] [abstract core_ops_Shl_Output 0 2 [int 16] [uint 64]] 
associated_type 2 r_named_0_47287 r_named_0_47288 0 core_ops_Shl_Output 0 2 [ref r_named_0_47287 [int 16]] [ref r_named_0_47288 [uint 64]] [abstract core_ops_Shl_Output 0 2 [int 16] [uint 64]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 32] [uint 64] [uint 64] 
fn core_ops_u64__Shl_shl 0 0 args 2 self [uint 64] other [int 32] return [uint 64] 1 core_ops_Shl_shl 0 2 [int 32] [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] binop BiShl ([uint 64] var self) ([int 32] var other)) ([uint 64] var __result)) 
associated_type 1 r_named_0_47351 0 core_ops_Shl_Output 0 2 [int 32] [ref r_named_0_47351 [uint 64]] [abstract core_ops_Shl_Output 0 2 [int 32] [uint 64]] 
associated_type 1 r_named_0_47393 0 core_ops_Shl_Output 0 2 [ref r_named_0_47393 [int 32]] [uint 64] [abstract core_ops_Shl_Output 0 2 [int 32] [uint 64]] 
associated_type 2 r_named_0_47434 r_named_0_47435 0 core_ops_Shl_Output 0 2 [ref r_named_0_47434 [int 32]] [ref r_named_0_47435 [uint 64]] [abstract core_ops_Shl_Output 0 2 [int 32] [uint 64]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 64] [uint 64] [uint 64] 
fn core_ops_u64__Shl_shl 0 0 args 2 self [uint 64] other [int 64] return [uint 64] 1 core_ops_Shl_shl 0 2 [int 64] [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] binop BiShl ([uint 64] var self) ([int 64] var other)) ([uint 64] var __result)) 
associated_type 1 r_named_0_47498 0 core_ops_Shl_Output 0 2 [int 64] [ref r_named_0_47498 [uint 64]] [abstract core_ops_Shl_Output 0 2 [int 64] [uint 64]] 
associated_type 1 r_named_0_47540 0 core_ops_Shl_Output 0 2 [ref r_named_0_47540 [int 64]] [uint 64] [abstract core_ops_Shl_Output 0 2 [int 64] [uint 64]] 
associated_type 2 r_named_0_47581 r_named_0_47582 0 core_ops_Shl_Output 0 2 [ref r_named_0_47581 [int 64]] [ref r_named_0_47582 [uint 64]] [abstract core_ops_Shl_Output 0 2 [int 64] [uint 64]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 32] [uint 64] [uint 64] 
fn core_ops_u64__Shl_shl 0 0 args 2 self [uint 64] other [int 32] return [uint 64] 1 core_ops_Shl_shl 0 2 [int 32] [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] binop BiShl ([uint 64] var self) ([int 32] var other)) ([uint 64] var __result)) 
associated_type 1 r_named_0_47645 0 core_ops_Shl_Output 0 2 [int 32] [ref r_named_0_47645 [uint 64]] [abstract core_ops_Shl_Output 0 2 [int 32] [uint 64]] 
associated_type 1 r_named_0_47687 0 core_ops_Shl_Output 0 2 [ref r_named_0_47687 [int 32]] [uint 64] [abstract core_ops_Shl_Output 0 2 [int 32] [uint 64]] 
associated_type 2 r_named_0_47728 r_named_0_47729 0 core_ops_Shl_Output 0 2 [ref r_named_0_47728 [int 32]] [ref r_named_0_47729 [uint 64]] [abstract core_ops_Shl_Output 0 2 [int 32] [uint 64]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 8] [uint 32] [uint 32] 
fn core_ops_usize__Shl_shl 0 0 args 2 self [uint 32] other [uint 8] return [uint 32] 1 core_ops_Shl_shl 0 2 [uint 8] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShl ([uint 32] var self) ([uint 8] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_47792 0 core_ops_Shl_Output 0 2 [uint 8] [ref r_named_0_47792 [uint 32]] [abstract core_ops_Shl_Output 0 2 [uint 8] [uint 32]] 
associated_type 1 r_named_0_47834 0 core_ops_Shl_Output 0 2 [ref r_named_0_47834 [uint 8]] [uint 32] [abstract core_ops_Shl_Output 0 2 [uint 8] [uint 32]] 
associated_type 2 r_named_0_47875 r_named_0_47876 0 core_ops_Shl_Output 0 2 [ref r_named_0_47875 [uint 8]] [ref r_named_0_47876 [uint 32]] [abstract core_ops_Shl_Output 0 2 [uint 8] [uint 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 16] [uint 32] [uint 32] 
fn core_ops_usize__Shl_shl 0 0 args 2 self [uint 32] other [uint 16] return [uint 32] 1 core_ops_Shl_shl 0 2 [uint 16] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShl ([uint 32] var self) ([uint 16] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_47939 0 core_ops_Shl_Output 0 2 [uint 16] [ref r_named_0_47939 [uint 32]] [abstract core_ops_Shl_Output 0 2 [uint 16] [uint 32]] 
associated_type 1 r_named_0_47981 0 core_ops_Shl_Output 0 2 [ref r_named_0_47981 [uint 16]] [uint 32] [abstract core_ops_Shl_Output 0 2 [uint 16] [uint 32]] 
associated_type 2 r_named_0_48022 r_named_0_48023 0 core_ops_Shl_Output 0 2 [ref r_named_0_48022 [uint 16]] [ref r_named_0_48023 [uint 32]] [abstract core_ops_Shl_Output 0 2 [uint 16] [uint 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 32] [uint 32] [uint 32] 
fn core_ops_usize__Shl_shl 0 0 args 2 self [uint 32] other [uint 32] return [uint 32] 1 core_ops_Shl_shl 0 2 [uint 32] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShl ([uint 32] var self) ([uint 32] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_48086 0 core_ops_Shl_Output 0 2 [uint 32] [ref r_named_0_48086 [uint 32]] [abstract core_ops_Shl_Output 0 2 [uint 32] [uint 32]] 
associated_type 1 r_named_0_48128 0 core_ops_Shl_Output 0 2 [ref r_named_0_48128 [uint 32]] [uint 32] [abstract core_ops_Shl_Output 0 2 [uint 32] [uint 32]] 
associated_type 2 r_named_0_48169 r_named_0_48170 0 core_ops_Shl_Output 0 2 [ref r_named_0_48169 [uint 32]] [ref r_named_0_48170 [uint 32]] [abstract core_ops_Shl_Output 0 2 [uint 32] [uint 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 64] [uint 32] [uint 32] 
fn core_ops_usize__Shl_shl 0 0 args 2 self [uint 32] other [uint 64] return [uint 32] 1 core_ops_Shl_shl 0 2 [uint 64] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShl ([uint 32] var self) ([uint 64] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_48233 0 core_ops_Shl_Output 0 2 [uint 64] [ref r_named_0_48233 [uint 32]] [abstract core_ops_Shl_Output 0 2 [uint 64] [uint 32]] 
associated_type 1 r_named_0_48275 0 core_ops_Shl_Output 0 2 [ref r_named_0_48275 [uint 64]] [uint 32] [abstract core_ops_Shl_Output 0 2 [uint 64] [uint 32]] 
associated_type 2 r_named_0_48316 r_named_0_48317 0 core_ops_Shl_Output 0 2 [ref r_named_0_48316 [uint 64]] [ref r_named_0_48317 [uint 32]] [abstract core_ops_Shl_Output 0 2 [uint 64] [uint 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 32] [uint 32] [uint 32] 
fn core_ops_usize__Shl_shl 0 0 args 2 self [uint 32] other [uint 32] return [uint 32] 1 core_ops_Shl_shl 0 2 [uint 32] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShl ([uint 32] var self) ([uint 32] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_48380 0 core_ops_Shl_Output 0 2 [uint 32] [ref r_named_0_48380 [uint 32]] [abstract core_ops_Shl_Output 0 2 [uint 32] [uint 32]] 
associated_type 1 r_named_0_48422 0 core_ops_Shl_Output 0 2 [ref r_named_0_48422 [uint 32]] [uint 32] [abstract core_ops_Shl_Output 0 2 [uint 32] [uint 32]] 
associated_type 2 r_named_0_48463 r_named_0_48464 0 core_ops_Shl_Output 0 2 [ref r_named_0_48463 [uint 32]] [ref r_named_0_48464 [uint 32]] [abstract core_ops_Shl_Output 0 2 [uint 32] [uint 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 8] [uint 32] [uint 32] 
fn core_ops_usize__Shl_shl 0 0 args 2 self [uint 32] other [int 8] return [uint 32] 1 core_ops_Shl_shl 0 2 [int 8] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShl ([uint 32] var self) ([int 8] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_48527 0 core_ops_Shl_Output 0 2 [int 8] [ref r_named_0_48527 [uint 32]] [abstract core_ops_Shl_Output 0 2 [int 8] [uint 32]] 
associated_type 1 r_named_0_48569 0 core_ops_Shl_Output 0 2 [ref r_named_0_48569 [int 8]] [uint 32] [abstract core_ops_Shl_Output 0 2 [int 8] [uint 32]] 
associated_type 2 r_named_0_48610 r_named_0_48611 0 core_ops_Shl_Output 0 2 [ref r_named_0_48610 [int 8]] [ref r_named_0_48611 [uint 32]] [abstract core_ops_Shl_Output 0 2 [int 8] [uint 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 16] [uint 32] [uint 32] 
fn core_ops_usize__Shl_shl 0 0 args 2 self [uint 32] other [int 16] return [uint 32] 1 core_ops_Shl_shl 0 2 [int 16] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShl ([uint 32] var self) ([int 16] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_48674 0 core_ops_Shl_Output 0 2 [int 16] [ref r_named_0_48674 [uint 32]] [abstract core_ops_Shl_Output 0 2 [int 16] [uint 32]] 
associated_type 1 r_named_0_48716 0 core_ops_Shl_Output 0 2 [ref r_named_0_48716 [int 16]] [uint 32] [abstract core_ops_Shl_Output 0 2 [int 16] [uint 32]] 
associated_type 2 r_named_0_48757 r_named_0_48758 0 core_ops_Shl_Output 0 2 [ref r_named_0_48757 [int 16]] [ref r_named_0_48758 [uint 32]] [abstract core_ops_Shl_Output 0 2 [int 16] [uint 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 32] [uint 32] [uint 32] 
fn core_ops_usize__Shl_shl 0 0 args 2 self [uint 32] other [int 32] return [uint 32] 1 core_ops_Shl_shl 0 2 [int 32] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShl ([uint 32] var self) ([int 32] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_48821 0 core_ops_Shl_Output 0 2 [int 32] [ref r_named_0_48821 [uint 32]] [abstract core_ops_Shl_Output 0 2 [int 32] [uint 32]] 
associated_type 1 r_named_0_48863 0 core_ops_Shl_Output 0 2 [ref r_named_0_48863 [int 32]] [uint 32] [abstract core_ops_Shl_Output 0 2 [int 32] [uint 32]] 
associated_type 2 r_named_0_48904 r_named_0_48905 0 core_ops_Shl_Output 0 2 [ref r_named_0_48904 [int 32]] [ref r_named_0_48905 [uint 32]] [abstract core_ops_Shl_Output 0 2 [int 32] [uint 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 64] [uint 32] [uint 32] 
fn core_ops_usize__Shl_shl 0 0 args 2 self [uint 32] other [int 64] return [uint 32] 1 core_ops_Shl_shl 0 2 [int 64] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShl ([uint 32] var self) ([int 64] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_48968 0 core_ops_Shl_Output 0 2 [int 64] [ref r_named_0_48968 [uint 32]] [abstract core_ops_Shl_Output 0 2 [int 64] [uint 32]] 
associated_type 1 r_named_0_49010 0 core_ops_Shl_Output 0 2 [ref r_named_0_49010 [int 64]] [uint 32] [abstract core_ops_Shl_Output 0 2 [int 64] [uint 32]] 
associated_type 2 r_named_0_49051 r_named_0_49052 0 core_ops_Shl_Output 0 2 [ref r_named_0_49051 [int 64]] [ref r_named_0_49052 [uint 32]] [abstract core_ops_Shl_Output 0 2 [int 64] [uint 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 32] [uint 32] [uint 32] 
fn core_ops_usize__Shl_shl 0 0 args 2 self [uint 32] other [int 32] return [uint 32] 1 core_ops_Shl_shl 0 2 [int 32] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShl ([uint 32] var self) ([int 32] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_49115 0 core_ops_Shl_Output 0 2 [int 32] [ref r_named_0_49115 [uint 32]] [abstract core_ops_Shl_Output 0 2 [int 32] [uint 32]] 
associated_type 1 r_named_0_49157 0 core_ops_Shl_Output 0 2 [ref r_named_0_49157 [int 32]] [uint 32] [abstract core_ops_Shl_Output 0 2 [int 32] [uint 32]] 
associated_type 2 r_named_0_49198 r_named_0_49199 0 core_ops_Shl_Output 0 2 [ref r_named_0_49198 [int 32]] [ref r_named_0_49199 [uint 32]] [abstract core_ops_Shl_Output 0 2 [int 32] [uint 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 8] [int 8] [int 8] 
fn core_ops_i8__Shl_shl 0 0 args 2 self [int 8] other [uint 8] return [int 8] 1 core_ops_Shl_shl 0 2 [uint 8] [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] binop BiShl ([int 8] var self) ([uint 8] var other)) ([int 8] var __result)) 
associated_type 1 r_named_0_49262 0 core_ops_Shl_Output 0 2 [uint 8] [ref r_named_0_49262 [int 8]] [abstract core_ops_Shl_Output 0 2 [uint 8] [int 8]] 
associated_type 1 r_named_0_49304 0 core_ops_Shl_Output 0 2 [ref r_named_0_49304 [uint 8]] [int 8] [abstract core_ops_Shl_Output 0 2 [uint 8] [int 8]] 
associated_type 2 r_named_0_49345 r_named_0_49346 0 core_ops_Shl_Output 0 2 [ref r_named_0_49345 [uint 8]] [ref r_named_0_49346 [int 8]] [abstract core_ops_Shl_Output 0 2 [uint 8] [int 8]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 16] [int 8] [int 8] 
fn core_ops_i8__Shl_shl 0 0 args 2 self [int 8] other [uint 16] return [int 8] 1 core_ops_Shl_shl 0 2 [uint 16] [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] binop BiShl ([int 8] var self) ([uint 16] var other)) ([int 8] var __result)) 
associated_type 1 r_named_0_49409 0 core_ops_Shl_Output 0 2 [uint 16] [ref r_named_0_49409 [int 8]] [abstract core_ops_Shl_Output 0 2 [uint 16] [int 8]] 
associated_type 1 r_named_0_49451 0 core_ops_Shl_Output 0 2 [ref r_named_0_49451 [uint 16]] [int 8] [abstract core_ops_Shl_Output 0 2 [uint 16] [int 8]] 
associated_type 2 r_named_0_49492 r_named_0_49493 0 core_ops_Shl_Output 0 2 [ref r_named_0_49492 [uint 16]] [ref r_named_0_49493 [int 8]] [abstract core_ops_Shl_Output 0 2 [uint 16] [int 8]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 32] [int 8] [int 8] 
fn core_ops_i8__Shl_shl 0 0 args 2 self [int 8] other [uint 32] return [int 8] 1 core_ops_Shl_shl 0 2 [uint 32] [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] binop BiShl ([int 8] var self) ([uint 32] var other)) ([int 8] var __result)) 
associated_type 1 r_named_0_49556 0 core_ops_Shl_Output 0 2 [uint 32] [ref r_named_0_49556 [int 8]] [abstract core_ops_Shl_Output 0 2 [uint 32] [int 8]] 
associated_type 1 r_named_0_49598 0 core_ops_Shl_Output 0 2 [ref r_named_0_49598 [uint 32]] [int 8] [abstract core_ops_Shl_Output 0 2 [uint 32] [int 8]] 
associated_type 2 r_named_0_49639 r_named_0_49640 0 core_ops_Shl_Output 0 2 [ref r_named_0_49639 [uint 32]] [ref r_named_0_49640 [int 8]] [abstract core_ops_Shl_Output 0 2 [uint 32] [int 8]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 64] [int 8] [int 8] 
fn core_ops_i8__Shl_shl 0 0 args 2 self [int 8] other [uint 64] return [int 8] 1 core_ops_Shl_shl 0 2 [uint 64] [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] binop BiShl ([int 8] var self) ([uint 64] var other)) ([int 8] var __result)) 
associated_type 1 r_named_0_49703 0 core_ops_Shl_Output 0 2 [uint 64] [ref r_named_0_49703 [int 8]] [abstract core_ops_Shl_Output 0 2 [uint 64] [int 8]] 
associated_type 1 r_named_0_49745 0 core_ops_Shl_Output 0 2 [ref r_named_0_49745 [uint 64]] [int 8] [abstract core_ops_Shl_Output 0 2 [uint 64] [int 8]] 
associated_type 2 r_named_0_49786 r_named_0_49787 0 core_ops_Shl_Output 0 2 [ref r_named_0_49786 [uint 64]] [ref r_named_0_49787 [int 8]] [abstract core_ops_Shl_Output 0 2 [uint 64] [int 8]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 32] [int 8] [int 8] 
fn core_ops_i8__Shl_shl 0 0 args 2 self [int 8] other [uint 32] return [int 8] 1 core_ops_Shl_shl 0 2 [uint 32] [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] binop BiShl ([int 8] var self) ([uint 32] var other)) ([int 8] var __result)) 
associated_type 1 r_named_0_49850 0 core_ops_Shl_Output 0 2 [uint 32] [ref r_named_0_49850 [int 8]] [abstract core_ops_Shl_Output 0 2 [uint 32] [int 8]] 
associated_type 1 r_named_0_49892 0 core_ops_Shl_Output 0 2 [ref r_named_0_49892 [uint 32]] [int 8] [abstract core_ops_Shl_Output 0 2 [uint 32] [int 8]] 
associated_type 2 r_named_0_49933 r_named_0_49934 0 core_ops_Shl_Output 0 2 [ref r_named_0_49933 [uint 32]] [ref r_named_0_49934 [int 8]] [abstract core_ops_Shl_Output 0 2 [uint 32] [int 8]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 8] [int 8] [int 8] 
fn core_ops_i8__Shl_shl 0 0 args 2 self [int 8] other [int 8] return [int 8] 1 core_ops_Shl_shl 0 2 [int 8] [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] binop BiShl ([int 8] var self) ([int 8] var other)) ([int 8] var __result)) 
associated_type 1 r_named_0_49997 0 core_ops_Shl_Output 0 2 [int 8] [ref r_named_0_49997 [int 8]] [abstract core_ops_Shl_Output 0 2 [int 8] [int 8]] 
associated_type 1 r_named_0_50039 0 core_ops_Shl_Output 0 2 [ref r_named_0_50039 [int 8]] [int 8] [abstract core_ops_Shl_Output 0 2 [int 8] [int 8]] 
associated_type 2 r_named_0_50080 r_named_0_50081 0 core_ops_Shl_Output 0 2 [ref r_named_0_50080 [int 8]] [ref r_named_0_50081 [int 8]] [abstract core_ops_Shl_Output 0 2 [int 8] [int 8]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 16] [int 8] [int 8] 
fn core_ops_i8__Shl_shl 0 0 args 2 self [int 8] other [int 16] return [int 8] 1 core_ops_Shl_shl 0 2 [int 16] [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] binop BiShl ([int 8] var self) ([int 16] var other)) ([int 8] var __result)) 
associated_type 1 r_named_0_50144 0 core_ops_Shl_Output 0 2 [int 16] [ref r_named_0_50144 [int 8]] [abstract core_ops_Shl_Output 0 2 [int 16] [int 8]] 
associated_type 1 r_named_0_50186 0 core_ops_Shl_Output 0 2 [ref r_named_0_50186 [int 16]] [int 8] [abstract core_ops_Shl_Output 0 2 [int 16] [int 8]] 
associated_type 2 r_named_0_50227 r_named_0_50228 0 core_ops_Shl_Output 0 2 [ref r_named_0_50227 [int 16]] [ref r_named_0_50228 [int 8]] [abstract core_ops_Shl_Output 0 2 [int 16] [int 8]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 32] [int 8] [int 8] 
fn core_ops_i8__Shl_shl 0 0 args 2 self [int 8] other [int 32] return [int 8] 1 core_ops_Shl_shl 0 2 [int 32] [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] binop BiShl ([int 8] var self) ([int 32] var other)) ([int 8] var __result)) 
associated_type 1 r_named_0_50291 0 core_ops_Shl_Output 0 2 [int 32] [ref r_named_0_50291 [int 8]] [abstract core_ops_Shl_Output 0 2 [int 32] [int 8]] 
associated_type 1 r_named_0_50333 0 core_ops_Shl_Output 0 2 [ref r_named_0_50333 [int 32]] [int 8] [abstract core_ops_Shl_Output 0 2 [int 32] [int 8]] 
associated_type 2 r_named_0_50374 r_named_0_50375 0 core_ops_Shl_Output 0 2 [ref r_named_0_50374 [int 32]] [ref r_named_0_50375 [int 8]] [abstract core_ops_Shl_Output 0 2 [int 32] [int 8]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 64] [int 8] [int 8] 
fn core_ops_i8__Shl_shl 0 0 args 2 self [int 8] other [int 64] return [int 8] 1 core_ops_Shl_shl 0 2 [int 64] [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] binop BiShl ([int 8] var self) ([int 64] var other)) ([int 8] var __result)) 
associated_type 1 r_named_0_50438 0 core_ops_Shl_Output 0 2 [int 64] [ref r_named_0_50438 [int 8]] [abstract core_ops_Shl_Output 0 2 [int 64] [int 8]] 
associated_type 1 r_named_0_50480 0 core_ops_Shl_Output 0 2 [ref r_named_0_50480 [int 64]] [int 8] [abstract core_ops_Shl_Output 0 2 [int 64] [int 8]] 
associated_type 2 r_named_0_50521 r_named_0_50522 0 core_ops_Shl_Output 0 2 [ref r_named_0_50521 [int 64]] [ref r_named_0_50522 [int 8]] [abstract core_ops_Shl_Output 0 2 [int 64] [int 8]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 32] [int 8] [int 8] 
fn core_ops_i8__Shl_shl 0 0 args 2 self [int 8] other [int 32] return [int 8] 1 core_ops_Shl_shl 0 2 [int 32] [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] binop BiShl ([int 8] var self) ([int 32] var other)) ([int 8] var __result)) 
associated_type 1 r_named_0_50585 0 core_ops_Shl_Output 0 2 [int 32] [ref r_named_0_50585 [int 8]] [abstract core_ops_Shl_Output 0 2 [int 32] [int 8]] 
associated_type 1 r_named_0_50627 0 core_ops_Shl_Output 0 2 [ref r_named_0_50627 [int 32]] [int 8] [abstract core_ops_Shl_Output 0 2 [int 32] [int 8]] 
associated_type 2 r_named_0_50668 r_named_0_50669 0 core_ops_Shl_Output 0 2 [ref r_named_0_50668 [int 32]] [ref r_named_0_50669 [int 8]] [abstract core_ops_Shl_Output 0 2 [int 32] [int 8]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 8] [int 16] [int 16] 
fn core_ops_i16__Shl_shl 0 0 args 2 self [int 16] other [uint 8] return [int 16] 1 core_ops_Shl_shl 0 2 [uint 8] [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] binop BiShl ([int 16] var self) ([uint 8] var other)) ([int 16] var __result)) 
associated_type 1 r_named_0_50732 0 core_ops_Shl_Output 0 2 [uint 8] [ref r_named_0_50732 [int 16]] [abstract core_ops_Shl_Output 0 2 [uint 8] [int 16]] 
associated_type 1 r_named_0_50774 0 core_ops_Shl_Output 0 2 [ref r_named_0_50774 [uint 8]] [int 16] [abstract core_ops_Shl_Output 0 2 [uint 8] [int 16]] 
associated_type 2 r_named_0_50815 r_named_0_50816 0 core_ops_Shl_Output 0 2 [ref r_named_0_50815 [uint 8]] [ref r_named_0_50816 [int 16]] [abstract core_ops_Shl_Output 0 2 [uint 8] [int 16]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 16] [int 16] [int 16] 
fn core_ops_i16__Shl_shl 0 0 args 2 self [int 16] other [uint 16] return [int 16] 1 core_ops_Shl_shl 0 2 [uint 16] [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] binop BiShl ([int 16] var self) ([uint 16] var other)) ([int 16] var __result)) 
associated_type 1 r_named_0_50879 0 core_ops_Shl_Output 0 2 [uint 16] [ref r_named_0_50879 [int 16]] [abstract core_ops_Shl_Output 0 2 [uint 16] [int 16]] 
associated_type 1 r_named_0_50921 0 core_ops_Shl_Output 0 2 [ref r_named_0_50921 [uint 16]] [int 16] [abstract core_ops_Shl_Output 0 2 [uint 16] [int 16]] 
associated_type 2 r_named_0_50962 r_named_0_50963 0 core_ops_Shl_Output 0 2 [ref r_named_0_50962 [uint 16]] [ref r_named_0_50963 [int 16]] [abstract core_ops_Shl_Output 0 2 [uint 16] [int 16]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 32] [int 16] [int 16] 
fn core_ops_i16__Shl_shl 0 0 args 2 self [int 16] other [uint 32] return [int 16] 1 core_ops_Shl_shl 0 2 [uint 32] [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] binop BiShl ([int 16] var self) ([uint 32] var other)) ([int 16] var __result)) 
associated_type 1 r_named_0_51026 0 core_ops_Shl_Output 0 2 [uint 32] [ref r_named_0_51026 [int 16]] [abstract core_ops_Shl_Output 0 2 [uint 32] [int 16]] 
associated_type 1 r_named_0_51068 0 core_ops_Shl_Output 0 2 [ref r_named_0_51068 [uint 32]] [int 16] [abstract core_ops_Shl_Output 0 2 [uint 32] [int 16]] 
associated_type 2 r_named_0_51109 r_named_0_51110 0 core_ops_Shl_Output 0 2 [ref r_named_0_51109 [uint 32]] [ref r_named_0_51110 [int 16]] [abstract core_ops_Shl_Output 0 2 [uint 32] [int 16]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 64] [int 16] [int 16] 
fn core_ops_i16__Shl_shl 0 0 args 2 self [int 16] other [uint 64] return [int 16] 1 core_ops_Shl_shl 0 2 [uint 64] [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] binop BiShl ([int 16] var self) ([uint 64] var other)) ([int 16] var __result)) 
associated_type 1 r_named_0_51173 0 core_ops_Shl_Output 0 2 [uint 64] [ref r_named_0_51173 [int 16]] [abstract core_ops_Shl_Output 0 2 [uint 64] [int 16]] 
associated_type 1 r_named_0_51215 0 core_ops_Shl_Output 0 2 [ref r_named_0_51215 [uint 64]] [int 16] [abstract core_ops_Shl_Output 0 2 [uint 64] [int 16]] 
associated_type 2 r_named_0_51256 r_named_0_51257 0 core_ops_Shl_Output 0 2 [ref r_named_0_51256 [uint 64]] [ref r_named_0_51257 [int 16]] [abstract core_ops_Shl_Output 0 2 [uint 64] [int 16]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 32] [int 16] [int 16] 
fn core_ops_i16__Shl_shl 0 0 args 2 self [int 16] other [uint 32] return [int 16] 1 core_ops_Shl_shl 0 2 [uint 32] [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] binop BiShl ([int 16] var self) ([uint 32] var other)) ([int 16] var __result)) 
associated_type 1 r_named_0_51320 0 core_ops_Shl_Output 0 2 [uint 32] [ref r_named_0_51320 [int 16]] [abstract core_ops_Shl_Output 0 2 [uint 32] [int 16]] 
associated_type 1 r_named_0_51362 0 core_ops_Shl_Output 0 2 [ref r_named_0_51362 [uint 32]] [int 16] [abstract core_ops_Shl_Output 0 2 [uint 32] [int 16]] 
associated_type 2 r_named_0_51403 r_named_0_51404 0 core_ops_Shl_Output 0 2 [ref r_named_0_51403 [uint 32]] [ref r_named_0_51404 [int 16]] [abstract core_ops_Shl_Output 0 2 [uint 32] [int 16]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 8] [int 16] [int 16] 
fn core_ops_i16__Shl_shl 0 0 args 2 self [int 16] other [int 8] return [int 16] 1 core_ops_Shl_shl 0 2 [int 8] [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] binop BiShl ([int 16] var self) ([int 8] var other)) ([int 16] var __result)) 
associated_type 1 r_named_0_51467 0 core_ops_Shl_Output 0 2 [int 8] [ref r_named_0_51467 [int 16]] [abstract core_ops_Shl_Output 0 2 [int 8] [int 16]] 
associated_type 1 r_named_0_51509 0 core_ops_Shl_Output 0 2 [ref r_named_0_51509 [int 8]] [int 16] [abstract core_ops_Shl_Output 0 2 [int 8] [int 16]] 
associated_type 2 r_named_0_51550 r_named_0_51551 0 core_ops_Shl_Output 0 2 [ref r_named_0_51550 [int 8]] [ref r_named_0_51551 [int 16]] [abstract core_ops_Shl_Output 0 2 [int 8] [int 16]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 16] [int 16] [int 16] 
fn core_ops_i16__Shl_shl 0 0 args 2 self [int 16] other [int 16] return [int 16] 1 core_ops_Shl_shl 0 2 [int 16] [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] binop BiShl ([int 16] var self) ([int 16] var other)) ([int 16] var __result)) 
associated_type 1 r_named_0_51614 0 core_ops_Shl_Output 0 2 [int 16] [ref r_named_0_51614 [int 16]] [abstract core_ops_Shl_Output 0 2 [int 16] [int 16]] 
associated_type 1 r_named_0_51656 0 core_ops_Shl_Output 0 2 [ref r_named_0_51656 [int 16]] [int 16] [abstract core_ops_Shl_Output 0 2 [int 16] [int 16]] 
associated_type 2 r_named_0_51697 r_named_0_51698 0 core_ops_Shl_Output 0 2 [ref r_named_0_51697 [int 16]] [ref r_named_0_51698 [int 16]] [abstract core_ops_Shl_Output 0 2 [int 16] [int 16]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 32] [int 16] [int 16] 
fn core_ops_i16__Shl_shl 0 0 args 2 self [int 16] other [int 32] return [int 16] 1 core_ops_Shl_shl 0 2 [int 32] [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] binop BiShl ([int 16] var self) ([int 32] var other)) ([int 16] var __result)) 
associated_type 1 r_named_0_51761 0 core_ops_Shl_Output 0 2 [int 32] [ref r_named_0_51761 [int 16]] [abstract core_ops_Shl_Output 0 2 [int 32] [int 16]] 
associated_type 1 r_named_0_51803 0 core_ops_Shl_Output 0 2 [ref r_named_0_51803 [int 32]] [int 16] [abstract core_ops_Shl_Output 0 2 [int 32] [int 16]] 
associated_type 2 r_named_0_51844 r_named_0_51845 0 core_ops_Shl_Output 0 2 [ref r_named_0_51844 [int 32]] [ref r_named_0_51845 [int 16]] [abstract core_ops_Shl_Output 0 2 [int 32] [int 16]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 64] [int 16] [int 16] 
fn core_ops_i16__Shl_shl 0 0 args 2 self [int 16] other [int 64] return [int 16] 1 core_ops_Shl_shl 0 2 [int 64] [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] binop BiShl ([int 16] var self) ([int 64] var other)) ([int 16] var __result)) 
associated_type 1 r_named_0_51908 0 core_ops_Shl_Output 0 2 [int 64] [ref r_named_0_51908 [int 16]] [abstract core_ops_Shl_Output 0 2 [int 64] [int 16]] 
associated_type 1 r_named_0_51950 0 core_ops_Shl_Output 0 2 [ref r_named_0_51950 [int 64]] [int 16] [abstract core_ops_Shl_Output 0 2 [int 64] [int 16]] 
associated_type 2 r_named_0_51991 r_named_0_51992 0 core_ops_Shl_Output 0 2 [ref r_named_0_51991 [int 64]] [ref r_named_0_51992 [int 16]] [abstract core_ops_Shl_Output 0 2 [int 64] [int 16]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 32] [int 16] [int 16] 
fn core_ops_i16__Shl_shl 0 0 args 2 self [int 16] other [int 32] return [int 16] 1 core_ops_Shl_shl 0 2 [int 32] [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] binop BiShl ([int 16] var self) ([int 32] var other)) ([int 16] var __result)) 
associated_type 1 r_named_0_52055 0 core_ops_Shl_Output 0 2 [int 32] [ref r_named_0_52055 [int 16]] [abstract core_ops_Shl_Output 0 2 [int 32] [int 16]] 
associated_type 1 r_named_0_52097 0 core_ops_Shl_Output 0 2 [ref r_named_0_52097 [int 32]] [int 16] [abstract core_ops_Shl_Output 0 2 [int 32] [int 16]] 
associated_type 2 r_named_0_52138 r_named_0_52139 0 core_ops_Shl_Output 0 2 [ref r_named_0_52138 [int 32]] [ref r_named_0_52139 [int 16]] [abstract core_ops_Shl_Output 0 2 [int 32] [int 16]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 8] [int 32] [int 32] 
fn core_ops_i32__Shl_shl 0 0 args 2 self [int 32] other [uint 8] return [int 32] 1 core_ops_Shl_shl 0 2 [uint 8] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShl ([int 32] var self) ([uint 8] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_52202 0 core_ops_Shl_Output 0 2 [uint 8] [ref r_named_0_52202 [int 32]] [abstract core_ops_Shl_Output 0 2 [uint 8] [int 32]] 
associated_type 1 r_named_0_52244 0 core_ops_Shl_Output 0 2 [ref r_named_0_52244 [uint 8]] [int 32] [abstract core_ops_Shl_Output 0 2 [uint 8] [int 32]] 
associated_type 2 r_named_0_52285 r_named_0_52286 0 core_ops_Shl_Output 0 2 [ref r_named_0_52285 [uint 8]] [ref r_named_0_52286 [int 32]] [abstract core_ops_Shl_Output 0 2 [uint 8] [int 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 16] [int 32] [int 32] 
fn core_ops_i32__Shl_shl 0 0 args 2 self [int 32] other [uint 16] return [int 32] 1 core_ops_Shl_shl 0 2 [uint 16] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShl ([int 32] var self) ([uint 16] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_52349 0 core_ops_Shl_Output 0 2 [uint 16] [ref r_named_0_52349 [int 32]] [abstract core_ops_Shl_Output 0 2 [uint 16] [int 32]] 
associated_type 1 r_named_0_52391 0 core_ops_Shl_Output 0 2 [ref r_named_0_52391 [uint 16]] [int 32] [abstract core_ops_Shl_Output 0 2 [uint 16] [int 32]] 
associated_type 2 r_named_0_52432 r_named_0_52433 0 core_ops_Shl_Output 0 2 [ref r_named_0_52432 [uint 16]] [ref r_named_0_52433 [int 32]] [abstract core_ops_Shl_Output 0 2 [uint 16] [int 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 32] [int 32] [int 32] 
fn core_ops_i32__Shl_shl 0 0 args 2 self [int 32] other [uint 32] return [int 32] 1 core_ops_Shl_shl 0 2 [uint 32] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShl ([int 32] var self) ([uint 32] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_52496 0 core_ops_Shl_Output 0 2 [uint 32] [ref r_named_0_52496 [int 32]] [abstract core_ops_Shl_Output 0 2 [uint 32] [int 32]] 
associated_type 1 r_named_0_52538 0 core_ops_Shl_Output 0 2 [ref r_named_0_52538 [uint 32]] [int 32] [abstract core_ops_Shl_Output 0 2 [uint 32] [int 32]] 
associated_type 2 r_named_0_52579 r_named_0_52580 0 core_ops_Shl_Output 0 2 [ref r_named_0_52579 [uint 32]] [ref r_named_0_52580 [int 32]] [abstract core_ops_Shl_Output 0 2 [uint 32] [int 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 64] [int 32] [int 32] 
fn core_ops_i32__Shl_shl 0 0 args 2 self [int 32] other [uint 64] return [int 32] 1 core_ops_Shl_shl 0 2 [uint 64] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShl ([int 32] var self) ([uint 64] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_52643 0 core_ops_Shl_Output 0 2 [uint 64] [ref r_named_0_52643 [int 32]] [abstract core_ops_Shl_Output 0 2 [uint 64] [int 32]] 
associated_type 1 r_named_0_52685 0 core_ops_Shl_Output 0 2 [ref r_named_0_52685 [uint 64]] [int 32] [abstract core_ops_Shl_Output 0 2 [uint 64] [int 32]] 
associated_type 2 r_named_0_52726 r_named_0_52727 0 core_ops_Shl_Output 0 2 [ref r_named_0_52726 [uint 64]] [ref r_named_0_52727 [int 32]] [abstract core_ops_Shl_Output 0 2 [uint 64] [int 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 32] [int 32] [int 32] 
fn core_ops_i32__Shl_shl 0 0 args 2 self [int 32] other [uint 32] return [int 32] 1 core_ops_Shl_shl 0 2 [uint 32] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShl ([int 32] var self) ([uint 32] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_52790 0 core_ops_Shl_Output 0 2 [uint 32] [ref r_named_0_52790 [int 32]] [abstract core_ops_Shl_Output 0 2 [uint 32] [int 32]] 
associated_type 1 r_named_0_52832 0 core_ops_Shl_Output 0 2 [ref r_named_0_52832 [uint 32]] [int 32] [abstract core_ops_Shl_Output 0 2 [uint 32] [int 32]] 
associated_type 2 r_named_0_52873 r_named_0_52874 0 core_ops_Shl_Output 0 2 [ref r_named_0_52873 [uint 32]] [ref r_named_0_52874 [int 32]] [abstract core_ops_Shl_Output 0 2 [uint 32] [int 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 8] [int 32] [int 32] 
fn core_ops_i32__Shl_shl 0 0 args 2 self [int 32] other [int 8] return [int 32] 1 core_ops_Shl_shl 0 2 [int 8] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShl ([int 32] var self) ([int 8] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_52937 0 core_ops_Shl_Output 0 2 [int 8] [ref r_named_0_52937 [int 32]] [abstract core_ops_Shl_Output 0 2 [int 8] [int 32]] 
associated_type 1 r_named_0_52979 0 core_ops_Shl_Output 0 2 [ref r_named_0_52979 [int 8]] [int 32] [abstract core_ops_Shl_Output 0 2 [int 8] [int 32]] 
associated_type 2 r_named_0_53020 r_named_0_53021 0 core_ops_Shl_Output 0 2 [ref r_named_0_53020 [int 8]] [ref r_named_0_53021 [int 32]] [abstract core_ops_Shl_Output 0 2 [int 8] [int 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 16] [int 32] [int 32] 
fn core_ops_i32__Shl_shl 0 0 args 2 self [int 32] other [int 16] return [int 32] 1 core_ops_Shl_shl 0 2 [int 16] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShl ([int 32] var self) ([int 16] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_53084 0 core_ops_Shl_Output 0 2 [int 16] [ref r_named_0_53084 [int 32]] [abstract core_ops_Shl_Output 0 2 [int 16] [int 32]] 
associated_type 1 r_named_0_53126 0 core_ops_Shl_Output 0 2 [ref r_named_0_53126 [int 16]] [int 32] [abstract core_ops_Shl_Output 0 2 [int 16] [int 32]] 
associated_type 2 r_named_0_53167 r_named_0_53168 0 core_ops_Shl_Output 0 2 [ref r_named_0_53167 [int 16]] [ref r_named_0_53168 [int 32]] [abstract core_ops_Shl_Output 0 2 [int 16] [int 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 32] [int 32] [int 32] 
fn core_ops_i32__Shl_shl 0 0 args 2 self [int 32] other [int 32] return [int 32] 1 core_ops_Shl_shl 0 2 [int 32] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShl ([int 32] var self) ([int 32] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_53231 0 core_ops_Shl_Output 0 2 [int 32] [ref r_named_0_53231 [int 32]] [abstract core_ops_Shl_Output 0 2 [int 32] [int 32]] 
associated_type 1 r_named_0_53273 0 core_ops_Shl_Output 0 2 [ref r_named_0_53273 [int 32]] [int 32] [abstract core_ops_Shl_Output 0 2 [int 32] [int 32]] 
associated_type 2 r_named_0_53314 r_named_0_53315 0 core_ops_Shl_Output 0 2 [ref r_named_0_53314 [int 32]] [ref r_named_0_53315 [int 32]] [abstract core_ops_Shl_Output 0 2 [int 32] [int 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 64] [int 32] [int 32] 
fn core_ops_i32__Shl_shl 0 0 args 2 self [int 32] other [int 64] return [int 32] 1 core_ops_Shl_shl 0 2 [int 64] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShl ([int 32] var self) ([int 64] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_53378 0 core_ops_Shl_Output 0 2 [int 64] [ref r_named_0_53378 [int 32]] [abstract core_ops_Shl_Output 0 2 [int 64] [int 32]] 
associated_type 1 r_named_0_53420 0 core_ops_Shl_Output 0 2 [ref r_named_0_53420 [int 64]] [int 32] [abstract core_ops_Shl_Output 0 2 [int 64] [int 32]] 
associated_type 2 r_named_0_53461 r_named_0_53462 0 core_ops_Shl_Output 0 2 [ref r_named_0_53461 [int 64]] [ref r_named_0_53462 [int 32]] [abstract core_ops_Shl_Output 0 2 [int 64] [int 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 32] [int 32] [int 32] 
fn core_ops_i32__Shl_shl 0 0 args 2 self [int 32] other [int 32] return [int 32] 1 core_ops_Shl_shl 0 2 [int 32] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShl ([int 32] var self) ([int 32] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_53525 0 core_ops_Shl_Output 0 2 [int 32] [ref r_named_0_53525 [int 32]] [abstract core_ops_Shl_Output 0 2 [int 32] [int 32]] 
associated_type 1 r_named_0_53567 0 core_ops_Shl_Output 0 2 [ref r_named_0_53567 [int 32]] [int 32] [abstract core_ops_Shl_Output 0 2 [int 32] [int 32]] 
associated_type 2 r_named_0_53608 r_named_0_53609 0 core_ops_Shl_Output 0 2 [ref r_named_0_53608 [int 32]] [ref r_named_0_53609 [int 32]] [abstract core_ops_Shl_Output 0 2 [int 32] [int 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 8] [int 64] [int 64] 
fn core_ops_i64__Shl_shl 0 0 args 2 self [int 64] other [uint 8] return [int 64] 1 core_ops_Shl_shl 0 2 [uint 8] [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] binop BiShl ([int 64] var self) ([uint 8] var other)) ([int 64] var __result)) 
associated_type 1 r_named_0_53672 0 core_ops_Shl_Output 0 2 [uint 8] [ref r_named_0_53672 [int 64]] [abstract core_ops_Shl_Output 0 2 [uint 8] [int 64]] 
associated_type 1 r_named_0_53714 0 core_ops_Shl_Output 0 2 [ref r_named_0_53714 [uint 8]] [int 64] [abstract core_ops_Shl_Output 0 2 [uint 8] [int 64]] 
associated_type 2 r_named_0_53755 r_named_0_53756 0 core_ops_Shl_Output 0 2 [ref r_named_0_53755 [uint 8]] [ref r_named_0_53756 [int 64]] [abstract core_ops_Shl_Output 0 2 [uint 8] [int 64]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 16] [int 64] [int 64] 
fn core_ops_i64__Shl_shl 0 0 args 2 self [int 64] other [uint 16] return [int 64] 1 core_ops_Shl_shl 0 2 [uint 16] [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] binop BiShl ([int 64] var self) ([uint 16] var other)) ([int 64] var __result)) 
associated_type 1 r_named_0_53819 0 core_ops_Shl_Output 0 2 [uint 16] [ref r_named_0_53819 [int 64]] [abstract core_ops_Shl_Output 0 2 [uint 16] [int 64]] 
associated_type 1 r_named_0_53861 0 core_ops_Shl_Output 0 2 [ref r_named_0_53861 [uint 16]] [int 64] [abstract core_ops_Shl_Output 0 2 [uint 16] [int 64]] 
associated_type 2 r_named_0_53902 r_named_0_53903 0 core_ops_Shl_Output 0 2 [ref r_named_0_53902 [uint 16]] [ref r_named_0_53903 [int 64]] [abstract core_ops_Shl_Output 0 2 [uint 16] [int 64]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 32] [int 64] [int 64] 
fn core_ops_i64__Shl_shl 0 0 args 2 self [int 64] other [uint 32] return [int 64] 1 core_ops_Shl_shl 0 2 [uint 32] [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] binop BiShl ([int 64] var self) ([uint 32] var other)) ([int 64] var __result)) 
associated_type 1 r_named_0_53966 0 core_ops_Shl_Output 0 2 [uint 32] [ref r_named_0_53966 [int 64]] [abstract core_ops_Shl_Output 0 2 [uint 32] [int 64]] 
associated_type 1 r_named_0_54008 0 core_ops_Shl_Output 0 2 [ref r_named_0_54008 [uint 32]] [int 64] [abstract core_ops_Shl_Output 0 2 [uint 32] [int 64]] 
associated_type 2 r_named_0_54049 r_named_0_54050 0 core_ops_Shl_Output 0 2 [ref r_named_0_54049 [uint 32]] [ref r_named_0_54050 [int 64]] [abstract core_ops_Shl_Output 0 2 [uint 32] [int 64]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 64] [int 64] [int 64] 
fn core_ops_i64__Shl_shl 0 0 args 2 self [int 64] other [uint 64] return [int 64] 1 core_ops_Shl_shl 0 2 [uint 64] [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] binop BiShl ([int 64] var self) ([uint 64] var other)) ([int 64] var __result)) 
associated_type 1 r_named_0_54113 0 core_ops_Shl_Output 0 2 [uint 64] [ref r_named_0_54113 [int 64]] [abstract core_ops_Shl_Output 0 2 [uint 64] [int 64]] 
associated_type 1 r_named_0_54155 0 core_ops_Shl_Output 0 2 [ref r_named_0_54155 [uint 64]] [int 64] [abstract core_ops_Shl_Output 0 2 [uint 64] [int 64]] 
associated_type 2 r_named_0_54196 r_named_0_54197 0 core_ops_Shl_Output 0 2 [ref r_named_0_54196 [uint 64]] [ref r_named_0_54197 [int 64]] [abstract core_ops_Shl_Output 0 2 [uint 64] [int 64]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 32] [int 64] [int 64] 
fn core_ops_i64__Shl_shl 0 0 args 2 self [int 64] other [uint 32] return [int 64] 1 core_ops_Shl_shl 0 2 [uint 32] [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] binop BiShl ([int 64] var self) ([uint 32] var other)) ([int 64] var __result)) 
associated_type 1 r_named_0_54260 0 core_ops_Shl_Output 0 2 [uint 32] [ref r_named_0_54260 [int 64]] [abstract core_ops_Shl_Output 0 2 [uint 32] [int 64]] 
associated_type 1 r_named_0_54302 0 core_ops_Shl_Output 0 2 [ref r_named_0_54302 [uint 32]] [int 64] [abstract core_ops_Shl_Output 0 2 [uint 32] [int 64]] 
associated_type 2 r_named_0_54343 r_named_0_54344 0 core_ops_Shl_Output 0 2 [ref r_named_0_54343 [uint 32]] [ref r_named_0_54344 [int 64]] [abstract core_ops_Shl_Output 0 2 [uint 32] [int 64]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 8] [int 64] [int 64] 
fn core_ops_i64__Shl_shl 0 0 args 2 self [int 64] other [int 8] return [int 64] 1 core_ops_Shl_shl 0 2 [int 8] [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] binop BiShl ([int 64] var self) ([int 8] var other)) ([int 64] var __result)) 
associated_type 1 r_named_0_54407 0 core_ops_Shl_Output 0 2 [int 8] [ref r_named_0_54407 [int 64]] [abstract core_ops_Shl_Output 0 2 [int 8] [int 64]] 
associated_type 1 r_named_0_54449 0 core_ops_Shl_Output 0 2 [ref r_named_0_54449 [int 8]] [int 64] [abstract core_ops_Shl_Output 0 2 [int 8] [int 64]] 
associated_type 2 r_named_0_54490 r_named_0_54491 0 core_ops_Shl_Output 0 2 [ref r_named_0_54490 [int 8]] [ref r_named_0_54491 [int 64]] [abstract core_ops_Shl_Output 0 2 [int 8] [int 64]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 16] [int 64] [int 64] 
fn core_ops_i64__Shl_shl 0 0 args 2 self [int 64] other [int 16] return [int 64] 1 core_ops_Shl_shl 0 2 [int 16] [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] binop BiShl ([int 64] var self) ([int 16] var other)) ([int 64] var __result)) 
associated_type 1 r_named_0_54554 0 core_ops_Shl_Output 0 2 [int 16] [ref r_named_0_54554 [int 64]] [abstract core_ops_Shl_Output 0 2 [int 16] [int 64]] 
associated_type 1 r_named_0_54596 0 core_ops_Shl_Output 0 2 [ref r_named_0_54596 [int 16]] [int 64] [abstract core_ops_Shl_Output 0 2 [int 16] [int 64]] 
associated_type 2 r_named_0_54637 r_named_0_54638 0 core_ops_Shl_Output 0 2 [ref r_named_0_54637 [int 16]] [ref r_named_0_54638 [int 64]] [abstract core_ops_Shl_Output 0 2 [int 16] [int 64]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 32] [int 64] [int 64] 
fn core_ops_i64__Shl_shl 0 0 args 2 self [int 64] other [int 32] return [int 64] 1 core_ops_Shl_shl 0 2 [int 32] [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] binop BiShl ([int 64] var self) ([int 32] var other)) ([int 64] var __result)) 
associated_type 1 r_named_0_54701 0 core_ops_Shl_Output 0 2 [int 32] [ref r_named_0_54701 [int 64]] [abstract core_ops_Shl_Output 0 2 [int 32] [int 64]] 
associated_type 1 r_named_0_54743 0 core_ops_Shl_Output 0 2 [ref r_named_0_54743 [int 32]] [int 64] [abstract core_ops_Shl_Output 0 2 [int 32] [int 64]] 
associated_type 2 r_named_0_54784 r_named_0_54785 0 core_ops_Shl_Output 0 2 [ref r_named_0_54784 [int 32]] [ref r_named_0_54785 [int 64]] [abstract core_ops_Shl_Output 0 2 [int 32] [int 64]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 64] [int 64] [int 64] 
fn core_ops_i64__Shl_shl 0 0 args 2 self [int 64] other [int 64] return [int 64] 1 core_ops_Shl_shl 0 2 [int 64] [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] binop BiShl ([int 64] var self) ([int 64] var other)) ([int 64] var __result)) 
associated_type 1 r_named_0_54848 0 core_ops_Shl_Output 0 2 [int 64] [ref r_named_0_54848 [int 64]] [abstract core_ops_Shl_Output 0 2 [int 64] [int 64]] 
associated_type 1 r_named_0_54890 0 core_ops_Shl_Output 0 2 [ref r_named_0_54890 [int 64]] [int 64] [abstract core_ops_Shl_Output 0 2 [int 64] [int 64]] 
associated_type 2 r_named_0_54931 r_named_0_54932 0 core_ops_Shl_Output 0 2 [ref r_named_0_54931 [int 64]] [ref r_named_0_54932 [int 64]] [abstract core_ops_Shl_Output 0 2 [int 64] [int 64]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 32] [int 64] [int 64] 
fn core_ops_i64__Shl_shl 0 0 args 2 self [int 64] other [int 32] return [int 64] 1 core_ops_Shl_shl 0 2 [int 32] [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] binop BiShl ([int 64] var self) ([int 32] var other)) ([int 64] var __result)) 
associated_type 1 r_named_0_54995 0 core_ops_Shl_Output 0 2 [int 32] [ref r_named_0_54995 [int 64]] [abstract core_ops_Shl_Output 0 2 [int 32] [int 64]] 
associated_type 1 r_named_0_55037 0 core_ops_Shl_Output 0 2 [ref r_named_0_55037 [int 32]] [int 64] [abstract core_ops_Shl_Output 0 2 [int 32] [int 64]] 
associated_type 2 r_named_0_55078 r_named_0_55079 0 core_ops_Shl_Output 0 2 [ref r_named_0_55078 [int 32]] [ref r_named_0_55079 [int 64]] [abstract core_ops_Shl_Output 0 2 [int 32] [int 64]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 8] [int 32] [int 32] 
fn core_ops_isize__Shl_shl 0 0 args 2 self [int 32] other [uint 8] return [int 32] 1 core_ops_Shl_shl 0 2 [uint 8] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShl ([int 32] var self) ([uint 8] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_55142 0 core_ops_Shl_Output 0 2 [uint 8] [ref r_named_0_55142 [int 32]] [abstract core_ops_Shl_Output 0 2 [uint 8] [int 32]] 
associated_type 1 r_named_0_55184 0 core_ops_Shl_Output 0 2 [ref r_named_0_55184 [uint 8]] [int 32] [abstract core_ops_Shl_Output 0 2 [uint 8] [int 32]] 
associated_type 2 r_named_0_55225 r_named_0_55226 0 core_ops_Shl_Output 0 2 [ref r_named_0_55225 [uint 8]] [ref r_named_0_55226 [int 32]] [abstract core_ops_Shl_Output 0 2 [uint 8] [int 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 16] [int 32] [int 32] 
fn core_ops_isize__Shl_shl 0 0 args 2 self [int 32] other [uint 16] return [int 32] 1 core_ops_Shl_shl 0 2 [uint 16] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShl ([int 32] var self) ([uint 16] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_55289 0 core_ops_Shl_Output 0 2 [uint 16] [ref r_named_0_55289 [int 32]] [abstract core_ops_Shl_Output 0 2 [uint 16] [int 32]] 
associated_type 1 r_named_0_55331 0 core_ops_Shl_Output 0 2 [ref r_named_0_55331 [uint 16]] [int 32] [abstract core_ops_Shl_Output 0 2 [uint 16] [int 32]] 
associated_type 2 r_named_0_55372 r_named_0_55373 0 core_ops_Shl_Output 0 2 [ref r_named_0_55372 [uint 16]] [ref r_named_0_55373 [int 32]] [abstract core_ops_Shl_Output 0 2 [uint 16] [int 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 32] [int 32] [int 32] 
fn core_ops_isize__Shl_shl 0 0 args 2 self [int 32] other [uint 32] return [int 32] 1 core_ops_Shl_shl 0 2 [uint 32] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShl ([int 32] var self) ([uint 32] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_55436 0 core_ops_Shl_Output 0 2 [uint 32] [ref r_named_0_55436 [int 32]] [abstract core_ops_Shl_Output 0 2 [uint 32] [int 32]] 
associated_type 1 r_named_0_55478 0 core_ops_Shl_Output 0 2 [ref r_named_0_55478 [uint 32]] [int 32] [abstract core_ops_Shl_Output 0 2 [uint 32] [int 32]] 
associated_type 2 r_named_0_55519 r_named_0_55520 0 core_ops_Shl_Output 0 2 [ref r_named_0_55519 [uint 32]] [ref r_named_0_55520 [int 32]] [abstract core_ops_Shl_Output 0 2 [uint 32] [int 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 64] [int 32] [int 32] 
fn core_ops_isize__Shl_shl 0 0 args 2 self [int 32] other [uint 64] return [int 32] 1 core_ops_Shl_shl 0 2 [uint 64] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShl ([int 32] var self) ([uint 64] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_55583 0 core_ops_Shl_Output 0 2 [uint 64] [ref r_named_0_55583 [int 32]] [abstract core_ops_Shl_Output 0 2 [uint 64] [int 32]] 
associated_type 1 r_named_0_55625 0 core_ops_Shl_Output 0 2 [ref r_named_0_55625 [uint 64]] [int 32] [abstract core_ops_Shl_Output 0 2 [uint 64] [int 32]] 
associated_type 2 r_named_0_55666 r_named_0_55667 0 core_ops_Shl_Output 0 2 [ref r_named_0_55666 [uint 64]] [ref r_named_0_55667 [int 32]] [abstract core_ops_Shl_Output 0 2 [uint 64] [int 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [uint 32] [int 32] [int 32] 
fn core_ops_isize__Shl_shl 0 0 args 2 self [int 32] other [uint 32] return [int 32] 1 core_ops_Shl_shl 0 2 [uint 32] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShl ([int 32] var self) ([uint 32] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_55730 0 core_ops_Shl_Output 0 2 [uint 32] [ref r_named_0_55730 [int 32]] [abstract core_ops_Shl_Output 0 2 [uint 32] [int 32]] 
associated_type 1 r_named_0_55772 0 core_ops_Shl_Output 0 2 [ref r_named_0_55772 [uint 32]] [int 32] [abstract core_ops_Shl_Output 0 2 [uint 32] [int 32]] 
associated_type 2 r_named_0_55813 r_named_0_55814 0 core_ops_Shl_Output 0 2 [ref r_named_0_55813 [uint 32]] [ref r_named_0_55814 [int 32]] [abstract core_ops_Shl_Output 0 2 [uint 32] [int 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 8] [int 32] [int 32] 
fn core_ops_isize__Shl_shl 0 0 args 2 self [int 32] other [int 8] return [int 32] 1 core_ops_Shl_shl 0 2 [int 8] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShl ([int 32] var self) ([int 8] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_55877 0 core_ops_Shl_Output 0 2 [int 8] [ref r_named_0_55877 [int 32]] [abstract core_ops_Shl_Output 0 2 [int 8] [int 32]] 
associated_type 1 r_named_0_55919 0 core_ops_Shl_Output 0 2 [ref r_named_0_55919 [int 8]] [int 32] [abstract core_ops_Shl_Output 0 2 [int 8] [int 32]] 
associated_type 2 r_named_0_55960 r_named_0_55961 0 core_ops_Shl_Output 0 2 [ref r_named_0_55960 [int 8]] [ref r_named_0_55961 [int 32]] [abstract core_ops_Shl_Output 0 2 [int 8] [int 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 16] [int 32] [int 32] 
fn core_ops_isize__Shl_shl 0 0 args 2 self [int 32] other [int 16] return [int 32] 1 core_ops_Shl_shl 0 2 [int 16] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShl ([int 32] var self) ([int 16] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_56024 0 core_ops_Shl_Output 0 2 [int 16] [ref r_named_0_56024 [int 32]] [abstract core_ops_Shl_Output 0 2 [int 16] [int 32]] 
associated_type 1 r_named_0_56066 0 core_ops_Shl_Output 0 2 [ref r_named_0_56066 [int 16]] [int 32] [abstract core_ops_Shl_Output 0 2 [int 16] [int 32]] 
associated_type 2 r_named_0_56107 r_named_0_56108 0 core_ops_Shl_Output 0 2 [ref r_named_0_56107 [int 16]] [ref r_named_0_56108 [int 32]] [abstract core_ops_Shl_Output 0 2 [int 16] [int 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 32] [int 32] [int 32] 
fn core_ops_isize__Shl_shl 0 0 args 2 self [int 32] other [int 32] return [int 32] 1 core_ops_Shl_shl 0 2 [int 32] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShl ([int 32] var self) ([int 32] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_56171 0 core_ops_Shl_Output 0 2 [int 32] [ref r_named_0_56171 [int 32]] [abstract core_ops_Shl_Output 0 2 [int 32] [int 32]] 
associated_type 1 r_named_0_56213 0 core_ops_Shl_Output 0 2 [ref r_named_0_56213 [int 32]] [int 32] [abstract core_ops_Shl_Output 0 2 [int 32] [int 32]] 
associated_type 2 r_named_0_56254 r_named_0_56255 0 core_ops_Shl_Output 0 2 [ref r_named_0_56254 [int 32]] [ref r_named_0_56255 [int 32]] [abstract core_ops_Shl_Output 0 2 [int 32] [int 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 64] [int 32] [int 32] 
fn core_ops_isize__Shl_shl 0 0 args 2 self [int 32] other [int 64] return [int 32] 1 core_ops_Shl_shl 0 2 [int 64] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShl ([int 32] var self) ([int 64] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_56318 0 core_ops_Shl_Output 0 2 [int 64] [ref r_named_0_56318 [int 32]] [abstract core_ops_Shl_Output 0 2 [int 64] [int 32]] 
associated_type 1 r_named_0_56360 0 core_ops_Shl_Output 0 2 [ref r_named_0_56360 [int 64]] [int 32] [abstract core_ops_Shl_Output 0 2 [int 64] [int 32]] 
associated_type 2 r_named_0_56401 r_named_0_56402 0 core_ops_Shl_Output 0 2 [ref r_named_0_56401 [int 64]] [ref r_named_0_56402 [int 32]] [abstract core_ops_Shl_Output 0 2 [int 64] [int 32]] 
associated_type 0 0 core_ops_Shl_Output 0 2 [int 32] [int 32] [int 32] 
fn core_ops_isize__Shl_shl 0 0 args 2 self [int 32] other [int 32] return [int 32] 1 core_ops_Shl_shl 0 2 [int 32] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShl ([int 32] var self) ([int 32] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_56465 0 core_ops_Shl_Output 0 2 [int 32] [ref r_named_0_56465 [int 32]] [abstract core_ops_Shl_Output 0 2 [int 32] [int 32]] 
associated_type 1 r_named_0_56507 0 core_ops_Shl_Output 0 2 [ref r_named_0_56507 [int 32]] [int 32] [abstract core_ops_Shl_Output 0 2 [int 32] [int 32]] 
associated_type 2 r_named_0_56548 r_named_0_56549 0 core_ops_Shl_Output 0 2 [ref r_named_0_56548 [int 32]] [ref r_named_0_56549 [int 32]] [abstract core_ops_Shl_Output 0 2 [int 32] [int 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 8] [uint 8] [uint 8] 
fn core_ops_u8__Shr_shr 0 0 args 2 self [uint 8] other [uint 8] return [uint 8] 1 core_ops_Shr_shr 0 2 [uint 8] [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] binop BiShr ([uint 8] var self) ([uint 8] var other)) ([uint 8] var __result)) 
associated_type 1 r_named_0_56627 0 core_ops_Shr_Output 0 2 [uint 8] [ref r_named_0_56627 [uint 8]] [abstract core_ops_Shr_Output 0 2 [uint 8] [uint 8]] 
associated_type 1 r_named_0_56669 0 core_ops_Shr_Output 0 2 [ref r_named_0_56669 [uint 8]] [uint 8] [abstract core_ops_Shr_Output 0 2 [uint 8] [uint 8]] 
associated_type 2 r_named_0_56710 r_named_0_56711 0 core_ops_Shr_Output 0 2 [ref r_named_0_56710 [uint 8]] [ref r_named_0_56711 [uint 8]] [abstract core_ops_Shr_Output 0 2 [uint 8] [uint 8]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 16] [uint 8] [uint 8] 
fn core_ops_u8__Shr_shr 0 0 args 2 self [uint 8] other [uint 16] return [uint 8] 1 core_ops_Shr_shr 0 2 [uint 16] [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] binop BiShr ([uint 8] var self) ([uint 16] var other)) ([uint 8] var __result)) 
associated_type 1 r_named_0_56774 0 core_ops_Shr_Output 0 2 [uint 16] [ref r_named_0_56774 [uint 8]] [abstract core_ops_Shr_Output 0 2 [uint 16] [uint 8]] 
associated_type 1 r_named_0_56816 0 core_ops_Shr_Output 0 2 [ref r_named_0_56816 [uint 16]] [uint 8] [abstract core_ops_Shr_Output 0 2 [uint 16] [uint 8]] 
associated_type 2 r_named_0_56857 r_named_0_56858 0 core_ops_Shr_Output 0 2 [ref r_named_0_56857 [uint 16]] [ref r_named_0_56858 [uint 8]] [abstract core_ops_Shr_Output 0 2 [uint 16] [uint 8]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 32] [uint 8] [uint 8] 
fn core_ops_u8__Shr_shr 0 0 args 2 self [uint 8] other [uint 32] return [uint 8] 1 core_ops_Shr_shr 0 2 [uint 32] [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] binop BiShr ([uint 8] var self) ([uint 32] var other)) ([uint 8] var __result)) 
associated_type 1 r_named_0_56921 0 core_ops_Shr_Output 0 2 [uint 32] [ref r_named_0_56921 [uint 8]] [abstract core_ops_Shr_Output 0 2 [uint 32] [uint 8]] 
associated_type 1 r_named_0_56963 0 core_ops_Shr_Output 0 2 [ref r_named_0_56963 [uint 32]] [uint 8] [abstract core_ops_Shr_Output 0 2 [uint 32] [uint 8]] 
associated_type 2 r_named_0_57004 r_named_0_57005 0 core_ops_Shr_Output 0 2 [ref r_named_0_57004 [uint 32]] [ref r_named_0_57005 [uint 8]] [abstract core_ops_Shr_Output 0 2 [uint 32] [uint 8]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 64] [uint 8] [uint 8] 
fn core_ops_u8__Shr_shr 0 0 args 2 self [uint 8] other [uint 64] return [uint 8] 1 core_ops_Shr_shr 0 2 [uint 64] [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] binop BiShr ([uint 8] var self) ([uint 64] var other)) ([uint 8] var __result)) 
associated_type 1 r_named_0_57068 0 core_ops_Shr_Output 0 2 [uint 64] [ref r_named_0_57068 [uint 8]] [abstract core_ops_Shr_Output 0 2 [uint 64] [uint 8]] 
associated_type 1 r_named_0_57110 0 core_ops_Shr_Output 0 2 [ref r_named_0_57110 [uint 64]] [uint 8] [abstract core_ops_Shr_Output 0 2 [uint 64] [uint 8]] 
associated_type 2 r_named_0_57151 r_named_0_57152 0 core_ops_Shr_Output 0 2 [ref r_named_0_57151 [uint 64]] [ref r_named_0_57152 [uint 8]] [abstract core_ops_Shr_Output 0 2 [uint 64] [uint 8]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 32] [uint 8] [uint 8] 
fn core_ops_u8__Shr_shr 0 0 args 2 self [uint 8] other [uint 32] return [uint 8] 1 core_ops_Shr_shr 0 2 [uint 32] [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] binop BiShr ([uint 8] var self) ([uint 32] var other)) ([uint 8] var __result)) 
associated_type 1 r_named_0_57215 0 core_ops_Shr_Output 0 2 [uint 32] [ref r_named_0_57215 [uint 8]] [abstract core_ops_Shr_Output 0 2 [uint 32] [uint 8]] 
associated_type 1 r_named_0_57257 0 core_ops_Shr_Output 0 2 [ref r_named_0_57257 [uint 32]] [uint 8] [abstract core_ops_Shr_Output 0 2 [uint 32] [uint 8]] 
associated_type 2 r_named_0_57298 r_named_0_57299 0 core_ops_Shr_Output 0 2 [ref r_named_0_57298 [uint 32]] [ref r_named_0_57299 [uint 8]] [abstract core_ops_Shr_Output 0 2 [uint 32] [uint 8]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 8] [uint 8] [uint 8] 
fn core_ops_u8__Shr_shr 0 0 args 2 self [uint 8] other [int 8] return [uint 8] 1 core_ops_Shr_shr 0 2 [int 8] [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] binop BiShr ([uint 8] var self) ([int 8] var other)) ([uint 8] var __result)) 
associated_type 1 r_named_0_57362 0 core_ops_Shr_Output 0 2 [int 8] [ref r_named_0_57362 [uint 8]] [abstract core_ops_Shr_Output 0 2 [int 8] [uint 8]] 
associated_type 1 r_named_0_57404 0 core_ops_Shr_Output 0 2 [ref r_named_0_57404 [int 8]] [uint 8] [abstract core_ops_Shr_Output 0 2 [int 8] [uint 8]] 
associated_type 2 r_named_0_57445 r_named_0_57446 0 core_ops_Shr_Output 0 2 [ref r_named_0_57445 [int 8]] [ref r_named_0_57446 [uint 8]] [abstract core_ops_Shr_Output 0 2 [int 8] [uint 8]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 16] [uint 8] [uint 8] 
fn core_ops_u8__Shr_shr 0 0 args 2 self [uint 8] other [int 16] return [uint 8] 1 core_ops_Shr_shr 0 2 [int 16] [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] binop BiShr ([uint 8] var self) ([int 16] var other)) ([uint 8] var __result)) 
associated_type 1 r_named_0_57509 0 core_ops_Shr_Output 0 2 [int 16] [ref r_named_0_57509 [uint 8]] [abstract core_ops_Shr_Output 0 2 [int 16] [uint 8]] 
associated_type 1 r_named_0_57551 0 core_ops_Shr_Output 0 2 [ref r_named_0_57551 [int 16]] [uint 8] [abstract core_ops_Shr_Output 0 2 [int 16] [uint 8]] 
associated_type 2 r_named_0_57592 r_named_0_57593 0 core_ops_Shr_Output 0 2 [ref r_named_0_57592 [int 16]] [ref r_named_0_57593 [uint 8]] [abstract core_ops_Shr_Output 0 2 [int 16] [uint 8]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 32] [uint 8] [uint 8] 
fn core_ops_u8__Shr_shr 0 0 args 2 self [uint 8] other [int 32] return [uint 8] 1 core_ops_Shr_shr 0 2 [int 32] [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] binop BiShr ([uint 8] var self) ([int 32] var other)) ([uint 8] var __result)) 
associated_type 1 r_named_0_57656 0 core_ops_Shr_Output 0 2 [int 32] [ref r_named_0_57656 [uint 8]] [abstract core_ops_Shr_Output 0 2 [int 32] [uint 8]] 
associated_type 1 r_named_0_57698 0 core_ops_Shr_Output 0 2 [ref r_named_0_57698 [int 32]] [uint 8] [abstract core_ops_Shr_Output 0 2 [int 32] [uint 8]] 
associated_type 2 r_named_0_57739 r_named_0_57740 0 core_ops_Shr_Output 0 2 [ref r_named_0_57739 [int 32]] [ref r_named_0_57740 [uint 8]] [abstract core_ops_Shr_Output 0 2 [int 32] [uint 8]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 64] [uint 8] [uint 8] 
fn core_ops_u8__Shr_shr 0 0 args 2 self [uint 8] other [int 64] return [uint 8] 1 core_ops_Shr_shr 0 2 [int 64] [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] binop BiShr ([uint 8] var self) ([int 64] var other)) ([uint 8] var __result)) 
associated_type 1 r_named_0_57803 0 core_ops_Shr_Output 0 2 [int 64] [ref r_named_0_57803 [uint 8]] [abstract core_ops_Shr_Output 0 2 [int 64] [uint 8]] 
associated_type 1 r_named_0_57845 0 core_ops_Shr_Output 0 2 [ref r_named_0_57845 [int 64]] [uint 8] [abstract core_ops_Shr_Output 0 2 [int 64] [uint 8]] 
associated_type 2 r_named_0_57886 r_named_0_57887 0 core_ops_Shr_Output 0 2 [ref r_named_0_57886 [int 64]] [ref r_named_0_57887 [uint 8]] [abstract core_ops_Shr_Output 0 2 [int 64] [uint 8]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 32] [uint 8] [uint 8] 
fn core_ops_u8__Shr_shr 0 0 args 2 self [uint 8] other [int 32] return [uint 8] 1 core_ops_Shr_shr 0 2 [int 32] [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] binop BiShr ([uint 8] var self) ([int 32] var other)) ([uint 8] var __result)) 
associated_type 1 r_named_0_57950 0 core_ops_Shr_Output 0 2 [int 32] [ref r_named_0_57950 [uint 8]] [abstract core_ops_Shr_Output 0 2 [int 32] [uint 8]] 
associated_type 1 r_named_0_57992 0 core_ops_Shr_Output 0 2 [ref r_named_0_57992 [int 32]] [uint 8] [abstract core_ops_Shr_Output 0 2 [int 32] [uint 8]] 
associated_type 2 r_named_0_58033 r_named_0_58034 0 core_ops_Shr_Output 0 2 [ref r_named_0_58033 [int 32]] [ref r_named_0_58034 [uint 8]] [abstract core_ops_Shr_Output 0 2 [int 32] [uint 8]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 8] [uint 16] [uint 16] 
fn core_ops_u16__Shr_shr 0 0 args 2 self [uint 16] other [uint 8] return [uint 16] 1 core_ops_Shr_shr 0 2 [uint 8] [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] binop BiShr ([uint 16] var self) ([uint 8] var other)) ([uint 16] var __result)) 
associated_type 1 r_named_0_58097 0 core_ops_Shr_Output 0 2 [uint 8] [ref r_named_0_58097 [uint 16]] [abstract core_ops_Shr_Output 0 2 [uint 8] [uint 16]] 
associated_type 1 r_named_0_58139 0 core_ops_Shr_Output 0 2 [ref r_named_0_58139 [uint 8]] [uint 16] [abstract core_ops_Shr_Output 0 2 [uint 8] [uint 16]] 
associated_type 2 r_named_0_58180 r_named_0_58181 0 core_ops_Shr_Output 0 2 [ref r_named_0_58180 [uint 8]] [ref r_named_0_58181 [uint 16]] [abstract core_ops_Shr_Output 0 2 [uint 8] [uint 16]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 16] [uint 16] [uint 16] 
fn core_ops_u16__Shr_shr 0 0 args 2 self [uint 16] other [uint 16] return [uint 16] 1 core_ops_Shr_shr 0 2 [uint 16] [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] binop BiShr ([uint 16] var self) ([uint 16] var other)) ([uint 16] var __result)) 
associated_type 1 r_named_0_58244 0 core_ops_Shr_Output 0 2 [uint 16] [ref r_named_0_58244 [uint 16]] [abstract core_ops_Shr_Output 0 2 [uint 16] [uint 16]] 
associated_type 1 r_named_0_58286 0 core_ops_Shr_Output 0 2 [ref r_named_0_58286 [uint 16]] [uint 16] [abstract core_ops_Shr_Output 0 2 [uint 16] [uint 16]] 
associated_type 2 r_named_0_58327 r_named_0_58328 0 core_ops_Shr_Output 0 2 [ref r_named_0_58327 [uint 16]] [ref r_named_0_58328 [uint 16]] [abstract core_ops_Shr_Output 0 2 [uint 16] [uint 16]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 32] [uint 16] [uint 16] 
fn core_ops_u16__Shr_shr 0 0 args 2 self [uint 16] other [uint 32] return [uint 16] 1 core_ops_Shr_shr 0 2 [uint 32] [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] binop BiShr ([uint 16] var self) ([uint 32] var other)) ([uint 16] var __result)) 
associated_type 1 r_named_0_58391 0 core_ops_Shr_Output 0 2 [uint 32] [ref r_named_0_58391 [uint 16]] [abstract core_ops_Shr_Output 0 2 [uint 32] [uint 16]] 
associated_type 1 r_named_0_58433 0 core_ops_Shr_Output 0 2 [ref r_named_0_58433 [uint 32]] [uint 16] [abstract core_ops_Shr_Output 0 2 [uint 32] [uint 16]] 
associated_type 2 r_named_0_58474 r_named_0_58475 0 core_ops_Shr_Output 0 2 [ref r_named_0_58474 [uint 32]] [ref r_named_0_58475 [uint 16]] [abstract core_ops_Shr_Output 0 2 [uint 32] [uint 16]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 64] [uint 16] [uint 16] 
fn core_ops_u16__Shr_shr 0 0 args 2 self [uint 16] other [uint 64] return [uint 16] 1 core_ops_Shr_shr 0 2 [uint 64] [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] binop BiShr ([uint 16] var self) ([uint 64] var other)) ([uint 16] var __result)) 
associated_type 1 r_named_0_58538 0 core_ops_Shr_Output 0 2 [uint 64] [ref r_named_0_58538 [uint 16]] [abstract core_ops_Shr_Output 0 2 [uint 64] [uint 16]] 
associated_type 1 r_named_0_58580 0 core_ops_Shr_Output 0 2 [ref r_named_0_58580 [uint 64]] [uint 16] [abstract core_ops_Shr_Output 0 2 [uint 64] [uint 16]] 
associated_type 2 r_named_0_58621 r_named_0_58622 0 core_ops_Shr_Output 0 2 [ref r_named_0_58621 [uint 64]] [ref r_named_0_58622 [uint 16]] [abstract core_ops_Shr_Output 0 2 [uint 64] [uint 16]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 32] [uint 16] [uint 16] 
fn core_ops_u16__Shr_shr 0 0 args 2 self [uint 16] other [uint 32] return [uint 16] 1 core_ops_Shr_shr 0 2 [uint 32] [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] binop BiShr ([uint 16] var self) ([uint 32] var other)) ([uint 16] var __result)) 
associated_type 1 r_named_0_58685 0 core_ops_Shr_Output 0 2 [uint 32] [ref r_named_0_58685 [uint 16]] [abstract core_ops_Shr_Output 0 2 [uint 32] [uint 16]] 
associated_type 1 r_named_0_58727 0 core_ops_Shr_Output 0 2 [ref r_named_0_58727 [uint 32]] [uint 16] [abstract core_ops_Shr_Output 0 2 [uint 32] [uint 16]] 
associated_type 2 r_named_0_58768 r_named_0_58769 0 core_ops_Shr_Output 0 2 [ref r_named_0_58768 [uint 32]] [ref r_named_0_58769 [uint 16]] [abstract core_ops_Shr_Output 0 2 [uint 32] [uint 16]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 8] [uint 16] [uint 16] 
fn core_ops_u16__Shr_shr 0 0 args 2 self [uint 16] other [int 8] return [uint 16] 1 core_ops_Shr_shr 0 2 [int 8] [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] binop BiShr ([uint 16] var self) ([int 8] var other)) ([uint 16] var __result)) 
associated_type 1 r_named_0_58832 0 core_ops_Shr_Output 0 2 [int 8] [ref r_named_0_58832 [uint 16]] [abstract core_ops_Shr_Output 0 2 [int 8] [uint 16]] 
associated_type 1 r_named_0_58874 0 core_ops_Shr_Output 0 2 [ref r_named_0_58874 [int 8]] [uint 16] [abstract core_ops_Shr_Output 0 2 [int 8] [uint 16]] 
associated_type 2 r_named_0_58915 r_named_0_58916 0 core_ops_Shr_Output 0 2 [ref r_named_0_58915 [int 8]] [ref r_named_0_58916 [uint 16]] [abstract core_ops_Shr_Output 0 2 [int 8] [uint 16]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 16] [uint 16] [uint 16] 
fn core_ops_u16__Shr_shr 0 0 args 2 self [uint 16] other [int 16] return [uint 16] 1 core_ops_Shr_shr 0 2 [int 16] [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] binop BiShr ([uint 16] var self) ([int 16] var other)) ([uint 16] var __result)) 
associated_type 1 r_named_0_58979 0 core_ops_Shr_Output 0 2 [int 16] [ref r_named_0_58979 [uint 16]] [abstract core_ops_Shr_Output 0 2 [int 16] [uint 16]] 
associated_type 1 r_named_0_59021 0 core_ops_Shr_Output 0 2 [ref r_named_0_59021 [int 16]] [uint 16] [abstract core_ops_Shr_Output 0 2 [int 16] [uint 16]] 
associated_type 2 r_named_0_59062 r_named_0_59063 0 core_ops_Shr_Output 0 2 [ref r_named_0_59062 [int 16]] [ref r_named_0_59063 [uint 16]] [abstract core_ops_Shr_Output 0 2 [int 16] [uint 16]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 32] [uint 16] [uint 16] 
fn core_ops_u16__Shr_shr 0 0 args 2 self [uint 16] other [int 32] return [uint 16] 1 core_ops_Shr_shr 0 2 [int 32] [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] binop BiShr ([uint 16] var self) ([int 32] var other)) ([uint 16] var __result)) 
associated_type 1 r_named_0_59126 0 core_ops_Shr_Output 0 2 [int 32] [ref r_named_0_59126 [uint 16]] [abstract core_ops_Shr_Output 0 2 [int 32] [uint 16]] 
associated_type 1 r_named_0_59168 0 core_ops_Shr_Output 0 2 [ref r_named_0_59168 [int 32]] [uint 16] [abstract core_ops_Shr_Output 0 2 [int 32] [uint 16]] 
associated_type 2 r_named_0_59209 r_named_0_59210 0 core_ops_Shr_Output 0 2 [ref r_named_0_59209 [int 32]] [ref r_named_0_59210 [uint 16]] [abstract core_ops_Shr_Output 0 2 [int 32] [uint 16]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 64] [uint 16] [uint 16] 
fn core_ops_u16__Shr_shr 0 0 args 2 self [uint 16] other [int 64] return [uint 16] 1 core_ops_Shr_shr 0 2 [int 64] [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] binop BiShr ([uint 16] var self) ([int 64] var other)) ([uint 16] var __result)) 
associated_type 1 r_named_0_59273 0 core_ops_Shr_Output 0 2 [int 64] [ref r_named_0_59273 [uint 16]] [abstract core_ops_Shr_Output 0 2 [int 64] [uint 16]] 
associated_type 1 r_named_0_59315 0 core_ops_Shr_Output 0 2 [ref r_named_0_59315 [int 64]] [uint 16] [abstract core_ops_Shr_Output 0 2 [int 64] [uint 16]] 
associated_type 2 r_named_0_59356 r_named_0_59357 0 core_ops_Shr_Output 0 2 [ref r_named_0_59356 [int 64]] [ref r_named_0_59357 [uint 16]] [abstract core_ops_Shr_Output 0 2 [int 64] [uint 16]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 32] [uint 16] [uint 16] 
fn core_ops_u16__Shr_shr 0 0 args 2 self [uint 16] other [int 32] return [uint 16] 1 core_ops_Shr_shr 0 2 [int 32] [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] binop BiShr ([uint 16] var self) ([int 32] var other)) ([uint 16] var __result)) 
associated_type 1 r_named_0_59420 0 core_ops_Shr_Output 0 2 [int 32] [ref r_named_0_59420 [uint 16]] [abstract core_ops_Shr_Output 0 2 [int 32] [uint 16]] 
associated_type 1 r_named_0_59462 0 core_ops_Shr_Output 0 2 [ref r_named_0_59462 [int 32]] [uint 16] [abstract core_ops_Shr_Output 0 2 [int 32] [uint 16]] 
associated_type 2 r_named_0_59503 r_named_0_59504 0 core_ops_Shr_Output 0 2 [ref r_named_0_59503 [int 32]] [ref r_named_0_59504 [uint 16]] [abstract core_ops_Shr_Output 0 2 [int 32] [uint 16]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 8] [uint 32] [uint 32] 
fn core_ops_u32__Shr_shr 0 0 args 2 self [uint 32] other [uint 8] return [uint 32] 1 core_ops_Shr_shr 0 2 [uint 8] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShr ([uint 32] var self) ([uint 8] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_59567 0 core_ops_Shr_Output 0 2 [uint 8] [ref r_named_0_59567 [uint 32]] [abstract core_ops_Shr_Output 0 2 [uint 8] [uint 32]] 
associated_type 1 r_named_0_59609 0 core_ops_Shr_Output 0 2 [ref r_named_0_59609 [uint 8]] [uint 32] [abstract core_ops_Shr_Output 0 2 [uint 8] [uint 32]] 
associated_type 2 r_named_0_59650 r_named_0_59651 0 core_ops_Shr_Output 0 2 [ref r_named_0_59650 [uint 8]] [ref r_named_0_59651 [uint 32]] [abstract core_ops_Shr_Output 0 2 [uint 8] [uint 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 16] [uint 32] [uint 32] 
fn core_ops_u32__Shr_shr 0 0 args 2 self [uint 32] other [uint 16] return [uint 32] 1 core_ops_Shr_shr 0 2 [uint 16] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShr ([uint 32] var self) ([uint 16] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_59714 0 core_ops_Shr_Output 0 2 [uint 16] [ref r_named_0_59714 [uint 32]] [abstract core_ops_Shr_Output 0 2 [uint 16] [uint 32]] 
associated_type 1 r_named_0_59756 0 core_ops_Shr_Output 0 2 [ref r_named_0_59756 [uint 16]] [uint 32] [abstract core_ops_Shr_Output 0 2 [uint 16] [uint 32]] 
associated_type 2 r_named_0_59797 r_named_0_59798 0 core_ops_Shr_Output 0 2 [ref r_named_0_59797 [uint 16]] [ref r_named_0_59798 [uint 32]] [abstract core_ops_Shr_Output 0 2 [uint 16] [uint 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 32] [uint 32] [uint 32] 
fn core_ops_u32__Shr_shr 0 0 args 2 self [uint 32] other [uint 32] return [uint 32] 1 core_ops_Shr_shr 0 2 [uint 32] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShr ([uint 32] var self) ([uint 32] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_59861 0 core_ops_Shr_Output 0 2 [uint 32] [ref r_named_0_59861 [uint 32]] [abstract core_ops_Shr_Output 0 2 [uint 32] [uint 32]] 
associated_type 1 r_named_0_59903 0 core_ops_Shr_Output 0 2 [ref r_named_0_59903 [uint 32]] [uint 32] [abstract core_ops_Shr_Output 0 2 [uint 32] [uint 32]] 
associated_type 2 r_named_0_59944 r_named_0_59945 0 core_ops_Shr_Output 0 2 [ref r_named_0_59944 [uint 32]] [ref r_named_0_59945 [uint 32]] [abstract core_ops_Shr_Output 0 2 [uint 32] [uint 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 64] [uint 32] [uint 32] 
fn core_ops_u32__Shr_shr 0 0 args 2 self [uint 32] other [uint 64] return [uint 32] 1 core_ops_Shr_shr 0 2 [uint 64] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShr ([uint 32] var self) ([uint 64] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_60008 0 core_ops_Shr_Output 0 2 [uint 64] [ref r_named_0_60008 [uint 32]] [abstract core_ops_Shr_Output 0 2 [uint 64] [uint 32]] 
associated_type 1 r_named_0_60050 0 core_ops_Shr_Output 0 2 [ref r_named_0_60050 [uint 64]] [uint 32] [abstract core_ops_Shr_Output 0 2 [uint 64] [uint 32]] 
associated_type 2 r_named_0_60091 r_named_0_60092 0 core_ops_Shr_Output 0 2 [ref r_named_0_60091 [uint 64]] [ref r_named_0_60092 [uint 32]] [abstract core_ops_Shr_Output 0 2 [uint 64] [uint 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 32] [uint 32] [uint 32] 
fn core_ops_u32__Shr_shr 0 0 args 2 self [uint 32] other [uint 32] return [uint 32] 1 core_ops_Shr_shr 0 2 [uint 32] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShr ([uint 32] var self) ([uint 32] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_60155 0 core_ops_Shr_Output 0 2 [uint 32] [ref r_named_0_60155 [uint 32]] [abstract core_ops_Shr_Output 0 2 [uint 32] [uint 32]] 
associated_type 1 r_named_0_60197 0 core_ops_Shr_Output 0 2 [ref r_named_0_60197 [uint 32]] [uint 32] [abstract core_ops_Shr_Output 0 2 [uint 32] [uint 32]] 
associated_type 2 r_named_0_60238 r_named_0_60239 0 core_ops_Shr_Output 0 2 [ref r_named_0_60238 [uint 32]] [ref r_named_0_60239 [uint 32]] [abstract core_ops_Shr_Output 0 2 [uint 32] [uint 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 8] [uint 32] [uint 32] 
fn core_ops_u32__Shr_shr 0 0 args 2 self [uint 32] other [int 8] return [uint 32] 1 core_ops_Shr_shr 0 2 [int 8] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShr ([uint 32] var self) ([int 8] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_60302 0 core_ops_Shr_Output 0 2 [int 8] [ref r_named_0_60302 [uint 32]] [abstract core_ops_Shr_Output 0 2 [int 8] [uint 32]] 
associated_type 1 r_named_0_60344 0 core_ops_Shr_Output 0 2 [ref r_named_0_60344 [int 8]] [uint 32] [abstract core_ops_Shr_Output 0 2 [int 8] [uint 32]] 
associated_type 2 r_named_0_60385 r_named_0_60386 0 core_ops_Shr_Output 0 2 [ref r_named_0_60385 [int 8]] [ref r_named_0_60386 [uint 32]] [abstract core_ops_Shr_Output 0 2 [int 8] [uint 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 16] [uint 32] [uint 32] 
fn core_ops_u32__Shr_shr 0 0 args 2 self [uint 32] other [int 16] return [uint 32] 1 core_ops_Shr_shr 0 2 [int 16] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShr ([uint 32] var self) ([int 16] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_60449 0 core_ops_Shr_Output 0 2 [int 16] [ref r_named_0_60449 [uint 32]] [abstract core_ops_Shr_Output 0 2 [int 16] [uint 32]] 
associated_type 1 r_named_0_60491 0 core_ops_Shr_Output 0 2 [ref r_named_0_60491 [int 16]] [uint 32] [abstract core_ops_Shr_Output 0 2 [int 16] [uint 32]] 
associated_type 2 r_named_0_60532 r_named_0_60533 0 core_ops_Shr_Output 0 2 [ref r_named_0_60532 [int 16]] [ref r_named_0_60533 [uint 32]] [abstract core_ops_Shr_Output 0 2 [int 16] [uint 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 32] [uint 32] [uint 32] 
fn core_ops_u32__Shr_shr 0 0 args 2 self [uint 32] other [int 32] return [uint 32] 1 core_ops_Shr_shr 0 2 [int 32] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShr ([uint 32] var self) ([int 32] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_60596 0 core_ops_Shr_Output 0 2 [int 32] [ref r_named_0_60596 [uint 32]] [abstract core_ops_Shr_Output 0 2 [int 32] [uint 32]] 
associated_type 1 r_named_0_60638 0 core_ops_Shr_Output 0 2 [ref r_named_0_60638 [int 32]] [uint 32] [abstract core_ops_Shr_Output 0 2 [int 32] [uint 32]] 
associated_type 2 r_named_0_60679 r_named_0_60680 0 core_ops_Shr_Output 0 2 [ref r_named_0_60679 [int 32]] [ref r_named_0_60680 [uint 32]] [abstract core_ops_Shr_Output 0 2 [int 32] [uint 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 64] [uint 32] [uint 32] 
fn core_ops_u32__Shr_shr 0 0 args 2 self [uint 32] other [int 64] return [uint 32] 1 core_ops_Shr_shr 0 2 [int 64] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShr ([uint 32] var self) ([int 64] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_60743 0 core_ops_Shr_Output 0 2 [int 64] [ref r_named_0_60743 [uint 32]] [abstract core_ops_Shr_Output 0 2 [int 64] [uint 32]] 
associated_type 1 r_named_0_60785 0 core_ops_Shr_Output 0 2 [ref r_named_0_60785 [int 64]] [uint 32] [abstract core_ops_Shr_Output 0 2 [int 64] [uint 32]] 
associated_type 2 r_named_0_60826 r_named_0_60827 0 core_ops_Shr_Output 0 2 [ref r_named_0_60826 [int 64]] [ref r_named_0_60827 [uint 32]] [abstract core_ops_Shr_Output 0 2 [int 64] [uint 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 32] [uint 32] [uint 32] 
fn core_ops_u32__Shr_shr 0 0 args 2 self [uint 32] other [int 32] return [uint 32] 1 core_ops_Shr_shr 0 2 [int 32] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShr ([uint 32] var self) ([int 32] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_60890 0 core_ops_Shr_Output 0 2 [int 32] [ref r_named_0_60890 [uint 32]] [abstract core_ops_Shr_Output 0 2 [int 32] [uint 32]] 
associated_type 1 r_named_0_60932 0 core_ops_Shr_Output 0 2 [ref r_named_0_60932 [int 32]] [uint 32] [abstract core_ops_Shr_Output 0 2 [int 32] [uint 32]] 
associated_type 2 r_named_0_60973 r_named_0_60974 0 core_ops_Shr_Output 0 2 [ref r_named_0_60973 [int 32]] [ref r_named_0_60974 [uint 32]] [abstract core_ops_Shr_Output 0 2 [int 32] [uint 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 8] [uint 64] [uint 64] 
fn core_ops_u64__Shr_shr 0 0 args 2 self [uint 64] other [uint 8] return [uint 64] 1 core_ops_Shr_shr 0 2 [uint 8] [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] binop BiShr ([uint 64] var self) ([uint 8] var other)) ([uint 64] var __result)) 
associated_type 1 r_named_0_61037 0 core_ops_Shr_Output 0 2 [uint 8] [ref r_named_0_61037 [uint 64]] [abstract core_ops_Shr_Output 0 2 [uint 8] [uint 64]] 
associated_type 1 r_named_0_61079 0 core_ops_Shr_Output 0 2 [ref r_named_0_61079 [uint 8]] [uint 64] [abstract core_ops_Shr_Output 0 2 [uint 8] [uint 64]] 
associated_type 2 r_named_0_61120 r_named_0_61121 0 core_ops_Shr_Output 0 2 [ref r_named_0_61120 [uint 8]] [ref r_named_0_61121 [uint 64]] [abstract core_ops_Shr_Output 0 2 [uint 8] [uint 64]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 16] [uint 64] [uint 64] 
fn core_ops_u64__Shr_shr 0 0 args 2 self [uint 64] other [uint 16] return [uint 64] 1 core_ops_Shr_shr 0 2 [uint 16] [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] binop BiShr ([uint 64] var self) ([uint 16] var other)) ([uint 64] var __result)) 
associated_type 1 r_named_0_61184 0 core_ops_Shr_Output 0 2 [uint 16] [ref r_named_0_61184 [uint 64]] [abstract core_ops_Shr_Output 0 2 [uint 16] [uint 64]] 
associated_type 1 r_named_0_61226 0 core_ops_Shr_Output 0 2 [ref r_named_0_61226 [uint 16]] [uint 64] [abstract core_ops_Shr_Output 0 2 [uint 16] [uint 64]] 
associated_type 2 r_named_0_61267 r_named_0_61268 0 core_ops_Shr_Output 0 2 [ref r_named_0_61267 [uint 16]] [ref r_named_0_61268 [uint 64]] [abstract core_ops_Shr_Output 0 2 [uint 16] [uint 64]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 32] [uint 64] [uint 64] 
fn core_ops_u64__Shr_shr 0 0 args 2 self [uint 64] other [uint 32] return [uint 64] 1 core_ops_Shr_shr 0 2 [uint 32] [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] binop BiShr ([uint 64] var self) ([uint 32] var other)) ([uint 64] var __result)) 
associated_type 1 r_named_0_61331 0 core_ops_Shr_Output 0 2 [uint 32] [ref r_named_0_61331 [uint 64]] [abstract core_ops_Shr_Output 0 2 [uint 32] [uint 64]] 
associated_type 1 r_named_0_61373 0 core_ops_Shr_Output 0 2 [ref r_named_0_61373 [uint 32]] [uint 64] [abstract core_ops_Shr_Output 0 2 [uint 32] [uint 64]] 
associated_type 2 r_named_0_61414 r_named_0_61415 0 core_ops_Shr_Output 0 2 [ref r_named_0_61414 [uint 32]] [ref r_named_0_61415 [uint 64]] [abstract core_ops_Shr_Output 0 2 [uint 32] [uint 64]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 64] [uint 64] [uint 64] 
fn core_ops_u64__Shr_shr 0 0 args 2 self [uint 64] other [uint 64] return [uint 64] 1 core_ops_Shr_shr 0 2 [uint 64] [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] binop BiShr ([uint 64] var self) ([uint 64] var other)) ([uint 64] var __result)) 
associated_type 1 r_named_0_61478 0 core_ops_Shr_Output 0 2 [uint 64] [ref r_named_0_61478 [uint 64]] [abstract core_ops_Shr_Output 0 2 [uint 64] [uint 64]] 
associated_type 1 r_named_0_61520 0 core_ops_Shr_Output 0 2 [ref r_named_0_61520 [uint 64]] [uint 64] [abstract core_ops_Shr_Output 0 2 [uint 64] [uint 64]] 
associated_type 2 r_named_0_61561 r_named_0_61562 0 core_ops_Shr_Output 0 2 [ref r_named_0_61561 [uint 64]] [ref r_named_0_61562 [uint 64]] [abstract core_ops_Shr_Output 0 2 [uint 64] [uint 64]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 32] [uint 64] [uint 64] 
fn core_ops_u64__Shr_shr 0 0 args 2 self [uint 64] other [uint 32] return [uint 64] 1 core_ops_Shr_shr 0 2 [uint 32] [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] binop BiShr ([uint 64] var self) ([uint 32] var other)) ([uint 64] var __result)) 
associated_type 1 r_named_0_61625 0 core_ops_Shr_Output 0 2 [uint 32] [ref r_named_0_61625 [uint 64]] [abstract core_ops_Shr_Output 0 2 [uint 32] [uint 64]] 
associated_type 1 r_named_0_61667 0 core_ops_Shr_Output 0 2 [ref r_named_0_61667 [uint 32]] [uint 64] [abstract core_ops_Shr_Output 0 2 [uint 32] [uint 64]] 
associated_type 2 r_named_0_61708 r_named_0_61709 0 core_ops_Shr_Output 0 2 [ref r_named_0_61708 [uint 32]] [ref r_named_0_61709 [uint 64]] [abstract core_ops_Shr_Output 0 2 [uint 32] [uint 64]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 8] [uint 64] [uint 64] 
fn core_ops_u64__Shr_shr 0 0 args 2 self [uint 64] other [int 8] return [uint 64] 1 core_ops_Shr_shr 0 2 [int 8] [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] binop BiShr ([uint 64] var self) ([int 8] var other)) ([uint 64] var __result)) 
associated_type 1 r_named_0_61772 0 core_ops_Shr_Output 0 2 [int 8] [ref r_named_0_61772 [uint 64]] [abstract core_ops_Shr_Output 0 2 [int 8] [uint 64]] 
associated_type 1 r_named_0_61814 0 core_ops_Shr_Output 0 2 [ref r_named_0_61814 [int 8]] [uint 64] [abstract core_ops_Shr_Output 0 2 [int 8] [uint 64]] 
associated_type 2 r_named_0_61855 r_named_0_61856 0 core_ops_Shr_Output 0 2 [ref r_named_0_61855 [int 8]] [ref r_named_0_61856 [uint 64]] [abstract core_ops_Shr_Output 0 2 [int 8] [uint 64]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 16] [uint 64] [uint 64] 
fn core_ops_u64__Shr_shr 0 0 args 2 self [uint 64] other [int 16] return [uint 64] 1 core_ops_Shr_shr 0 2 [int 16] [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] binop BiShr ([uint 64] var self) ([int 16] var other)) ([uint 64] var __result)) 
associated_type 1 r_named_0_61919 0 core_ops_Shr_Output 0 2 [int 16] [ref r_named_0_61919 [uint 64]] [abstract core_ops_Shr_Output 0 2 [int 16] [uint 64]] 
associated_type 1 r_named_0_61961 0 core_ops_Shr_Output 0 2 [ref r_named_0_61961 [int 16]] [uint 64] [abstract core_ops_Shr_Output 0 2 [int 16] [uint 64]] 
associated_type 2 r_named_0_62002 r_named_0_62003 0 core_ops_Shr_Output 0 2 [ref r_named_0_62002 [int 16]] [ref r_named_0_62003 [uint 64]] [abstract core_ops_Shr_Output 0 2 [int 16] [uint 64]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 32] [uint 64] [uint 64] 
fn core_ops_u64__Shr_shr 0 0 args 2 self [uint 64] other [int 32] return [uint 64] 1 core_ops_Shr_shr 0 2 [int 32] [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] binop BiShr ([uint 64] var self) ([int 32] var other)) ([uint 64] var __result)) 
associated_type 1 r_named_0_62066 0 core_ops_Shr_Output 0 2 [int 32] [ref r_named_0_62066 [uint 64]] [abstract core_ops_Shr_Output 0 2 [int 32] [uint 64]] 
associated_type 1 r_named_0_62108 0 core_ops_Shr_Output 0 2 [ref r_named_0_62108 [int 32]] [uint 64] [abstract core_ops_Shr_Output 0 2 [int 32] [uint 64]] 
associated_type 2 r_named_0_62149 r_named_0_62150 0 core_ops_Shr_Output 0 2 [ref r_named_0_62149 [int 32]] [ref r_named_0_62150 [uint 64]] [abstract core_ops_Shr_Output 0 2 [int 32] [uint 64]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 64] [uint 64] [uint 64] 
fn core_ops_u64__Shr_shr 0 0 args 2 self [uint 64] other [int 64] return [uint 64] 1 core_ops_Shr_shr 0 2 [int 64] [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] binop BiShr ([uint 64] var self) ([int 64] var other)) ([uint 64] var __result)) 
associated_type 1 r_named_0_62213 0 core_ops_Shr_Output 0 2 [int 64] [ref r_named_0_62213 [uint 64]] [abstract core_ops_Shr_Output 0 2 [int 64] [uint 64]] 
associated_type 1 r_named_0_62255 0 core_ops_Shr_Output 0 2 [ref r_named_0_62255 [int 64]] [uint 64] [abstract core_ops_Shr_Output 0 2 [int 64] [uint 64]] 
associated_type 2 r_named_0_62296 r_named_0_62297 0 core_ops_Shr_Output 0 2 [ref r_named_0_62296 [int 64]] [ref r_named_0_62297 [uint 64]] [abstract core_ops_Shr_Output 0 2 [int 64] [uint 64]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 32] [uint 64] [uint 64] 
fn core_ops_u64__Shr_shr 0 0 args 2 self [uint 64] other [int 32] return [uint 64] 1 core_ops_Shr_shr 0 2 [int 32] [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] binop BiShr ([uint 64] var self) ([int 32] var other)) ([uint 64] var __result)) 
associated_type 1 r_named_0_62360 0 core_ops_Shr_Output 0 2 [int 32] [ref r_named_0_62360 [uint 64]] [abstract core_ops_Shr_Output 0 2 [int 32] [uint 64]] 
associated_type 1 r_named_0_62402 0 core_ops_Shr_Output 0 2 [ref r_named_0_62402 [int 32]] [uint 64] [abstract core_ops_Shr_Output 0 2 [int 32] [uint 64]] 
associated_type 2 r_named_0_62443 r_named_0_62444 0 core_ops_Shr_Output 0 2 [ref r_named_0_62443 [int 32]] [ref r_named_0_62444 [uint 64]] [abstract core_ops_Shr_Output 0 2 [int 32] [uint 64]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 8] [uint 32] [uint 32] 
fn core_ops_usize__Shr_shr 0 0 args 2 self [uint 32] other [uint 8] return [uint 32] 1 core_ops_Shr_shr 0 2 [uint 8] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShr ([uint 32] var self) ([uint 8] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_62507 0 core_ops_Shr_Output 0 2 [uint 8] [ref r_named_0_62507 [uint 32]] [abstract core_ops_Shr_Output 0 2 [uint 8] [uint 32]] 
associated_type 1 r_named_0_62549 0 core_ops_Shr_Output 0 2 [ref r_named_0_62549 [uint 8]] [uint 32] [abstract core_ops_Shr_Output 0 2 [uint 8] [uint 32]] 
associated_type 2 r_named_0_62590 r_named_0_62591 0 core_ops_Shr_Output 0 2 [ref r_named_0_62590 [uint 8]] [ref r_named_0_62591 [uint 32]] [abstract core_ops_Shr_Output 0 2 [uint 8] [uint 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 16] [uint 32] [uint 32] 
fn core_ops_usize__Shr_shr 0 0 args 2 self [uint 32] other [uint 16] return [uint 32] 1 core_ops_Shr_shr 0 2 [uint 16] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShr ([uint 32] var self) ([uint 16] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_62654 0 core_ops_Shr_Output 0 2 [uint 16] [ref r_named_0_62654 [uint 32]] [abstract core_ops_Shr_Output 0 2 [uint 16] [uint 32]] 
associated_type 1 r_named_0_62696 0 core_ops_Shr_Output 0 2 [ref r_named_0_62696 [uint 16]] [uint 32] [abstract core_ops_Shr_Output 0 2 [uint 16] [uint 32]] 
associated_type 2 r_named_0_62737 r_named_0_62738 0 core_ops_Shr_Output 0 2 [ref r_named_0_62737 [uint 16]] [ref r_named_0_62738 [uint 32]] [abstract core_ops_Shr_Output 0 2 [uint 16] [uint 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 32] [uint 32] [uint 32] 
fn core_ops_usize__Shr_shr 0 0 args 2 self [uint 32] other [uint 32] return [uint 32] 1 core_ops_Shr_shr 0 2 [uint 32] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShr ([uint 32] var self) ([uint 32] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_62801 0 core_ops_Shr_Output 0 2 [uint 32] [ref r_named_0_62801 [uint 32]] [abstract core_ops_Shr_Output 0 2 [uint 32] [uint 32]] 
associated_type 1 r_named_0_62843 0 core_ops_Shr_Output 0 2 [ref r_named_0_62843 [uint 32]] [uint 32] [abstract core_ops_Shr_Output 0 2 [uint 32] [uint 32]] 
associated_type 2 r_named_0_62884 r_named_0_62885 0 core_ops_Shr_Output 0 2 [ref r_named_0_62884 [uint 32]] [ref r_named_0_62885 [uint 32]] [abstract core_ops_Shr_Output 0 2 [uint 32] [uint 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 64] [uint 32] [uint 32] 
fn core_ops_usize__Shr_shr 0 0 args 2 self [uint 32] other [uint 64] return [uint 32] 1 core_ops_Shr_shr 0 2 [uint 64] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShr ([uint 32] var self) ([uint 64] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_62948 0 core_ops_Shr_Output 0 2 [uint 64] [ref r_named_0_62948 [uint 32]] [abstract core_ops_Shr_Output 0 2 [uint 64] [uint 32]] 
associated_type 1 r_named_0_62990 0 core_ops_Shr_Output 0 2 [ref r_named_0_62990 [uint 64]] [uint 32] [abstract core_ops_Shr_Output 0 2 [uint 64] [uint 32]] 
associated_type 2 r_named_0_63031 r_named_0_63032 0 core_ops_Shr_Output 0 2 [ref r_named_0_63031 [uint 64]] [ref r_named_0_63032 [uint 32]] [abstract core_ops_Shr_Output 0 2 [uint 64] [uint 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 32] [uint 32] [uint 32] 
fn core_ops_usize__Shr_shr 0 0 args 2 self [uint 32] other [uint 32] return [uint 32] 1 core_ops_Shr_shr 0 2 [uint 32] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShr ([uint 32] var self) ([uint 32] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_63095 0 core_ops_Shr_Output 0 2 [uint 32] [ref r_named_0_63095 [uint 32]] [abstract core_ops_Shr_Output 0 2 [uint 32] [uint 32]] 
associated_type 1 r_named_0_63137 0 core_ops_Shr_Output 0 2 [ref r_named_0_63137 [uint 32]] [uint 32] [abstract core_ops_Shr_Output 0 2 [uint 32] [uint 32]] 
associated_type 2 r_named_0_63178 r_named_0_63179 0 core_ops_Shr_Output 0 2 [ref r_named_0_63178 [uint 32]] [ref r_named_0_63179 [uint 32]] [abstract core_ops_Shr_Output 0 2 [uint 32] [uint 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 8] [uint 32] [uint 32] 
fn core_ops_usize__Shr_shr 0 0 args 2 self [uint 32] other [int 8] return [uint 32] 1 core_ops_Shr_shr 0 2 [int 8] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShr ([uint 32] var self) ([int 8] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_63242 0 core_ops_Shr_Output 0 2 [int 8] [ref r_named_0_63242 [uint 32]] [abstract core_ops_Shr_Output 0 2 [int 8] [uint 32]] 
associated_type 1 r_named_0_63284 0 core_ops_Shr_Output 0 2 [ref r_named_0_63284 [int 8]] [uint 32] [abstract core_ops_Shr_Output 0 2 [int 8] [uint 32]] 
associated_type 2 r_named_0_63325 r_named_0_63326 0 core_ops_Shr_Output 0 2 [ref r_named_0_63325 [int 8]] [ref r_named_0_63326 [uint 32]] [abstract core_ops_Shr_Output 0 2 [int 8] [uint 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 16] [uint 32] [uint 32] 
fn core_ops_usize__Shr_shr 0 0 args 2 self [uint 32] other [int 16] return [uint 32] 1 core_ops_Shr_shr 0 2 [int 16] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShr ([uint 32] var self) ([int 16] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_63389 0 core_ops_Shr_Output 0 2 [int 16] [ref r_named_0_63389 [uint 32]] [abstract core_ops_Shr_Output 0 2 [int 16] [uint 32]] 
associated_type 1 r_named_0_63431 0 core_ops_Shr_Output 0 2 [ref r_named_0_63431 [int 16]] [uint 32] [abstract core_ops_Shr_Output 0 2 [int 16] [uint 32]] 
associated_type 2 r_named_0_63472 r_named_0_63473 0 core_ops_Shr_Output 0 2 [ref r_named_0_63472 [int 16]] [ref r_named_0_63473 [uint 32]] [abstract core_ops_Shr_Output 0 2 [int 16] [uint 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 32] [uint 32] [uint 32] 
fn core_ops_usize__Shr_shr 0 0 args 2 self [uint 32] other [int 32] return [uint 32] 1 core_ops_Shr_shr 0 2 [int 32] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShr ([uint 32] var self) ([int 32] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_63536 0 core_ops_Shr_Output 0 2 [int 32] [ref r_named_0_63536 [uint 32]] [abstract core_ops_Shr_Output 0 2 [int 32] [uint 32]] 
associated_type 1 r_named_0_63578 0 core_ops_Shr_Output 0 2 [ref r_named_0_63578 [int 32]] [uint 32] [abstract core_ops_Shr_Output 0 2 [int 32] [uint 32]] 
associated_type 2 r_named_0_63619 r_named_0_63620 0 core_ops_Shr_Output 0 2 [ref r_named_0_63619 [int 32]] [ref r_named_0_63620 [uint 32]] [abstract core_ops_Shr_Output 0 2 [int 32] [uint 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 64] [uint 32] [uint 32] 
fn core_ops_usize__Shr_shr 0 0 args 2 self [uint 32] other [int 64] return [uint 32] 1 core_ops_Shr_shr 0 2 [int 64] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShr ([uint 32] var self) ([int 64] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_63683 0 core_ops_Shr_Output 0 2 [int 64] [ref r_named_0_63683 [uint 32]] [abstract core_ops_Shr_Output 0 2 [int 64] [uint 32]] 
associated_type 1 r_named_0_63725 0 core_ops_Shr_Output 0 2 [ref r_named_0_63725 [int 64]] [uint 32] [abstract core_ops_Shr_Output 0 2 [int 64] [uint 32]] 
associated_type 2 r_named_0_63766 r_named_0_63767 0 core_ops_Shr_Output 0 2 [ref r_named_0_63766 [int 64]] [ref r_named_0_63767 [uint 32]] [abstract core_ops_Shr_Output 0 2 [int 64] [uint 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 32] [uint 32] [uint 32] 
fn core_ops_usize__Shr_shr 0 0 args 2 self [uint 32] other [int 32] return [uint 32] 1 core_ops_Shr_shr 0 2 [int 32] [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiShr ([uint 32] var self) ([int 32] var other)) ([uint 32] var __result)) 
associated_type 1 r_named_0_63830 0 core_ops_Shr_Output 0 2 [int 32] [ref r_named_0_63830 [uint 32]] [abstract core_ops_Shr_Output 0 2 [int 32] [uint 32]] 
associated_type 1 r_named_0_63872 0 core_ops_Shr_Output 0 2 [ref r_named_0_63872 [int 32]] [uint 32] [abstract core_ops_Shr_Output 0 2 [int 32] [uint 32]] 
associated_type 2 r_named_0_63913 r_named_0_63914 0 core_ops_Shr_Output 0 2 [ref r_named_0_63913 [int 32]] [ref r_named_0_63914 [uint 32]] [abstract core_ops_Shr_Output 0 2 [int 32] [uint 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 8] [int 8] [int 8] 
fn core_ops_i8__Shr_shr 0 0 args 2 self [int 8] other [uint 8] return [int 8] 1 core_ops_Shr_shr 0 2 [uint 8] [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] binop BiShr ([int 8] var self) ([uint 8] var other)) ([int 8] var __result)) 
associated_type 1 r_named_0_63977 0 core_ops_Shr_Output 0 2 [uint 8] [ref r_named_0_63977 [int 8]] [abstract core_ops_Shr_Output 0 2 [uint 8] [int 8]] 
associated_type 1 r_named_0_64019 0 core_ops_Shr_Output 0 2 [ref r_named_0_64019 [uint 8]] [int 8] [abstract core_ops_Shr_Output 0 2 [uint 8] [int 8]] 
associated_type 2 r_named_0_64060 r_named_0_64061 0 core_ops_Shr_Output 0 2 [ref r_named_0_64060 [uint 8]] [ref r_named_0_64061 [int 8]] [abstract core_ops_Shr_Output 0 2 [uint 8] [int 8]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 16] [int 8] [int 8] 
fn core_ops_i8__Shr_shr 0 0 args 2 self [int 8] other [uint 16] return [int 8] 1 core_ops_Shr_shr 0 2 [uint 16] [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] binop BiShr ([int 8] var self) ([uint 16] var other)) ([int 8] var __result)) 
associated_type 1 r_named_0_64124 0 core_ops_Shr_Output 0 2 [uint 16] [ref r_named_0_64124 [int 8]] [abstract core_ops_Shr_Output 0 2 [uint 16] [int 8]] 
associated_type 1 r_named_0_64166 0 core_ops_Shr_Output 0 2 [ref r_named_0_64166 [uint 16]] [int 8] [abstract core_ops_Shr_Output 0 2 [uint 16] [int 8]] 
associated_type 2 r_named_0_64207 r_named_0_64208 0 core_ops_Shr_Output 0 2 [ref r_named_0_64207 [uint 16]] [ref r_named_0_64208 [int 8]] [abstract core_ops_Shr_Output 0 2 [uint 16] [int 8]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 32] [int 8] [int 8] 
fn core_ops_i8__Shr_shr 0 0 args 2 self [int 8] other [uint 32] return [int 8] 1 core_ops_Shr_shr 0 2 [uint 32] [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] binop BiShr ([int 8] var self) ([uint 32] var other)) ([int 8] var __result)) 
associated_type 1 r_named_0_64271 0 core_ops_Shr_Output 0 2 [uint 32] [ref r_named_0_64271 [int 8]] [abstract core_ops_Shr_Output 0 2 [uint 32] [int 8]] 
associated_type 1 r_named_0_64313 0 core_ops_Shr_Output 0 2 [ref r_named_0_64313 [uint 32]] [int 8] [abstract core_ops_Shr_Output 0 2 [uint 32] [int 8]] 
associated_type 2 r_named_0_64354 r_named_0_64355 0 core_ops_Shr_Output 0 2 [ref r_named_0_64354 [uint 32]] [ref r_named_0_64355 [int 8]] [abstract core_ops_Shr_Output 0 2 [uint 32] [int 8]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 64] [int 8] [int 8] 
fn core_ops_i8__Shr_shr 0 0 args 2 self [int 8] other [uint 64] return [int 8] 1 core_ops_Shr_shr 0 2 [uint 64] [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] binop BiShr ([int 8] var self) ([uint 64] var other)) ([int 8] var __result)) 
associated_type 1 r_named_0_64418 0 core_ops_Shr_Output 0 2 [uint 64] [ref r_named_0_64418 [int 8]] [abstract core_ops_Shr_Output 0 2 [uint 64] [int 8]] 
associated_type 1 r_named_0_64460 0 core_ops_Shr_Output 0 2 [ref r_named_0_64460 [uint 64]] [int 8] [abstract core_ops_Shr_Output 0 2 [uint 64] [int 8]] 
associated_type 2 r_named_0_64501 r_named_0_64502 0 core_ops_Shr_Output 0 2 [ref r_named_0_64501 [uint 64]] [ref r_named_0_64502 [int 8]] [abstract core_ops_Shr_Output 0 2 [uint 64] [int 8]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 32] [int 8] [int 8] 
fn core_ops_i8__Shr_shr 0 0 args 2 self [int 8] other [uint 32] return [int 8] 1 core_ops_Shr_shr 0 2 [uint 32] [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] binop BiShr ([int 8] var self) ([uint 32] var other)) ([int 8] var __result)) 
associated_type 1 r_named_0_64565 0 core_ops_Shr_Output 0 2 [uint 32] [ref r_named_0_64565 [int 8]] [abstract core_ops_Shr_Output 0 2 [uint 32] [int 8]] 
associated_type 1 r_named_0_64607 0 core_ops_Shr_Output 0 2 [ref r_named_0_64607 [uint 32]] [int 8] [abstract core_ops_Shr_Output 0 2 [uint 32] [int 8]] 
associated_type 2 r_named_0_64648 r_named_0_64649 0 core_ops_Shr_Output 0 2 [ref r_named_0_64648 [uint 32]] [ref r_named_0_64649 [int 8]] [abstract core_ops_Shr_Output 0 2 [uint 32] [int 8]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 8] [int 8] [int 8] 
fn core_ops_i8__Shr_shr 0 0 args 2 self [int 8] other [int 8] return [int 8] 1 core_ops_Shr_shr 0 2 [int 8] [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] binop BiShr ([int 8] var self) ([int 8] var other)) ([int 8] var __result)) 
associated_type 1 r_named_0_64712 0 core_ops_Shr_Output 0 2 [int 8] [ref r_named_0_64712 [int 8]] [abstract core_ops_Shr_Output 0 2 [int 8] [int 8]] 
associated_type 1 r_named_0_64754 0 core_ops_Shr_Output 0 2 [ref r_named_0_64754 [int 8]] [int 8] [abstract core_ops_Shr_Output 0 2 [int 8] [int 8]] 
associated_type 2 r_named_0_64795 r_named_0_64796 0 core_ops_Shr_Output 0 2 [ref r_named_0_64795 [int 8]] [ref r_named_0_64796 [int 8]] [abstract core_ops_Shr_Output 0 2 [int 8] [int 8]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 16] [int 8] [int 8] 
fn core_ops_i8__Shr_shr 0 0 args 2 self [int 8] other [int 16] return [int 8] 1 core_ops_Shr_shr 0 2 [int 16] [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] binop BiShr ([int 8] var self) ([int 16] var other)) ([int 8] var __result)) 
associated_type 1 r_named_0_64859 0 core_ops_Shr_Output 0 2 [int 16] [ref r_named_0_64859 [int 8]] [abstract core_ops_Shr_Output 0 2 [int 16] [int 8]] 
associated_type 1 r_named_0_64901 0 core_ops_Shr_Output 0 2 [ref r_named_0_64901 [int 16]] [int 8] [abstract core_ops_Shr_Output 0 2 [int 16] [int 8]] 
associated_type 2 r_named_0_64942 r_named_0_64943 0 core_ops_Shr_Output 0 2 [ref r_named_0_64942 [int 16]] [ref r_named_0_64943 [int 8]] [abstract core_ops_Shr_Output 0 2 [int 16] [int 8]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 32] [int 8] [int 8] 
fn core_ops_i8__Shr_shr 0 0 args 2 self [int 8] other [int 32] return [int 8] 1 core_ops_Shr_shr 0 2 [int 32] [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] binop BiShr ([int 8] var self) ([int 32] var other)) ([int 8] var __result)) 
associated_type 1 r_named_0_65006 0 core_ops_Shr_Output 0 2 [int 32] [ref r_named_0_65006 [int 8]] [abstract core_ops_Shr_Output 0 2 [int 32] [int 8]] 
associated_type 1 r_named_0_65048 0 core_ops_Shr_Output 0 2 [ref r_named_0_65048 [int 32]] [int 8] [abstract core_ops_Shr_Output 0 2 [int 32] [int 8]] 
associated_type 2 r_named_0_65089 r_named_0_65090 0 core_ops_Shr_Output 0 2 [ref r_named_0_65089 [int 32]] [ref r_named_0_65090 [int 8]] [abstract core_ops_Shr_Output 0 2 [int 32] [int 8]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 64] [int 8] [int 8] 
fn core_ops_i8__Shr_shr 0 0 args 2 self [int 8] other [int 64] return [int 8] 1 core_ops_Shr_shr 0 2 [int 64] [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] binop BiShr ([int 8] var self) ([int 64] var other)) ([int 8] var __result)) 
associated_type 1 r_named_0_65153 0 core_ops_Shr_Output 0 2 [int 64] [ref r_named_0_65153 [int 8]] [abstract core_ops_Shr_Output 0 2 [int 64] [int 8]] 
associated_type 1 r_named_0_65195 0 core_ops_Shr_Output 0 2 [ref r_named_0_65195 [int 64]] [int 8] [abstract core_ops_Shr_Output 0 2 [int 64] [int 8]] 
associated_type 2 r_named_0_65236 r_named_0_65237 0 core_ops_Shr_Output 0 2 [ref r_named_0_65236 [int 64]] [ref r_named_0_65237 [int 8]] [abstract core_ops_Shr_Output 0 2 [int 64] [int 8]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 32] [int 8] [int 8] 
fn core_ops_i8__Shr_shr 0 0 args 2 self [int 8] other [int 32] return [int 8] 1 core_ops_Shr_shr 0 2 [int 32] [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] binop BiShr ([int 8] var self) ([int 32] var other)) ([int 8] var __result)) 
associated_type 1 r_named_0_65300 0 core_ops_Shr_Output 0 2 [int 32] [ref r_named_0_65300 [int 8]] [abstract core_ops_Shr_Output 0 2 [int 32] [int 8]] 
associated_type 1 r_named_0_65342 0 core_ops_Shr_Output 0 2 [ref r_named_0_65342 [int 32]] [int 8] [abstract core_ops_Shr_Output 0 2 [int 32] [int 8]] 
associated_type 2 r_named_0_65383 r_named_0_65384 0 core_ops_Shr_Output 0 2 [ref r_named_0_65383 [int 32]] [ref r_named_0_65384 [int 8]] [abstract core_ops_Shr_Output 0 2 [int 32] [int 8]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 8] [int 16] [int 16] 
fn core_ops_i16__Shr_shr 0 0 args 2 self [int 16] other [uint 8] return [int 16] 1 core_ops_Shr_shr 0 2 [uint 8] [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] binop BiShr ([int 16] var self) ([uint 8] var other)) ([int 16] var __result)) 
associated_type 1 r_named_0_65447 0 core_ops_Shr_Output 0 2 [uint 8] [ref r_named_0_65447 [int 16]] [abstract core_ops_Shr_Output 0 2 [uint 8] [int 16]] 
associated_type 1 r_named_0_65489 0 core_ops_Shr_Output 0 2 [ref r_named_0_65489 [uint 8]] [int 16] [abstract core_ops_Shr_Output 0 2 [uint 8] [int 16]] 
associated_type 2 r_named_0_65530 r_named_0_65531 0 core_ops_Shr_Output 0 2 [ref r_named_0_65530 [uint 8]] [ref r_named_0_65531 [int 16]] [abstract core_ops_Shr_Output 0 2 [uint 8] [int 16]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 16] [int 16] [int 16] 
fn core_ops_i16__Shr_shr 0 0 args 2 self [int 16] other [uint 16] return [int 16] 1 core_ops_Shr_shr 0 2 [uint 16] [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] binop BiShr ([int 16] var self) ([uint 16] var other)) ([int 16] var __result)) 
associated_type 1 r_named_0_65594 0 core_ops_Shr_Output 0 2 [uint 16] [ref r_named_0_65594 [int 16]] [abstract core_ops_Shr_Output 0 2 [uint 16] [int 16]] 
associated_type 1 r_named_0_65636 0 core_ops_Shr_Output 0 2 [ref r_named_0_65636 [uint 16]] [int 16] [abstract core_ops_Shr_Output 0 2 [uint 16] [int 16]] 
associated_type 2 r_named_0_65677 r_named_0_65678 0 core_ops_Shr_Output 0 2 [ref r_named_0_65677 [uint 16]] [ref r_named_0_65678 [int 16]] [abstract core_ops_Shr_Output 0 2 [uint 16] [int 16]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 32] [int 16] [int 16] 
fn core_ops_i16__Shr_shr 0 0 args 2 self [int 16] other [uint 32] return [int 16] 1 core_ops_Shr_shr 0 2 [uint 32] [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] binop BiShr ([int 16] var self) ([uint 32] var other)) ([int 16] var __result)) 
associated_type 1 r_named_0_65741 0 core_ops_Shr_Output 0 2 [uint 32] [ref r_named_0_65741 [int 16]] [abstract core_ops_Shr_Output 0 2 [uint 32] [int 16]] 
associated_type 1 r_named_0_65783 0 core_ops_Shr_Output 0 2 [ref r_named_0_65783 [uint 32]] [int 16] [abstract core_ops_Shr_Output 0 2 [uint 32] [int 16]] 
associated_type 2 r_named_0_65824 r_named_0_65825 0 core_ops_Shr_Output 0 2 [ref r_named_0_65824 [uint 32]] [ref r_named_0_65825 [int 16]] [abstract core_ops_Shr_Output 0 2 [uint 32] [int 16]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 64] [int 16] [int 16] 
fn core_ops_i16__Shr_shr 0 0 args 2 self [int 16] other [uint 64] return [int 16] 1 core_ops_Shr_shr 0 2 [uint 64] [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] binop BiShr ([int 16] var self) ([uint 64] var other)) ([int 16] var __result)) 
associated_type 1 r_named_0_65888 0 core_ops_Shr_Output 0 2 [uint 64] [ref r_named_0_65888 [int 16]] [abstract core_ops_Shr_Output 0 2 [uint 64] [int 16]] 
associated_type 1 r_named_0_65930 0 core_ops_Shr_Output 0 2 [ref r_named_0_65930 [uint 64]] [int 16] [abstract core_ops_Shr_Output 0 2 [uint 64] [int 16]] 
associated_type 2 r_named_0_65971 r_named_0_65972 0 core_ops_Shr_Output 0 2 [ref r_named_0_65971 [uint 64]] [ref r_named_0_65972 [int 16]] [abstract core_ops_Shr_Output 0 2 [uint 64] [int 16]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 32] [int 16] [int 16] 
fn core_ops_i16__Shr_shr 0 0 args 2 self [int 16] other [uint 32] return [int 16] 1 core_ops_Shr_shr 0 2 [uint 32] [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] binop BiShr ([int 16] var self) ([uint 32] var other)) ([int 16] var __result)) 
associated_type 1 r_named_0_66035 0 core_ops_Shr_Output 0 2 [uint 32] [ref r_named_0_66035 [int 16]] [abstract core_ops_Shr_Output 0 2 [uint 32] [int 16]] 
associated_type 1 r_named_0_66077 0 core_ops_Shr_Output 0 2 [ref r_named_0_66077 [uint 32]] [int 16] [abstract core_ops_Shr_Output 0 2 [uint 32] [int 16]] 
associated_type 2 r_named_0_66118 r_named_0_66119 0 core_ops_Shr_Output 0 2 [ref r_named_0_66118 [uint 32]] [ref r_named_0_66119 [int 16]] [abstract core_ops_Shr_Output 0 2 [uint 32] [int 16]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 8] [int 16] [int 16] 
fn core_ops_i16__Shr_shr 0 0 args 2 self [int 16] other [int 8] return [int 16] 1 core_ops_Shr_shr 0 2 [int 8] [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] binop BiShr ([int 16] var self) ([int 8] var other)) ([int 16] var __result)) 
associated_type 1 r_named_0_66182 0 core_ops_Shr_Output 0 2 [int 8] [ref r_named_0_66182 [int 16]] [abstract core_ops_Shr_Output 0 2 [int 8] [int 16]] 
associated_type 1 r_named_0_66224 0 core_ops_Shr_Output 0 2 [ref r_named_0_66224 [int 8]] [int 16] [abstract core_ops_Shr_Output 0 2 [int 8] [int 16]] 
associated_type 2 r_named_0_66265 r_named_0_66266 0 core_ops_Shr_Output 0 2 [ref r_named_0_66265 [int 8]] [ref r_named_0_66266 [int 16]] [abstract core_ops_Shr_Output 0 2 [int 8] [int 16]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 16] [int 16] [int 16] 
fn core_ops_i16__Shr_shr 0 0 args 2 self [int 16] other [int 16] return [int 16] 1 core_ops_Shr_shr 0 2 [int 16] [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] binop BiShr ([int 16] var self) ([int 16] var other)) ([int 16] var __result)) 
associated_type 1 r_named_0_66329 0 core_ops_Shr_Output 0 2 [int 16] [ref r_named_0_66329 [int 16]] [abstract core_ops_Shr_Output 0 2 [int 16] [int 16]] 
associated_type 1 r_named_0_66371 0 core_ops_Shr_Output 0 2 [ref r_named_0_66371 [int 16]] [int 16] [abstract core_ops_Shr_Output 0 2 [int 16] [int 16]] 
associated_type 2 r_named_0_66412 r_named_0_66413 0 core_ops_Shr_Output 0 2 [ref r_named_0_66412 [int 16]] [ref r_named_0_66413 [int 16]] [abstract core_ops_Shr_Output 0 2 [int 16] [int 16]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 32] [int 16] [int 16] 
fn core_ops_i16__Shr_shr 0 0 args 2 self [int 16] other [int 32] return [int 16] 1 core_ops_Shr_shr 0 2 [int 32] [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] binop BiShr ([int 16] var self) ([int 32] var other)) ([int 16] var __result)) 
associated_type 1 r_named_0_66476 0 core_ops_Shr_Output 0 2 [int 32] [ref r_named_0_66476 [int 16]] [abstract core_ops_Shr_Output 0 2 [int 32] [int 16]] 
associated_type 1 r_named_0_66518 0 core_ops_Shr_Output 0 2 [ref r_named_0_66518 [int 32]] [int 16] [abstract core_ops_Shr_Output 0 2 [int 32] [int 16]] 
associated_type 2 r_named_0_66559 r_named_0_66560 0 core_ops_Shr_Output 0 2 [ref r_named_0_66559 [int 32]] [ref r_named_0_66560 [int 16]] [abstract core_ops_Shr_Output 0 2 [int 32] [int 16]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 64] [int 16] [int 16] 
fn core_ops_i16__Shr_shr 0 0 args 2 self [int 16] other [int 64] return [int 16] 1 core_ops_Shr_shr 0 2 [int 64] [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] binop BiShr ([int 16] var self) ([int 64] var other)) ([int 16] var __result)) 
associated_type 1 r_named_0_66623 0 core_ops_Shr_Output 0 2 [int 64] [ref r_named_0_66623 [int 16]] [abstract core_ops_Shr_Output 0 2 [int 64] [int 16]] 
associated_type 1 r_named_0_66665 0 core_ops_Shr_Output 0 2 [ref r_named_0_66665 [int 64]] [int 16] [abstract core_ops_Shr_Output 0 2 [int 64] [int 16]] 
associated_type 2 r_named_0_66706 r_named_0_66707 0 core_ops_Shr_Output 0 2 [ref r_named_0_66706 [int 64]] [ref r_named_0_66707 [int 16]] [abstract core_ops_Shr_Output 0 2 [int 64] [int 16]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 32] [int 16] [int 16] 
fn core_ops_i16__Shr_shr 0 0 args 2 self [int 16] other [int 32] return [int 16] 1 core_ops_Shr_shr 0 2 [int 32] [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] binop BiShr ([int 16] var self) ([int 32] var other)) ([int 16] var __result)) 
associated_type 1 r_named_0_66770 0 core_ops_Shr_Output 0 2 [int 32] [ref r_named_0_66770 [int 16]] [abstract core_ops_Shr_Output 0 2 [int 32] [int 16]] 
associated_type 1 r_named_0_66812 0 core_ops_Shr_Output 0 2 [ref r_named_0_66812 [int 32]] [int 16] [abstract core_ops_Shr_Output 0 2 [int 32] [int 16]] 
associated_type 2 r_named_0_66853 r_named_0_66854 0 core_ops_Shr_Output 0 2 [ref r_named_0_66853 [int 32]] [ref r_named_0_66854 [int 16]] [abstract core_ops_Shr_Output 0 2 [int 32] [int 16]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 8] [int 32] [int 32] 
fn core_ops_i32__Shr_shr 0 0 args 2 self [int 32] other [uint 8] return [int 32] 1 core_ops_Shr_shr 0 2 [uint 8] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShr ([int 32] var self) ([uint 8] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_66917 0 core_ops_Shr_Output 0 2 [uint 8] [ref r_named_0_66917 [int 32]] [abstract core_ops_Shr_Output 0 2 [uint 8] [int 32]] 
associated_type 1 r_named_0_66959 0 core_ops_Shr_Output 0 2 [ref r_named_0_66959 [uint 8]] [int 32] [abstract core_ops_Shr_Output 0 2 [uint 8] [int 32]] 
associated_type 2 r_named_0_67000 r_named_0_67001 0 core_ops_Shr_Output 0 2 [ref r_named_0_67000 [uint 8]] [ref r_named_0_67001 [int 32]] [abstract core_ops_Shr_Output 0 2 [uint 8] [int 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 16] [int 32] [int 32] 
fn core_ops_i32__Shr_shr 0 0 args 2 self [int 32] other [uint 16] return [int 32] 1 core_ops_Shr_shr 0 2 [uint 16] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShr ([int 32] var self) ([uint 16] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_67064 0 core_ops_Shr_Output 0 2 [uint 16] [ref r_named_0_67064 [int 32]] [abstract core_ops_Shr_Output 0 2 [uint 16] [int 32]] 
associated_type 1 r_named_0_67106 0 core_ops_Shr_Output 0 2 [ref r_named_0_67106 [uint 16]] [int 32] [abstract core_ops_Shr_Output 0 2 [uint 16] [int 32]] 
associated_type 2 r_named_0_67147 r_named_0_67148 0 core_ops_Shr_Output 0 2 [ref r_named_0_67147 [uint 16]] [ref r_named_0_67148 [int 32]] [abstract core_ops_Shr_Output 0 2 [uint 16] [int 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 32] [int 32] [int 32] 
fn core_ops_i32__Shr_shr 0 0 args 2 self [int 32] other [uint 32] return [int 32] 1 core_ops_Shr_shr 0 2 [uint 32] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShr ([int 32] var self) ([uint 32] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_67211 0 core_ops_Shr_Output 0 2 [uint 32] [ref r_named_0_67211 [int 32]] [abstract core_ops_Shr_Output 0 2 [uint 32] [int 32]] 
associated_type 1 r_named_0_67253 0 core_ops_Shr_Output 0 2 [ref r_named_0_67253 [uint 32]] [int 32] [abstract core_ops_Shr_Output 0 2 [uint 32] [int 32]] 
associated_type 2 r_named_0_67294 r_named_0_67295 0 core_ops_Shr_Output 0 2 [ref r_named_0_67294 [uint 32]] [ref r_named_0_67295 [int 32]] [abstract core_ops_Shr_Output 0 2 [uint 32] [int 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 64] [int 32] [int 32] 
fn core_ops_i32__Shr_shr 0 0 args 2 self [int 32] other [uint 64] return [int 32] 1 core_ops_Shr_shr 0 2 [uint 64] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShr ([int 32] var self) ([uint 64] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_67358 0 core_ops_Shr_Output 0 2 [uint 64] [ref r_named_0_67358 [int 32]] [abstract core_ops_Shr_Output 0 2 [uint 64] [int 32]] 
associated_type 1 r_named_0_67400 0 core_ops_Shr_Output 0 2 [ref r_named_0_67400 [uint 64]] [int 32] [abstract core_ops_Shr_Output 0 2 [uint 64] [int 32]] 
associated_type 2 r_named_0_67441 r_named_0_67442 0 core_ops_Shr_Output 0 2 [ref r_named_0_67441 [uint 64]] [ref r_named_0_67442 [int 32]] [abstract core_ops_Shr_Output 0 2 [uint 64] [int 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 32] [int 32] [int 32] 
fn core_ops_i32__Shr_shr 0 0 args 2 self [int 32] other [uint 32] return [int 32] 1 core_ops_Shr_shr 0 2 [uint 32] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShr ([int 32] var self) ([uint 32] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_67505 0 core_ops_Shr_Output 0 2 [uint 32] [ref r_named_0_67505 [int 32]] [abstract core_ops_Shr_Output 0 2 [uint 32] [int 32]] 
associated_type 1 r_named_0_67547 0 core_ops_Shr_Output 0 2 [ref r_named_0_67547 [uint 32]] [int 32] [abstract core_ops_Shr_Output 0 2 [uint 32] [int 32]] 
associated_type 2 r_named_0_67588 r_named_0_67589 0 core_ops_Shr_Output 0 2 [ref r_named_0_67588 [uint 32]] [ref r_named_0_67589 [int 32]] [abstract core_ops_Shr_Output 0 2 [uint 32] [int 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 8] [int 32] [int 32] 
fn core_ops_i32__Shr_shr 0 0 args 2 self [int 32] other [int 8] return [int 32] 1 core_ops_Shr_shr 0 2 [int 8] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShr ([int 32] var self) ([int 8] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_67652 0 core_ops_Shr_Output 0 2 [int 8] [ref r_named_0_67652 [int 32]] [abstract core_ops_Shr_Output 0 2 [int 8] [int 32]] 
associated_type 1 r_named_0_67694 0 core_ops_Shr_Output 0 2 [ref r_named_0_67694 [int 8]] [int 32] [abstract core_ops_Shr_Output 0 2 [int 8] [int 32]] 
associated_type 2 r_named_0_67735 r_named_0_67736 0 core_ops_Shr_Output 0 2 [ref r_named_0_67735 [int 8]] [ref r_named_0_67736 [int 32]] [abstract core_ops_Shr_Output 0 2 [int 8] [int 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 16] [int 32] [int 32] 
fn core_ops_i32__Shr_shr 0 0 args 2 self [int 32] other [int 16] return [int 32] 1 core_ops_Shr_shr 0 2 [int 16] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShr ([int 32] var self) ([int 16] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_67799 0 core_ops_Shr_Output 0 2 [int 16] [ref r_named_0_67799 [int 32]] [abstract core_ops_Shr_Output 0 2 [int 16] [int 32]] 
associated_type 1 r_named_0_67841 0 core_ops_Shr_Output 0 2 [ref r_named_0_67841 [int 16]] [int 32] [abstract core_ops_Shr_Output 0 2 [int 16] [int 32]] 
associated_type 2 r_named_0_67882 r_named_0_67883 0 core_ops_Shr_Output 0 2 [ref r_named_0_67882 [int 16]] [ref r_named_0_67883 [int 32]] [abstract core_ops_Shr_Output 0 2 [int 16] [int 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 32] [int 32] [int 32] 
fn core_ops_i32__Shr_shr 0 0 args 2 self [int 32] other [int 32] return [int 32] 1 core_ops_Shr_shr 0 2 [int 32] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShr ([int 32] var self) ([int 32] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_67946 0 core_ops_Shr_Output 0 2 [int 32] [ref r_named_0_67946 [int 32]] [abstract core_ops_Shr_Output 0 2 [int 32] [int 32]] 
associated_type 1 r_named_0_67988 0 core_ops_Shr_Output 0 2 [ref r_named_0_67988 [int 32]] [int 32] [abstract core_ops_Shr_Output 0 2 [int 32] [int 32]] 
associated_type 2 r_named_0_68029 r_named_0_68030 0 core_ops_Shr_Output 0 2 [ref r_named_0_68029 [int 32]] [ref r_named_0_68030 [int 32]] [abstract core_ops_Shr_Output 0 2 [int 32] [int 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 64] [int 32] [int 32] 
fn core_ops_i32__Shr_shr 0 0 args 2 self [int 32] other [int 64] return [int 32] 1 core_ops_Shr_shr 0 2 [int 64] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShr ([int 32] var self) ([int 64] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_68093 0 core_ops_Shr_Output 0 2 [int 64] [ref r_named_0_68093 [int 32]] [abstract core_ops_Shr_Output 0 2 [int 64] [int 32]] 
associated_type 1 r_named_0_68135 0 core_ops_Shr_Output 0 2 [ref r_named_0_68135 [int 64]] [int 32] [abstract core_ops_Shr_Output 0 2 [int 64] [int 32]] 
associated_type 2 r_named_0_68176 r_named_0_68177 0 core_ops_Shr_Output 0 2 [ref r_named_0_68176 [int 64]] [ref r_named_0_68177 [int 32]] [abstract core_ops_Shr_Output 0 2 [int 64] [int 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 32] [int 32] [int 32] 
fn core_ops_i32__Shr_shr 0 0 args 2 self [int 32] other [int 32] return [int 32] 1 core_ops_Shr_shr 0 2 [int 32] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShr ([int 32] var self) ([int 32] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_68240 0 core_ops_Shr_Output 0 2 [int 32] [ref r_named_0_68240 [int 32]] [abstract core_ops_Shr_Output 0 2 [int 32] [int 32]] 
associated_type 1 r_named_0_68282 0 core_ops_Shr_Output 0 2 [ref r_named_0_68282 [int 32]] [int 32] [abstract core_ops_Shr_Output 0 2 [int 32] [int 32]] 
associated_type 2 r_named_0_68323 r_named_0_68324 0 core_ops_Shr_Output 0 2 [ref r_named_0_68323 [int 32]] [ref r_named_0_68324 [int 32]] [abstract core_ops_Shr_Output 0 2 [int 32] [int 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 8] [int 64] [int 64] 
fn core_ops_i64__Shr_shr 0 0 args 2 self [int 64] other [uint 8] return [int 64] 1 core_ops_Shr_shr 0 2 [uint 8] [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] binop BiShr ([int 64] var self) ([uint 8] var other)) ([int 64] var __result)) 
associated_type 1 r_named_0_68387 0 core_ops_Shr_Output 0 2 [uint 8] [ref r_named_0_68387 [int 64]] [abstract core_ops_Shr_Output 0 2 [uint 8] [int 64]] 
associated_type 1 r_named_0_68429 0 core_ops_Shr_Output 0 2 [ref r_named_0_68429 [uint 8]] [int 64] [abstract core_ops_Shr_Output 0 2 [uint 8] [int 64]] 
associated_type 2 r_named_0_68470 r_named_0_68471 0 core_ops_Shr_Output 0 2 [ref r_named_0_68470 [uint 8]] [ref r_named_0_68471 [int 64]] [abstract core_ops_Shr_Output 0 2 [uint 8] [int 64]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 16] [int 64] [int 64] 
fn core_ops_i64__Shr_shr 0 0 args 2 self [int 64] other [uint 16] return [int 64] 1 core_ops_Shr_shr 0 2 [uint 16] [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] binop BiShr ([int 64] var self) ([uint 16] var other)) ([int 64] var __result)) 
associated_type 1 r_named_0_68534 0 core_ops_Shr_Output 0 2 [uint 16] [ref r_named_0_68534 [int 64]] [abstract core_ops_Shr_Output 0 2 [uint 16] [int 64]] 
associated_type 1 r_named_0_68576 0 core_ops_Shr_Output 0 2 [ref r_named_0_68576 [uint 16]] [int 64] [abstract core_ops_Shr_Output 0 2 [uint 16] [int 64]] 
associated_type 2 r_named_0_68617 r_named_0_68618 0 core_ops_Shr_Output 0 2 [ref r_named_0_68617 [uint 16]] [ref r_named_0_68618 [int 64]] [abstract core_ops_Shr_Output 0 2 [uint 16] [int 64]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 32] [int 64] [int 64] 
fn core_ops_i64__Shr_shr 0 0 args 2 self [int 64] other [uint 32] return [int 64] 1 core_ops_Shr_shr 0 2 [uint 32] [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] binop BiShr ([int 64] var self) ([uint 32] var other)) ([int 64] var __result)) 
associated_type 1 r_named_0_68681 0 core_ops_Shr_Output 0 2 [uint 32] [ref r_named_0_68681 [int 64]] [abstract core_ops_Shr_Output 0 2 [uint 32] [int 64]] 
associated_type 1 r_named_0_68723 0 core_ops_Shr_Output 0 2 [ref r_named_0_68723 [uint 32]] [int 64] [abstract core_ops_Shr_Output 0 2 [uint 32] [int 64]] 
associated_type 2 r_named_0_68764 r_named_0_68765 0 core_ops_Shr_Output 0 2 [ref r_named_0_68764 [uint 32]] [ref r_named_0_68765 [int 64]] [abstract core_ops_Shr_Output 0 2 [uint 32] [int 64]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 64] [int 64] [int 64] 
fn core_ops_i64__Shr_shr 0 0 args 2 self [int 64] other [uint 64] return [int 64] 1 core_ops_Shr_shr 0 2 [uint 64] [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] binop BiShr ([int 64] var self) ([uint 64] var other)) ([int 64] var __result)) 
associated_type 1 r_named_0_68828 0 core_ops_Shr_Output 0 2 [uint 64] [ref r_named_0_68828 [int 64]] [abstract core_ops_Shr_Output 0 2 [uint 64] [int 64]] 
associated_type 1 r_named_0_68870 0 core_ops_Shr_Output 0 2 [ref r_named_0_68870 [uint 64]] [int 64] [abstract core_ops_Shr_Output 0 2 [uint 64] [int 64]] 
associated_type 2 r_named_0_68911 r_named_0_68912 0 core_ops_Shr_Output 0 2 [ref r_named_0_68911 [uint 64]] [ref r_named_0_68912 [int 64]] [abstract core_ops_Shr_Output 0 2 [uint 64] [int 64]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 32] [int 64] [int 64] 
fn core_ops_i64__Shr_shr 0 0 args 2 self [int 64] other [uint 32] return [int 64] 1 core_ops_Shr_shr 0 2 [uint 32] [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] binop BiShr ([int 64] var self) ([uint 32] var other)) ([int 64] var __result)) 
associated_type 1 r_named_0_68975 0 core_ops_Shr_Output 0 2 [uint 32] [ref r_named_0_68975 [int 64]] [abstract core_ops_Shr_Output 0 2 [uint 32] [int 64]] 
associated_type 1 r_named_0_69017 0 core_ops_Shr_Output 0 2 [ref r_named_0_69017 [uint 32]] [int 64] [abstract core_ops_Shr_Output 0 2 [uint 32] [int 64]] 
associated_type 2 r_named_0_69058 r_named_0_69059 0 core_ops_Shr_Output 0 2 [ref r_named_0_69058 [uint 32]] [ref r_named_0_69059 [int 64]] [abstract core_ops_Shr_Output 0 2 [uint 32] [int 64]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 8] [int 64] [int 64] 
fn core_ops_i64__Shr_shr 0 0 args 2 self [int 64] other [int 8] return [int 64] 1 core_ops_Shr_shr 0 2 [int 8] [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] binop BiShr ([int 64] var self) ([int 8] var other)) ([int 64] var __result)) 
associated_type 1 r_named_0_69122 0 core_ops_Shr_Output 0 2 [int 8] [ref r_named_0_69122 [int 64]] [abstract core_ops_Shr_Output 0 2 [int 8] [int 64]] 
associated_type 1 r_named_0_69164 0 core_ops_Shr_Output 0 2 [ref r_named_0_69164 [int 8]] [int 64] [abstract core_ops_Shr_Output 0 2 [int 8] [int 64]] 
associated_type 2 r_named_0_69205 r_named_0_69206 0 core_ops_Shr_Output 0 2 [ref r_named_0_69205 [int 8]] [ref r_named_0_69206 [int 64]] [abstract core_ops_Shr_Output 0 2 [int 8] [int 64]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 16] [int 64] [int 64] 
fn core_ops_i64__Shr_shr 0 0 args 2 self [int 64] other [int 16] return [int 64] 1 core_ops_Shr_shr 0 2 [int 16] [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] binop BiShr ([int 64] var self) ([int 16] var other)) ([int 64] var __result)) 
associated_type 1 r_named_0_69269 0 core_ops_Shr_Output 0 2 [int 16] [ref r_named_0_69269 [int 64]] [abstract core_ops_Shr_Output 0 2 [int 16] [int 64]] 
associated_type 1 r_named_0_69311 0 core_ops_Shr_Output 0 2 [ref r_named_0_69311 [int 16]] [int 64] [abstract core_ops_Shr_Output 0 2 [int 16] [int 64]] 
associated_type 2 r_named_0_69352 r_named_0_69353 0 core_ops_Shr_Output 0 2 [ref r_named_0_69352 [int 16]] [ref r_named_0_69353 [int 64]] [abstract core_ops_Shr_Output 0 2 [int 16] [int 64]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 32] [int 64] [int 64] 
fn core_ops_i64__Shr_shr 0 0 args 2 self [int 64] other [int 32] return [int 64] 1 core_ops_Shr_shr 0 2 [int 32] [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] binop BiShr ([int 64] var self) ([int 32] var other)) ([int 64] var __result)) 
associated_type 1 r_named_0_69416 0 core_ops_Shr_Output 0 2 [int 32] [ref r_named_0_69416 [int 64]] [abstract core_ops_Shr_Output 0 2 [int 32] [int 64]] 
associated_type 1 r_named_0_69458 0 core_ops_Shr_Output 0 2 [ref r_named_0_69458 [int 32]] [int 64] [abstract core_ops_Shr_Output 0 2 [int 32] [int 64]] 
associated_type 2 r_named_0_69499 r_named_0_69500 0 core_ops_Shr_Output 0 2 [ref r_named_0_69499 [int 32]] [ref r_named_0_69500 [int 64]] [abstract core_ops_Shr_Output 0 2 [int 32] [int 64]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 64] [int 64] [int 64] 
fn core_ops_i64__Shr_shr 0 0 args 2 self [int 64] other [int 64] return [int 64] 1 core_ops_Shr_shr 0 2 [int 64] [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] binop BiShr ([int 64] var self) ([int 64] var other)) ([int 64] var __result)) 
associated_type 1 r_named_0_69563 0 core_ops_Shr_Output 0 2 [int 64] [ref r_named_0_69563 [int 64]] [abstract core_ops_Shr_Output 0 2 [int 64] [int 64]] 
associated_type 1 r_named_0_69605 0 core_ops_Shr_Output 0 2 [ref r_named_0_69605 [int 64]] [int 64] [abstract core_ops_Shr_Output 0 2 [int 64] [int 64]] 
associated_type 2 r_named_0_69646 r_named_0_69647 0 core_ops_Shr_Output 0 2 [ref r_named_0_69646 [int 64]] [ref r_named_0_69647 [int 64]] [abstract core_ops_Shr_Output 0 2 [int 64] [int 64]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 32] [int 64] [int 64] 
fn core_ops_i64__Shr_shr 0 0 args 2 self [int 64] other [int 32] return [int 64] 1 core_ops_Shr_shr 0 2 [int 32] [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] binop BiShr ([int 64] var self) ([int 32] var other)) ([int 64] var __result)) 
associated_type 1 r_named_0_69710 0 core_ops_Shr_Output 0 2 [int 32] [ref r_named_0_69710 [int 64]] [abstract core_ops_Shr_Output 0 2 [int 32] [int 64]] 
associated_type 1 r_named_0_69752 0 core_ops_Shr_Output 0 2 [ref r_named_0_69752 [int 32]] [int 64] [abstract core_ops_Shr_Output 0 2 [int 32] [int 64]] 
associated_type 2 r_named_0_69793 r_named_0_69794 0 core_ops_Shr_Output 0 2 [ref r_named_0_69793 [int 32]] [ref r_named_0_69794 [int 64]] [abstract core_ops_Shr_Output 0 2 [int 32] [int 64]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 8] [int 32] [int 32] 
fn core_ops_isize__Shr_shr 0 0 args 2 self [int 32] other [uint 8] return [int 32] 1 core_ops_Shr_shr 0 2 [uint 8] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShr ([int 32] var self) ([uint 8] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_69857 0 core_ops_Shr_Output 0 2 [uint 8] [ref r_named_0_69857 [int 32]] [abstract core_ops_Shr_Output 0 2 [uint 8] [int 32]] 
associated_type 1 r_named_0_69899 0 core_ops_Shr_Output 0 2 [ref r_named_0_69899 [uint 8]] [int 32] [abstract core_ops_Shr_Output 0 2 [uint 8] [int 32]] 
associated_type 2 r_named_0_69940 r_named_0_69941 0 core_ops_Shr_Output 0 2 [ref r_named_0_69940 [uint 8]] [ref r_named_0_69941 [int 32]] [abstract core_ops_Shr_Output 0 2 [uint 8] [int 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 16] [int 32] [int 32] 
fn core_ops_isize__Shr_shr 0 0 args 2 self [int 32] other [uint 16] return [int 32] 1 core_ops_Shr_shr 0 2 [uint 16] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShr ([int 32] var self) ([uint 16] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_70004 0 core_ops_Shr_Output 0 2 [uint 16] [ref r_named_0_70004 [int 32]] [abstract core_ops_Shr_Output 0 2 [uint 16] [int 32]] 
associated_type 1 r_named_0_70046 0 core_ops_Shr_Output 0 2 [ref r_named_0_70046 [uint 16]] [int 32] [abstract core_ops_Shr_Output 0 2 [uint 16] [int 32]] 
associated_type 2 r_named_0_70087 r_named_0_70088 0 core_ops_Shr_Output 0 2 [ref r_named_0_70087 [uint 16]] [ref r_named_0_70088 [int 32]] [abstract core_ops_Shr_Output 0 2 [uint 16] [int 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 32] [int 32] [int 32] 
fn core_ops_isize__Shr_shr 0 0 args 2 self [int 32] other [uint 32] return [int 32] 1 core_ops_Shr_shr 0 2 [uint 32] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShr ([int 32] var self) ([uint 32] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_70151 0 core_ops_Shr_Output 0 2 [uint 32] [ref r_named_0_70151 [int 32]] [abstract core_ops_Shr_Output 0 2 [uint 32] [int 32]] 
associated_type 1 r_named_0_70193 0 core_ops_Shr_Output 0 2 [ref r_named_0_70193 [uint 32]] [int 32] [abstract core_ops_Shr_Output 0 2 [uint 32] [int 32]] 
associated_type 2 r_named_0_70234 r_named_0_70235 0 core_ops_Shr_Output 0 2 [ref r_named_0_70234 [uint 32]] [ref r_named_0_70235 [int 32]] [abstract core_ops_Shr_Output 0 2 [uint 32] [int 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 64] [int 32] [int 32] 
fn core_ops_isize__Shr_shr 0 0 args 2 self [int 32] other [uint 64] return [int 32] 1 core_ops_Shr_shr 0 2 [uint 64] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShr ([int 32] var self) ([uint 64] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_70298 0 core_ops_Shr_Output 0 2 [uint 64] [ref r_named_0_70298 [int 32]] [abstract core_ops_Shr_Output 0 2 [uint 64] [int 32]] 
associated_type 1 r_named_0_70340 0 core_ops_Shr_Output 0 2 [ref r_named_0_70340 [uint 64]] [int 32] [abstract core_ops_Shr_Output 0 2 [uint 64] [int 32]] 
associated_type 2 r_named_0_70381 r_named_0_70382 0 core_ops_Shr_Output 0 2 [ref r_named_0_70381 [uint 64]] [ref r_named_0_70382 [int 32]] [abstract core_ops_Shr_Output 0 2 [uint 64] [int 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [uint 32] [int 32] [int 32] 
fn core_ops_isize__Shr_shr 0 0 args 2 self [int 32] other [uint 32] return [int 32] 1 core_ops_Shr_shr 0 2 [uint 32] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShr ([int 32] var self) ([uint 32] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_70445 0 core_ops_Shr_Output 0 2 [uint 32] [ref r_named_0_70445 [int 32]] [abstract core_ops_Shr_Output 0 2 [uint 32] [int 32]] 
associated_type 1 r_named_0_70487 0 core_ops_Shr_Output 0 2 [ref r_named_0_70487 [uint 32]] [int 32] [abstract core_ops_Shr_Output 0 2 [uint 32] [int 32]] 
associated_type 2 r_named_0_70528 r_named_0_70529 0 core_ops_Shr_Output 0 2 [ref r_named_0_70528 [uint 32]] [ref r_named_0_70529 [int 32]] [abstract core_ops_Shr_Output 0 2 [uint 32] [int 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 8] [int 32] [int 32] 
fn core_ops_isize__Shr_shr 0 0 args 2 self [int 32] other [int 8] return [int 32] 1 core_ops_Shr_shr 0 2 [int 8] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShr ([int 32] var self) ([int 8] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_70592 0 core_ops_Shr_Output 0 2 [int 8] [ref r_named_0_70592 [int 32]] [abstract core_ops_Shr_Output 0 2 [int 8] [int 32]] 
associated_type 1 r_named_0_70634 0 core_ops_Shr_Output 0 2 [ref r_named_0_70634 [int 8]] [int 32] [abstract core_ops_Shr_Output 0 2 [int 8] [int 32]] 
associated_type 2 r_named_0_70675 r_named_0_70676 0 core_ops_Shr_Output 0 2 [ref r_named_0_70675 [int 8]] [ref r_named_0_70676 [int 32]] [abstract core_ops_Shr_Output 0 2 [int 8] [int 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 16] [int 32] [int 32] 
fn core_ops_isize__Shr_shr 0 0 args 2 self [int 32] other [int 16] return [int 32] 1 core_ops_Shr_shr 0 2 [int 16] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShr ([int 32] var self) ([int 16] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_70739 0 core_ops_Shr_Output 0 2 [int 16] [ref r_named_0_70739 [int 32]] [abstract core_ops_Shr_Output 0 2 [int 16] [int 32]] 
associated_type 1 r_named_0_70781 0 core_ops_Shr_Output 0 2 [ref r_named_0_70781 [int 16]] [int 32] [abstract core_ops_Shr_Output 0 2 [int 16] [int 32]] 
associated_type 2 r_named_0_70822 r_named_0_70823 0 core_ops_Shr_Output 0 2 [ref r_named_0_70822 [int 16]] [ref r_named_0_70823 [int 32]] [abstract core_ops_Shr_Output 0 2 [int 16] [int 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 32] [int 32] [int 32] 
fn core_ops_isize__Shr_shr 0 0 args 2 self [int 32] other [int 32] return [int 32] 1 core_ops_Shr_shr 0 2 [int 32] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShr ([int 32] var self) ([int 32] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_70886 0 core_ops_Shr_Output 0 2 [int 32] [ref r_named_0_70886 [int 32]] [abstract core_ops_Shr_Output 0 2 [int 32] [int 32]] 
associated_type 1 r_named_0_70928 0 core_ops_Shr_Output 0 2 [ref r_named_0_70928 [int 32]] [int 32] [abstract core_ops_Shr_Output 0 2 [int 32] [int 32]] 
associated_type 2 r_named_0_70969 r_named_0_70970 0 core_ops_Shr_Output 0 2 [ref r_named_0_70969 [int 32]] [ref r_named_0_70970 [int 32]] [abstract core_ops_Shr_Output 0 2 [int 32] [int 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 64] [int 32] [int 32] 
fn core_ops_isize__Shr_shr 0 0 args 2 self [int 32] other [int 64] return [int 32] 1 core_ops_Shr_shr 0 2 [int 64] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShr ([int 32] var self) ([int 64] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_71033 0 core_ops_Shr_Output 0 2 [int 64] [ref r_named_0_71033 [int 32]] [abstract core_ops_Shr_Output 0 2 [int 64] [int 32]] 
associated_type 1 r_named_0_71075 0 core_ops_Shr_Output 0 2 [ref r_named_0_71075 [int 64]] [int 32] [abstract core_ops_Shr_Output 0 2 [int 64] [int 32]] 
associated_type 2 r_named_0_71116 r_named_0_71117 0 core_ops_Shr_Output 0 2 [ref r_named_0_71116 [int 64]] [ref r_named_0_71117 [int 32]] [abstract core_ops_Shr_Output 0 2 [int 64] [int 32]] 
associated_type 0 0 core_ops_Shr_Output 0 2 [int 32] [int 32] [int 32] 
fn core_ops_isize__Shr_shr 0 0 args 2 self [int 32] other [int 32] return [int 32] 1 core_ops_Shr_shr 0 2 [int 32] [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] binop BiShr ([int 32] var self) ([int 32] var other)) ([int 32] var __result)) 
associated_type 1 r_named_0_71180 0 core_ops_Shr_Output 0 2 [int 32] [ref r_named_0_71180 [int 32]] [abstract core_ops_Shr_Output 0 2 [int 32] [int 32]] 
associated_type 1 r_named_0_71222 0 core_ops_Shr_Output 0 2 [ref r_named_0_71222 [int 32]] [int 32] [abstract core_ops_Shr_Output 0 2 [int 32] [int 32]] 
associated_type 2 r_named_0_71263 r_named_0_71264 0 core_ops_Shr_Output 0 2 [ref r_named_0_71263 [int 32]] [ref r_named_0_71264 [int 32]] [abstract core_ops_Shr_Output 0 2 [int 32] [int 32]] 
struct core_ops_FullRange 0 0 0 0 
struct core_ops_Range 0 1 t_0 2 start [var t_0] end [var t_0] 0 
struct core_ops_RangeFrom 0 1 t_0 1 start [var t_0] 0 
struct core_ops_RangeTo 0 1 t_0 1 end [var t_0] 0 
associated_type 1 r_named_0_72132 1 t_0 core_ops_Deref_Target 0 1 [ref r_named_0_72132 [var t_0]] [var t_0] 
fn core_ops__x26_x27a_x20T__Deref_deref 1 r_named_0_72132 1 t_0 args 1 self [ref r_anon_0 [ref r_named_0_72132 [var t_0]]] return [ref r_anon_0 [var t_0]] 1 core_ops_Deref_deref 0 1 [ref r_named_0_72132 [var t_0]] body ([ref r_named_0_72132 [var t_0]] block 1 let __result [ref r_named_0_72132 [var t_0]] ([ref r_named_0_72132 [var t_0]] deref ([ref r_anon_0 [ref r_named_0_72132 [var t_0]]] var self)) ([ref r_named_0_72132 [var t_0]] var __result)) 
associated_type 1 r_named_0_72156 1 t_0 core_ops_Deref_Target 0 1 [ref_mut r_named_0_72156 [var t_0]] [var t_0] 
fn core_ops__x26_x27a_x20mut_x20T__Deref_deref 1 r_named_0_72156 1 t_0 args 1 self [ref r_anon_0 [ref_mut r_named_0_72156 [var t_0]]] return [ref r_anon_0 [var t_0]] 1 core_ops_Deref_deref 0 1 [ref_mut r_named_0_72156 [var t_0]] body ([ref_mut r_named_0_72156 [var t_0]] block 1 let __result [ref_mut r_named_0_72156 [var t_0]] ([ref_mut r_named_0_72156 [var t_0]] deref ([ref r_anon_0 [ref_mut r_named_0_72156 [var t_0]]] var self)) ([ref_mut r_named_0_72156 [var t_0]] var __result)) 
fn core_ops__x26_x27a_x20mut_x20T__DerefMut_deref_mut 1 r_named_0_72191 1 t_0 args 1 self [ref_mut r_anon_0 [ref_mut r_named_0_72191 [var t_0]]] return [ref_mut r_anon_0 [var t_0]] 1 core_ops_DerefMut_deref_mut 0 1 [ref_mut r_named_0_72191 [var t_0]] body ([ref_mut r_named_0_72191 [var t_0]] block 1 let __result [ref_mut r_named_0_72191 [var t_0]] ([ref_mut r_named_0_72191 [var t_0]] deref ([ref_mut r_anon_0 [ref_mut r_named_0_72191 [var t_0]]] var self)) ([ref_mut r_named_0_72191 [var t_0]] var __result)) 
fn core_ops_F__FnMut_call_mut 0 3 t_0 t_1 t_2 args 2 self [ref_mut r_anon_0 [var t_0]] args [var t_1] return [var t_2] 1 core_ops_FnMut_call_mut 0 3 [var t_1] [var t_2] [var t_0] body ([var t_2] block 1 let __result [var t_2] ([var t_2] call core_ops_Fn_call 0 3 [var t_1] [var t_2] [var t_0] 2 ([ref_mut r_anon_0 [var t_0]] var self) ([var t_1] var args)) ([var t_2] var __result)) 
fn core_ops_F__FnOnce_call_once 0 3 t_0 t_1 t_2 args 2 self [var t_0] args [var t_1] return [var t_2] 1 core_ops_FnOnce_call_once 0 3 [var t_1] [var t_2] [var t_0] body ([var t_2] block 1 let __result [var t_2] ([var t_2] call core_ops_FnMut_call_mut 0 3 [var t_1] [var t_2] [var t_0] 2 ([ref_mut r_scope_72290 [var t_0]] addr_of ([var t_0] var self)) ([var t_1] var args)) ([var t_2] var __result)) 
enum core_cmp_Ordering 0 0 3 core_cmp_Less 0 core_cmp_Equal 0 core_cmp_Greater 0 0 
fn core_cmp_Ordering_reverse 0 0 args 1 self [adt core_cmp_Ordering 0 0] return [adt core_cmp_Ordering 0 0] 0 body ([adt core_cmp_Ordering 0 0] block 1 let __result_0 [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] unsafe 1 let __result [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] call core_intrinsics_transmute 0 2 [int 8] [adt core_cmp_Ordering 0 0] 1 ([int 8] unop UnNeg ([int 8] cast ([adt core_cmp_Ordering 0 0] var self) [int 8]))) ([adt core_cmp_Ordering 0 0] var __result)) ([adt core_cmp_Ordering 0 0] var __result_0)) 
fn core_cmp_Ordering__Ord_cmp 0 0 args 2 self [ref r_anon_0 [adt core_cmp_Ordering 0 0]] other [ref r_anon_1 [adt core_cmp_Ordering 0 0]] return [adt core_cmp_Ordering 0 0] 1 core_cmp_Ord_cmp 0 1 [adt core_cmp_Ordering 0 0] body ([adt core_cmp_Ordering 0 0] block 1 let __result [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] call core_cmp_Ord_cmp 0 1 [int 32] 2 ([int 32] cast ([adt core_cmp_Ordering 0 0] deref ([ref r_anon_0 [adt core_cmp_Ordering 0 0]] var self)) [int 32]) ([int 32] cast ([adt core_cmp_Ordering 0 0] deref ([ref r_anon_1 [adt core_cmp_Ordering 0 0]] var other)) [int 32])) ([adt core_cmp_Ordering 0 0] var __result)) 
fn core_cmp_Ordering__PartialOrd_partial_cmp 0 0 args 2 self [ref r_anon_0 [adt core_cmp_Ordering 0 0]] other [ref r_anon_1 [adt core_cmp_Ordering 0 0]] return [adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] 1 core_cmp_PartialOrd_partial_cmp 0 1 [adt core_cmp_Ordering 0 0] body ([adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] block 1 let __result [adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] ([adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] call core_cmp_PartialOrd_partial_cmp 0 2 [int 32] [int 32] 2 ([int 32] cast ([adt core_cmp_Ordering 0 0] deref ([ref r_anon_0 [adt core_cmp_Ordering 0 0]] var self)) [int 32]) ([int 32] cast ([adt core_cmp_Ordering 0 0] deref ([ref r_anon_1 [adt core_cmp_Ordering 0 0]] var other)) [int 32])) ([adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] var __result)) 
fn core_cmp_min 0 1 f_0 args 2 v1 [var f_0] v2 [var f_0] return [var f_0] 0 body ([var f_0] block 1 let __result_1 [var f_0] ([var f_0] match ([int 32] cast ([bool] call core_cmp_PartialOrd_lt 0 2 [var f_0] [var f_0] 2 ([ref r_scope_72896 [var f_0]] addr_of ([var f_0] var v1)) ([var f_0] var v2)) [int 32]) 2 ([int 32] simple_literal 0) ([var f_0] block 1 let __result [var f_0] ([var f_0] var v2) ([var f_0] var __result)) ([int 32] wild) ([var f_0] block 1 let __result_0 [var f_0] ([var f_0] var v1) ([var f_0] var __result_0))) ([var f_0] var __result_1)) 
fn core_cmp_max 0 1 f_0 args 2 v1 [var f_0] v2 [var f_0] return [var f_0] 0 body ([var f_0] block 1 let __result_1 [var f_0] ([var f_0] match ([int 32] cast ([bool] call core_cmp_PartialOrd_gt 0 2 [var f_0] [var f_0] 2 ([ref r_scope_72920 [var f_0]] addr_of ([var f_0] var v1)) ([var f_0] var v2)) [int 32]) 2 ([int 32] simple_literal 0) ([var f_0] block 1 let __result [var f_0] ([var f_0] var v2) ([var f_0] var __result)) ([int 32] wild) ([var f_0] block 1 let __result_0 [var f_0] ([var f_0] var v1) ([var f_0] var __result_0))) ([var f_0] var __result_1)) 
fn core_cmp_impls__x28_x29__PartialEq_eq 0 0 args 2 self [ref r_anon_0 [unit]] _other [ref r_anon_1 [unit]] return [bool] 1 core_cmp_PartialEq_eq 0 1 [unit] body ([bool] block 1 let __result [bool] ([bool] simple_literal true) ([bool] var __result)) 
fn core_cmp_impls__x28_x29__PartialEq_ne 0 0 args 2 self [ref r_anon_0 [unit]] _other [ref r_anon_1 [unit]] return [bool] 1 core_cmp_PartialEq_ne 0 1 [unit] body ([bool] block 1 let __result [bool] ([bool] simple_literal false) ([bool] var __result)) 
fn core_cmp_impls_bool__PartialEq_eq 0 0 args 2 self [ref r_anon_0 [bool]] other [ref r_anon_1 [bool]] return [bool] 1 core_cmp_PartialEq_eq 0 1 [bool] body ([bool] block 1 let __result [bool] ([bool] binop BiEq ([bool] deref ([ref r_anon_0 [bool]] var self)) ([bool] deref ([ref r_anon_1 [bool]] var other))) ([bool] var __result)) 
fn core_cmp_impls_bool__PartialEq_ne 0 0 args 2 self [ref r_anon_0 [bool]] other [ref r_anon_1 [bool]] return [bool] 1 core_cmp_PartialEq_ne 0 1 [bool] body ([bool] block 1 let __result [bool] ([bool] binop BiNe ([bool] deref ([ref r_anon_0 [bool]] var self)) ([bool] deref ([ref r_anon_1 [bool]] var other))) ([bool] var __result)) 
fn core_cmp_impls_uint__PartialEq_eq 0 0 args 2 self [ref r_anon_0 [uint 32]] other [ref r_anon_1 [uint 32]] return [bool] 1 core_cmp_PartialEq_eq 0 1 [uint 32] body ([bool] block 1 let __result [bool] ([bool] binop BiEq ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) ([uint 32] deref ([ref r_anon_1 [uint 32]] var other))) ([bool] var __result)) 
fn core_cmp_impls_uint__PartialEq_ne 0 0 args 2 self [ref r_anon_0 [uint 32]] other [ref r_anon_1 [uint 32]] return [bool] 1 core_cmp_PartialEq_ne 0 1 [uint 32] body ([bool] block 1 let __result [bool] ([bool] binop BiNe ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) ([uint 32] deref ([ref r_anon_1 [uint 32]] var other))) ([bool] var __result)) 
fn core_cmp_impls_u8__PartialEq_eq 0 0 args 2 self [ref r_anon_0 [uint 8]] other [ref r_anon_1 [uint 8]] return [bool] 1 core_cmp_PartialEq_eq 0 1 [uint 8] body ([bool] block 1 let __result [bool] ([bool] binop BiEq ([uint 8] deref ([ref r_anon_0 [uint 8]] var self)) ([uint 8] deref ([ref r_anon_1 [uint 8]] var other))) ([bool] var __result)) 
fn core_cmp_impls_u8__PartialEq_ne 0 0 args 2 self [ref r_anon_0 [uint 8]] other [ref r_anon_1 [uint 8]] return [bool] 1 core_cmp_PartialEq_ne 0 1 [uint 8] body ([bool] block 1 let __result [bool] ([bool] binop BiNe ([uint 8] deref ([ref r_anon_0 [uint 8]] var self)) ([uint 8] deref ([ref r_anon_1 [uint 8]] var other))) ([bool] var __result)) 
fn core_cmp_impls_u16__PartialEq_eq 0 0 args 2 self [ref r_anon_0 [uint 16]] other [ref r_anon_1 [uint 16]] return [bool] 1 core_cmp_PartialEq_eq 0 1 [uint 16] body ([bool] block 1 let __result [bool] ([bool] binop BiEq ([uint 16] deref ([ref r_anon_0 [uint 16]] var self)) ([uint 16] deref ([ref r_anon_1 [uint 16]] var other))) ([bool] var __result)) 
fn core_cmp_impls_u16__PartialEq_ne 0 0 args 2 self [ref r_anon_0 [uint 16]] other [ref r_anon_1 [uint 16]] return [bool] 1 core_cmp_PartialEq_ne 0 1 [uint 16] body ([bool] block 1 let __result [bool] ([bool] binop BiNe ([uint 16] deref ([ref r_anon_0 [uint 16]] var self)) ([uint 16] deref ([ref r_anon_1 [uint 16]] var other))) ([bool] var __result)) 
fn core_cmp_impls_u32__PartialEq_eq 0 0 args 2 self [ref r_anon_0 [uint 32]] other [ref r_anon_1 [uint 32]] return [bool] 1 core_cmp_PartialEq_eq 0 1 [uint 32] body ([bool] block 1 let __result [bool] ([bool] binop BiEq ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) ([uint 32] deref ([ref r_anon_1 [uint 32]] var other))) ([bool] var __result)) 
fn core_cmp_impls_u32__PartialEq_ne 0 0 args 2 self [ref r_anon_0 [uint 32]] other [ref r_anon_1 [uint 32]] return [bool] 1 core_cmp_PartialEq_ne 0 1 [uint 32] body ([bool] block 1 let __result [bool] ([bool] binop BiNe ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) ([uint 32] deref ([ref r_anon_1 [uint 32]] var other))) ([bool] var __result)) 
fn core_cmp_impls_u64__PartialEq_eq 0 0 args 2 self [ref r_anon_0 [uint 64]] other [ref r_anon_1 [uint 64]] return [bool] 1 core_cmp_PartialEq_eq 0 1 [uint 64] body ([bool] block 1 let __result [bool] ([bool] binop BiEq ([uint 64] deref ([ref r_anon_0 [uint 64]] var self)) ([uint 64] deref ([ref r_anon_1 [uint 64]] var other))) ([bool] var __result)) 
fn core_cmp_impls_u64__PartialEq_ne 0 0 args 2 self [ref r_anon_0 [uint 64]] other [ref r_anon_1 [uint 64]] return [bool] 1 core_cmp_PartialEq_ne 0 1 [uint 64] body ([bool] block 1 let __result [bool] ([bool] binop BiNe ([uint 64] deref ([ref r_anon_0 [uint 64]] var self)) ([uint 64] deref ([ref r_anon_1 [uint 64]] var other))) ([bool] var __result)) 
fn core_cmp_impls_int__PartialEq_eq 0 0 args 2 self [ref r_anon_0 [int 32]] other [ref r_anon_1 [int 32]] return [bool] 1 core_cmp_PartialEq_eq 0 1 [int 32] body ([bool] block 1 let __result [bool] ([bool] binop BiEq ([int 32] deref ([ref r_anon_0 [int 32]] var self)) ([int 32] deref ([ref r_anon_1 [int 32]] var other))) ([bool] var __result)) 
fn core_cmp_impls_int__PartialEq_ne 0 0 args 2 self [ref r_anon_0 [int 32]] other [ref r_anon_1 [int 32]] return [bool] 1 core_cmp_PartialEq_ne 0 1 [int 32] body ([bool] block 1 let __result [bool] ([bool] binop BiNe ([int 32] deref ([ref r_anon_0 [int 32]] var self)) ([int 32] deref ([ref r_anon_1 [int 32]] var other))) ([bool] var __result)) 
fn core_cmp_impls_i8__PartialEq_eq 0 0 args 2 self [ref r_anon_0 [int 8]] other [ref r_anon_1 [int 8]] return [bool] 1 core_cmp_PartialEq_eq 0 1 [int 8] body ([bool] block 1 let __result [bool] ([bool] binop BiEq ([int 8] deref ([ref r_anon_0 [int 8]] var self)) ([int 8] deref ([ref r_anon_1 [int 8]] var other))) ([bool] var __result)) 
fn core_cmp_impls_i8__PartialEq_ne 0 0 args 2 self [ref r_anon_0 [int 8]] other [ref r_anon_1 [int 8]] return [bool] 1 core_cmp_PartialEq_ne 0 1 [int 8] body ([bool] block 1 let __result [bool] ([bool] binop BiNe ([int 8] deref ([ref r_anon_0 [int 8]] var self)) ([int 8] deref ([ref r_anon_1 [int 8]] var other))) ([bool] var __result)) 
fn core_cmp_impls_i16__PartialEq_eq 0 0 args 2 self [ref r_anon_0 [int 16]] other [ref r_anon_1 [int 16]] return [bool] 1 core_cmp_PartialEq_eq 0 1 [int 16] body ([bool] block 1 let __result [bool] ([bool] binop BiEq ([int 16] deref ([ref r_anon_0 [int 16]] var self)) ([int 16] deref ([ref r_anon_1 [int 16]] var other))) ([bool] var __result)) 
fn core_cmp_impls_i16__PartialEq_ne 0 0 args 2 self [ref r_anon_0 [int 16]] other [ref r_anon_1 [int 16]] return [bool] 1 core_cmp_PartialEq_ne 0 1 [int 16] body ([bool] block 1 let __result [bool] ([bool] binop BiNe ([int 16] deref ([ref r_anon_0 [int 16]] var self)) ([int 16] deref ([ref r_anon_1 [int 16]] var other))) ([bool] var __result)) 
fn core_cmp_impls_i32__PartialEq_eq 0 0 args 2 self [ref r_anon_0 [int 32]] other [ref r_anon_1 [int 32]] return [bool] 1 core_cmp_PartialEq_eq 0 1 [int 32] body ([bool] block 1 let __result [bool] ([bool] binop BiEq ([int 32] deref ([ref r_anon_0 [int 32]] var self)) ([int 32] deref ([ref r_anon_1 [int 32]] var other))) ([bool] var __result)) 
fn core_cmp_impls_i32__PartialEq_ne 0 0 args 2 self [ref r_anon_0 [int 32]] other [ref r_anon_1 [int 32]] return [bool] 1 core_cmp_PartialEq_ne 0 1 [int 32] body ([bool] block 1 let __result [bool] ([bool] binop BiNe ([int 32] deref ([ref r_anon_0 [int 32]] var self)) ([int 32] deref ([ref r_anon_1 [int 32]] var other))) ([bool] var __result)) 
fn core_cmp_impls_i64__PartialEq_eq 0 0 args 2 self [ref r_anon_0 [int 64]] other [ref r_anon_1 [int 64]] return [bool] 1 core_cmp_PartialEq_eq 0 1 [int 64] body ([bool] block 1 let __result [bool] ([bool] binop BiEq ([int 64] deref ([ref r_anon_0 [int 64]] var self)) ([int 64] deref ([ref r_anon_1 [int 64]] var other))) ([bool] var __result)) 
fn core_cmp_impls_i64__PartialEq_ne 0 0 args 2 self [ref r_anon_0 [int 64]] other [ref r_anon_1 [int 64]] return [bool] 1 core_cmp_PartialEq_ne 0 1 [int 64] body ([bool] block 1 let __result [bool] ([bool] binop BiNe ([int 64] deref ([ref r_anon_0 [int 64]] var self)) ([int 64] deref ([ref r_anon_1 [int 64]] var other))) ([bool] var __result)) 
fn core_cmp_impls_bool__PartialOrd_partial_cmp 0 0 args 2 self [ref r_anon_0 [bool]] other [ref r_anon_1 [bool]] return [adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] 1 core_cmp_PartialOrd_partial_cmp 0 1 [bool] body ([adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] block 1 let __result [adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] ([adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] call core_cmp_PartialOrd_partial_cmp 0 2 [uint 8] [uint 8] 2 ([uint 8] cast ([bool] deref ([ref r_anon_0 [bool]] var self)) [uint 8]) ([uint 8] cast ([bool] deref ([ref r_anon_1 [bool]] var other)) [uint 8])) ([adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] var __result)) 
fn core_cmp_impls_uint__PartialOrd_lt 0 0 args 2 self [ref r_anon_0 [uint 32]] other [ref r_anon_1 [uint 32]] return [bool] 1 core_cmp_PartialOrd_lt 0 1 [uint 32] body ([bool] block 1 let __result [bool] ([bool] binop BiLt ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) ([uint 32] deref ([ref r_anon_1 [uint 32]] var other))) ([bool] var __result)) 
fn core_cmp_impls_uint__PartialOrd_le 0 0 args 2 self [ref r_anon_0 [uint 32]] other [ref r_anon_1 [uint 32]] return [bool] 1 core_cmp_PartialOrd_le 0 1 [uint 32] body ([bool] block 1 let __result [bool] ([bool] binop BiLe ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) ([uint 32] deref ([ref r_anon_1 [uint 32]] var other))) ([bool] var __result)) 
fn core_cmp_impls_uint__PartialOrd_ge 0 0 args 2 self [ref r_anon_0 [uint 32]] other [ref r_anon_1 [uint 32]] return [bool] 1 core_cmp_PartialOrd_ge 0 1 [uint 32] body ([bool] block 1 let __result [bool] ([bool] binop BiGe ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) ([uint 32] deref ([ref r_anon_1 [uint 32]] var other))) ([bool] var __result)) 
fn core_cmp_impls_uint__PartialOrd_gt 0 0 args 2 self [ref r_anon_0 [uint 32]] other [ref r_anon_1 [uint 32]] return [bool] 1 core_cmp_PartialOrd_gt 0 1 [uint 32] body ([bool] block 1 let __result [bool] ([bool] binop BiGt ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) ([uint 32] deref ([ref r_anon_1 [uint 32]] var other))) ([bool] var __result)) 
fn core_cmp_impls_u8__PartialOrd_lt 0 0 args 2 self [ref r_anon_0 [uint 8]] other [ref r_anon_1 [uint 8]] return [bool] 1 core_cmp_PartialOrd_lt 0 1 [uint 8] body ([bool] block 1 let __result [bool] ([bool] binop BiLt ([uint 8] deref ([ref r_anon_0 [uint 8]] var self)) ([uint 8] deref ([ref r_anon_1 [uint 8]] var other))) ([bool] var __result)) 
fn core_cmp_impls_u8__PartialOrd_le 0 0 args 2 self [ref r_anon_0 [uint 8]] other [ref r_anon_1 [uint 8]] return [bool] 1 core_cmp_PartialOrd_le 0 1 [uint 8] body ([bool] block 1 let __result [bool] ([bool] binop BiLe ([uint 8] deref ([ref r_anon_0 [uint 8]] var self)) ([uint 8] deref ([ref r_anon_1 [uint 8]] var other))) ([bool] var __result)) 
fn core_cmp_impls_u8__PartialOrd_ge 0 0 args 2 self [ref r_anon_0 [uint 8]] other [ref r_anon_1 [uint 8]] return [bool] 1 core_cmp_PartialOrd_ge 0 1 [uint 8] body ([bool] block 1 let __result [bool] ([bool] binop BiGe ([uint 8] deref ([ref r_anon_0 [uint 8]] var self)) ([uint 8] deref ([ref r_anon_1 [uint 8]] var other))) ([bool] var __result)) 
fn core_cmp_impls_u8__PartialOrd_gt 0 0 args 2 self [ref r_anon_0 [uint 8]] other [ref r_anon_1 [uint 8]] return [bool] 1 core_cmp_PartialOrd_gt 0 1 [uint 8] body ([bool] block 1 let __result [bool] ([bool] binop BiGt ([uint 8] deref ([ref r_anon_0 [uint 8]] var self)) ([uint 8] deref ([ref r_anon_1 [uint 8]] var other))) ([bool] var __result)) 
fn core_cmp_impls_u16__PartialOrd_lt 0 0 args 2 self [ref r_anon_0 [uint 16]] other [ref r_anon_1 [uint 16]] return [bool] 1 core_cmp_PartialOrd_lt 0 1 [uint 16] body ([bool] block 1 let __result [bool] ([bool] binop BiLt ([uint 16] deref ([ref r_anon_0 [uint 16]] var self)) ([uint 16] deref ([ref r_anon_1 [uint 16]] var other))) ([bool] var __result)) 
fn core_cmp_impls_u16__PartialOrd_le 0 0 args 2 self [ref r_anon_0 [uint 16]] other [ref r_anon_1 [uint 16]] return [bool] 1 core_cmp_PartialOrd_le 0 1 [uint 16] body ([bool] block 1 let __result [bool] ([bool] binop BiLe ([uint 16] deref ([ref r_anon_0 [uint 16]] var self)) ([uint 16] deref ([ref r_anon_1 [uint 16]] var other))) ([bool] var __result)) 
fn core_cmp_impls_u16__PartialOrd_ge 0 0 args 2 self [ref r_anon_0 [uint 16]] other [ref r_anon_1 [uint 16]] return [bool] 1 core_cmp_PartialOrd_ge 0 1 [uint 16] body ([bool] block 1 let __result [bool] ([bool] binop BiGe ([uint 16] deref ([ref r_anon_0 [uint 16]] var self)) ([uint 16] deref ([ref r_anon_1 [uint 16]] var other))) ([bool] var __result)) 
fn core_cmp_impls_u16__PartialOrd_gt 0 0 args 2 self [ref r_anon_0 [uint 16]] other [ref r_anon_1 [uint 16]] return [bool] 1 core_cmp_PartialOrd_gt 0 1 [uint 16] body ([bool] block 1 let __result [bool] ([bool] binop BiGt ([uint 16] deref ([ref r_anon_0 [uint 16]] var self)) ([uint 16] deref ([ref r_anon_1 [uint 16]] var other))) ([bool] var __result)) 
fn core_cmp_impls_u32__PartialOrd_lt 0 0 args 2 self [ref r_anon_0 [uint 32]] other [ref r_anon_1 [uint 32]] return [bool] 1 core_cmp_PartialOrd_lt 0 1 [uint 32] body ([bool] block 1 let __result [bool] ([bool] binop BiLt ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) ([uint 32] deref ([ref r_anon_1 [uint 32]] var other))) ([bool] var __result)) 
fn core_cmp_impls_u32__PartialOrd_le 0 0 args 2 self [ref r_anon_0 [uint 32]] other [ref r_anon_1 [uint 32]] return [bool] 1 core_cmp_PartialOrd_le 0 1 [uint 32] body ([bool] block 1 let __result [bool] ([bool] binop BiLe ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) ([uint 32] deref ([ref r_anon_1 [uint 32]] var other))) ([bool] var __result)) 
fn core_cmp_impls_u32__PartialOrd_ge 0 0 args 2 self [ref r_anon_0 [uint 32]] other [ref r_anon_1 [uint 32]] return [bool] 1 core_cmp_PartialOrd_ge 0 1 [uint 32] body ([bool] block 1 let __result [bool] ([bool] binop BiGe ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) ([uint 32] deref ([ref r_anon_1 [uint 32]] var other))) ([bool] var __result)) 
fn core_cmp_impls_u32__PartialOrd_gt 0 0 args 2 self [ref r_anon_0 [uint 32]] other [ref r_anon_1 [uint 32]] return [bool] 1 core_cmp_PartialOrd_gt 0 1 [uint 32] body ([bool] block 1 let __result [bool] ([bool] binop BiGt ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) ([uint 32] deref ([ref r_anon_1 [uint 32]] var other))) ([bool] var __result)) 
fn core_cmp_impls_u64__PartialOrd_lt 0 0 args 2 self [ref r_anon_0 [uint 64]] other [ref r_anon_1 [uint 64]] return [bool] 1 core_cmp_PartialOrd_lt 0 1 [uint 64] body ([bool] block 1 let __result [bool] ([bool] binop BiLt ([uint 64] deref ([ref r_anon_0 [uint 64]] var self)) ([uint 64] deref ([ref r_anon_1 [uint 64]] var other))) ([bool] var __result)) 
fn core_cmp_impls_u64__PartialOrd_le 0 0 args 2 self [ref r_anon_0 [uint 64]] other [ref r_anon_1 [uint 64]] return [bool] 1 core_cmp_PartialOrd_le 0 1 [uint 64] body ([bool] block 1 let __result [bool] ([bool] binop BiLe ([uint 64] deref ([ref r_anon_0 [uint 64]] var self)) ([uint 64] deref ([ref r_anon_1 [uint 64]] var other))) ([bool] var __result)) 
fn core_cmp_impls_u64__PartialOrd_ge 0 0 args 2 self [ref r_anon_0 [uint 64]] other [ref r_anon_1 [uint 64]] return [bool] 1 core_cmp_PartialOrd_ge 0 1 [uint 64] body ([bool] block 1 let __result [bool] ([bool] binop BiGe ([uint 64] deref ([ref r_anon_0 [uint 64]] var self)) ([uint 64] deref ([ref r_anon_1 [uint 64]] var other))) ([bool] var __result)) 
fn core_cmp_impls_u64__PartialOrd_gt 0 0 args 2 self [ref r_anon_0 [uint 64]] other [ref r_anon_1 [uint 64]] return [bool] 1 core_cmp_PartialOrd_gt 0 1 [uint 64] body ([bool] block 1 let __result [bool] ([bool] binop BiGt ([uint 64] deref ([ref r_anon_0 [uint 64]] var self)) ([uint 64] deref ([ref r_anon_1 [uint 64]] var other))) ([bool] var __result)) 
fn core_cmp_impls_int__PartialOrd_lt 0 0 args 2 self [ref r_anon_0 [int 32]] other [ref r_anon_1 [int 32]] return [bool] 1 core_cmp_PartialOrd_lt 0 1 [int 32] body ([bool] block 1 let __result [bool] ([bool] binop BiLt ([int 32] deref ([ref r_anon_0 [int 32]] var self)) ([int 32] deref ([ref r_anon_1 [int 32]] var other))) ([bool] var __result)) 
fn core_cmp_impls_int__PartialOrd_le 0 0 args 2 self [ref r_anon_0 [int 32]] other [ref r_anon_1 [int 32]] return [bool] 1 core_cmp_PartialOrd_le 0 1 [int 32] body ([bool] block 1 let __result [bool] ([bool] binop BiLe ([int 32] deref ([ref r_anon_0 [int 32]] var self)) ([int 32] deref ([ref r_anon_1 [int 32]] var other))) ([bool] var __result)) 
fn core_cmp_impls_int__PartialOrd_ge 0 0 args 2 self [ref r_anon_0 [int 32]] other [ref r_anon_1 [int 32]] return [bool] 1 core_cmp_PartialOrd_ge 0 1 [int 32] body ([bool] block 1 let __result [bool] ([bool] binop BiGe ([int 32] deref ([ref r_anon_0 [int 32]] var self)) ([int 32] deref ([ref r_anon_1 [int 32]] var other))) ([bool] var __result)) 
fn core_cmp_impls_int__PartialOrd_gt 0 0 args 2 self [ref r_anon_0 [int 32]] other [ref r_anon_1 [int 32]] return [bool] 1 core_cmp_PartialOrd_gt 0 1 [int 32] body ([bool] block 1 let __result [bool] ([bool] binop BiGt ([int 32] deref ([ref r_anon_0 [int 32]] var self)) ([int 32] deref ([ref r_anon_1 [int 32]] var other))) ([bool] var __result)) 
fn core_cmp_impls_i8__PartialOrd_lt 0 0 args 2 self [ref r_anon_0 [int 8]] other [ref r_anon_1 [int 8]] return [bool] 1 core_cmp_PartialOrd_lt 0 1 [int 8] body ([bool] block 1 let __result [bool] ([bool] binop BiLt ([int 8] deref ([ref r_anon_0 [int 8]] var self)) ([int 8] deref ([ref r_anon_1 [int 8]] var other))) ([bool] var __result)) 
fn core_cmp_impls_i8__PartialOrd_le 0 0 args 2 self [ref r_anon_0 [int 8]] other [ref r_anon_1 [int 8]] return [bool] 1 core_cmp_PartialOrd_le 0 1 [int 8] body ([bool] block 1 let __result [bool] ([bool] binop BiLe ([int 8] deref ([ref r_anon_0 [int 8]] var self)) ([int 8] deref ([ref r_anon_1 [int 8]] var other))) ([bool] var __result)) 
fn core_cmp_impls_i8__PartialOrd_ge 0 0 args 2 self [ref r_anon_0 [int 8]] other [ref r_anon_1 [int 8]] return [bool] 1 core_cmp_PartialOrd_ge 0 1 [int 8] body ([bool] block 1 let __result [bool] ([bool] binop BiGe ([int 8] deref ([ref r_anon_0 [int 8]] var self)) ([int 8] deref ([ref r_anon_1 [int 8]] var other))) ([bool] var __result)) 
fn core_cmp_impls_i8__PartialOrd_gt 0 0 args 2 self [ref r_anon_0 [int 8]] other [ref r_anon_1 [int 8]] return [bool] 1 core_cmp_PartialOrd_gt 0 1 [int 8] body ([bool] block 1 let __result [bool] ([bool] binop BiGt ([int 8] deref ([ref r_anon_0 [int 8]] var self)) ([int 8] deref ([ref r_anon_1 [int 8]] var other))) ([bool] var __result)) 
fn core_cmp_impls_i16__PartialOrd_lt 0 0 args 2 self [ref r_anon_0 [int 16]] other [ref r_anon_1 [int 16]] return [bool] 1 core_cmp_PartialOrd_lt 0 1 [int 16] body ([bool] block 1 let __result [bool] ([bool] binop BiLt ([int 16] deref ([ref r_anon_0 [int 16]] var self)) ([int 16] deref ([ref r_anon_1 [int 16]] var other))) ([bool] var __result)) 
fn core_cmp_impls_i16__PartialOrd_le 0 0 args 2 self [ref r_anon_0 [int 16]] other [ref r_anon_1 [int 16]] return [bool] 1 core_cmp_PartialOrd_le 0 1 [int 16] body ([bool] block 1 let __result [bool] ([bool] binop BiLe ([int 16] deref ([ref r_anon_0 [int 16]] var self)) ([int 16] deref ([ref r_anon_1 [int 16]] var other))) ([bool] var __result)) 
fn core_cmp_impls_i16__PartialOrd_ge 0 0 args 2 self [ref r_anon_0 [int 16]] other [ref r_anon_1 [int 16]] return [bool] 1 core_cmp_PartialOrd_ge 0 1 [int 16] body ([bool] block 1 let __result [bool] ([bool] binop BiGe ([int 16] deref ([ref r_anon_0 [int 16]] var self)) ([int 16] deref ([ref r_anon_1 [int 16]] var other))) ([bool] var __result)) 
fn core_cmp_impls_i16__PartialOrd_gt 0 0 args 2 self [ref r_anon_0 [int 16]] other [ref r_anon_1 [int 16]] return [bool] 1 core_cmp_PartialOrd_gt 0 1 [int 16] body ([bool] block 1 let __result [bool] ([bool] binop BiGt ([int 16] deref ([ref r_anon_0 [int 16]] var self)) ([int 16] deref ([ref r_anon_1 [int 16]] var other))) ([bool] var __result)) 
fn core_cmp_impls_i32__PartialOrd_lt 0 0 args 2 self [ref r_anon_0 [int 32]] other [ref r_anon_1 [int 32]] return [bool] 1 core_cmp_PartialOrd_lt 0 1 [int 32] body ([bool] block 1 let __result [bool] ([bool] binop BiLt ([int 32] deref ([ref r_anon_0 [int 32]] var self)) ([int 32] deref ([ref r_anon_1 [int 32]] var other))) ([bool] var __result)) 
fn core_cmp_impls_i32__PartialOrd_le 0 0 args 2 self [ref r_anon_0 [int 32]] other [ref r_anon_1 [int 32]] return [bool] 1 core_cmp_PartialOrd_le 0 1 [int 32] body ([bool] block 1 let __result [bool] ([bool] binop BiLe ([int 32] deref ([ref r_anon_0 [int 32]] var self)) ([int 32] deref ([ref r_anon_1 [int 32]] var other))) ([bool] var __result)) 
fn core_cmp_impls_i32__PartialOrd_ge 0 0 args 2 self [ref r_anon_0 [int 32]] other [ref r_anon_1 [int 32]] return [bool] 1 core_cmp_PartialOrd_ge 0 1 [int 32] body ([bool] block 1 let __result [bool] ([bool] binop BiGe ([int 32] deref ([ref r_anon_0 [int 32]] var self)) ([int 32] deref ([ref r_anon_1 [int 32]] var other))) ([bool] var __result)) 
fn core_cmp_impls_i32__PartialOrd_gt 0 0 args 2 self [ref r_anon_0 [int 32]] other [ref r_anon_1 [int 32]] return [bool] 1 core_cmp_PartialOrd_gt 0 1 [int 32] body ([bool] block 1 let __result [bool] ([bool] binop BiGt ([int 32] deref ([ref r_anon_0 [int 32]] var self)) ([int 32] deref ([ref r_anon_1 [int 32]] var other))) ([bool] var __result)) 
fn core_cmp_impls_i64__PartialOrd_lt 0 0 args 2 self [ref r_anon_0 [int 64]] other [ref r_anon_1 [int 64]] return [bool] 1 core_cmp_PartialOrd_lt 0 1 [int 64] body ([bool] block 1 let __result [bool] ([bool] binop BiLt ([int 64] deref ([ref r_anon_0 [int 64]] var self)) ([int 64] deref ([ref r_anon_1 [int 64]] var other))) ([bool] var __result)) 
fn core_cmp_impls_i64__PartialOrd_le 0 0 args 2 self [ref r_anon_0 [int 64]] other [ref r_anon_1 [int 64]] return [bool] 1 core_cmp_PartialOrd_le 0 1 [int 64] body ([bool] block 1 let __result [bool] ([bool] binop BiLe ([int 64] deref ([ref r_anon_0 [int 64]] var self)) ([int 64] deref ([ref r_anon_1 [int 64]] var other))) ([bool] var __result)) 
fn core_cmp_impls_i64__PartialOrd_ge 0 0 args 2 self [ref r_anon_0 [int 64]] other [ref r_anon_1 [int 64]] return [bool] 1 core_cmp_PartialOrd_ge 0 1 [int 64] body ([bool] block 1 let __result [bool] ([bool] binop BiGe ([int 64] deref ([ref r_anon_0 [int 64]] var self)) ([int 64] deref ([ref r_anon_1 [int 64]] var other))) ([bool] var __result)) 
fn core_cmp_impls_i64__PartialOrd_gt 0 0 args 2 self [ref r_anon_0 [int 64]] other [ref r_anon_1 [int 64]] return [bool] 1 core_cmp_PartialOrd_gt 0 1 [int 64] body ([bool] block 1 let __result [bool] ([bool] binop BiGt ([int 64] deref ([ref r_anon_0 [int 64]] var self)) ([int 64] deref ([ref r_anon_1 [int 64]] var other))) ([bool] var __result)) 
fn core_cmp_impls__x28_x29__Ord_cmp 0 0 args 2 self [ref r_anon_0 [unit]] _other [ref r_anon_1 [unit]] return [adt core_cmp_Ordering 0 0] 1 core_cmp_Ord_cmp 0 1 [unit] body ([adt core_cmp_Ordering 0 0] block 1 let __result [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] enum_literal core_cmp_Equal 0 0) ([adt core_cmp_Ordering 0 0] var __result)) 
fn core_cmp_impls_bool__Ord_cmp 0 0 args 2 self [ref r_anon_0 [bool]] other [ref r_anon_1 [bool]] return [adt core_cmp_Ordering 0 0] 1 core_cmp_Ord_cmp 0 1 [bool] body ([adt core_cmp_Ordering 0 0] block 1 let __result [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] call core_cmp_Ord_cmp 0 1 [uint 8] 2 ([uint 8] cast ([bool] deref ([ref r_anon_0 [bool]] var self)) [uint 8]) ([uint 8] cast ([bool] deref ([ref r_anon_1 [bool]] var other)) [uint 8])) ([adt core_cmp_Ordering 0 0] var __result)) 
fn core_cmp_impls_uint__Ord_cmp 0 0 args 2 self [ref r_anon_0 [uint 32]] other [ref r_anon_1 [uint 32]] return [adt core_cmp_Ordering 0 0] 1 core_cmp_Ord_cmp 0 1 [uint 32] body ([adt core_cmp_Ordering 0 0] block 1 let __result_2 [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] match ([int 32] cast ([bool] binop BiLt ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) ([uint 32] deref ([ref r_anon_1 [uint 32]] var other))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_cmp_Ordering 0 0] match ([int 32] cast ([bool] binop BiGt ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) ([uint 32] deref ([ref r_anon_1 [uint 32]] var other))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_cmp_Ordering 0 0] block 1 let __result [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] enum_literal core_cmp_Equal 0 0) ([adt core_cmp_Ordering 0 0] var __result)) ([int 32] wild) ([adt core_cmp_Ordering 0 0] block 1 let __result_0 [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] enum_literal core_cmp_Greater 1 0) ([adt core_cmp_Ordering 0 0] var __result_0))) ([int 32] wild) ([adt core_cmp_Ordering 0 0] block 1 let __result_1 [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] enum_literal core_cmp_Less -1 0) ([adt core_cmp_Ordering 0 0] var __result_1))) ([adt core_cmp_Ordering 0 0] var __result_2)) 
fn core_cmp_impls_u8__Ord_cmp 0 0 args 2 self [ref r_anon_0 [uint 8]] other [ref r_anon_1 [uint 8]] return [adt core_cmp_Ordering 0 0] 1 core_cmp_Ord_cmp 0 1 [uint 8] body ([adt core_cmp_Ordering 0 0] block 1 let __result_2 [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] match ([int 32] cast ([bool] binop BiLt ([uint 8] deref ([ref r_anon_0 [uint 8]] var self)) ([uint 8] deref ([ref r_anon_1 [uint 8]] var other))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_cmp_Ordering 0 0] match ([int 32] cast ([bool] binop BiGt ([uint 8] deref ([ref r_anon_0 [uint 8]] var self)) ([uint 8] deref ([ref r_anon_1 [uint 8]] var other))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_cmp_Ordering 0 0] block 1 let __result [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] enum_literal core_cmp_Equal 0 0) ([adt core_cmp_Ordering 0 0] var __result)) ([int 32] wild) ([adt core_cmp_Ordering 0 0] block 1 let __result_0 [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] enum_literal core_cmp_Greater 1 0) ([adt core_cmp_Ordering 0 0] var __result_0))) ([int 32] wild) ([adt core_cmp_Ordering 0 0] block 1 let __result_1 [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] enum_literal core_cmp_Less -1 0) ([adt core_cmp_Ordering 0 0] var __result_1))) ([adt core_cmp_Ordering 0 0] var __result_2)) 
fn core_cmp_impls_u16__Ord_cmp 0 0 args 2 self [ref r_anon_0 [uint 16]] other [ref r_anon_1 [uint 16]] return [adt core_cmp_Ordering 0 0] 1 core_cmp_Ord_cmp 0 1 [uint 16] body ([adt core_cmp_Ordering 0 0] block 1 let __result_2 [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] match ([int 32] cast ([bool] binop BiLt ([uint 16] deref ([ref r_anon_0 [uint 16]] var self)) ([uint 16] deref ([ref r_anon_1 [uint 16]] var other))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_cmp_Ordering 0 0] match ([int 32] cast ([bool] binop BiGt ([uint 16] deref ([ref r_anon_0 [uint 16]] var self)) ([uint 16] deref ([ref r_anon_1 [uint 16]] var other))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_cmp_Ordering 0 0] block 1 let __result [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] enum_literal core_cmp_Equal 0 0) ([adt core_cmp_Ordering 0 0] var __result)) ([int 32] wild) ([adt core_cmp_Ordering 0 0] block 1 let __result_0 [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] enum_literal core_cmp_Greater 1 0) ([adt core_cmp_Ordering 0 0] var __result_0))) ([int 32] wild) ([adt core_cmp_Ordering 0 0] block 1 let __result_1 [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] enum_literal core_cmp_Less -1 0) ([adt core_cmp_Ordering 0 0] var __result_1))) ([adt core_cmp_Ordering 0 0] var __result_2)) 
fn core_cmp_impls_u32__Ord_cmp 0 0 args 2 self [ref r_anon_0 [uint 32]] other [ref r_anon_1 [uint 32]] return [adt core_cmp_Ordering 0 0] 1 core_cmp_Ord_cmp 0 1 [uint 32] body ([adt core_cmp_Ordering 0 0] block 1 let __result_2 [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] match ([int 32] cast ([bool] binop BiLt ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) ([uint 32] deref ([ref r_anon_1 [uint 32]] var other))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_cmp_Ordering 0 0] match ([int 32] cast ([bool] binop BiGt ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) ([uint 32] deref ([ref r_anon_1 [uint 32]] var other))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_cmp_Ordering 0 0] block 1 let __result [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] enum_literal core_cmp_Equal 0 0) ([adt core_cmp_Ordering 0 0] var __result)) ([int 32] wild) ([adt core_cmp_Ordering 0 0] block 1 let __result_0 [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] enum_literal core_cmp_Greater 1 0) ([adt core_cmp_Ordering 0 0] var __result_0))) ([int 32] wild) ([adt core_cmp_Ordering 0 0] block 1 let __result_1 [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] enum_literal core_cmp_Less -1 0) ([adt core_cmp_Ordering 0 0] var __result_1))) ([adt core_cmp_Ordering 0 0] var __result_2)) 
fn core_cmp_impls_u64__Ord_cmp 0 0 args 2 self [ref r_anon_0 [uint 64]] other [ref r_anon_1 [uint 64]] return [adt core_cmp_Ordering 0 0] 1 core_cmp_Ord_cmp 0 1 [uint 64] body ([adt core_cmp_Ordering 0 0] block 1 let __result_2 [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] match ([int 32] cast ([bool] binop BiLt ([uint 64] deref ([ref r_anon_0 [uint 64]] var self)) ([uint 64] deref ([ref r_anon_1 [uint 64]] var other))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_cmp_Ordering 0 0] match ([int 32] cast ([bool] binop BiGt ([uint 64] deref ([ref r_anon_0 [uint 64]] var self)) ([uint 64] deref ([ref r_anon_1 [uint 64]] var other))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_cmp_Ordering 0 0] block 1 let __result [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] enum_literal core_cmp_Equal 0 0) ([adt core_cmp_Ordering 0 0] var __result)) ([int 32] wild) ([adt core_cmp_Ordering 0 0] block 1 let __result_0 [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] enum_literal core_cmp_Greater 1 0) ([adt core_cmp_Ordering 0 0] var __result_0))) ([int 32] wild) ([adt core_cmp_Ordering 0 0] block 1 let __result_1 [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] enum_literal core_cmp_Less -1 0) ([adt core_cmp_Ordering 0 0] var __result_1))) ([adt core_cmp_Ordering 0 0] var __result_2)) 
fn core_cmp_impls_int__Ord_cmp 0 0 args 2 self [ref r_anon_0 [int 32]] other [ref r_anon_1 [int 32]] return [adt core_cmp_Ordering 0 0] 1 core_cmp_Ord_cmp 0 1 [int 32] body ([adt core_cmp_Ordering 0 0] block 1 let __result_2 [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] match ([int 32] cast ([bool] binop BiLt ([int 32] deref ([ref r_anon_0 [int 32]] var self)) ([int 32] deref ([ref r_anon_1 [int 32]] var other))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_cmp_Ordering 0 0] match ([int 32] cast ([bool] binop BiGt ([int 32] deref ([ref r_anon_0 [int 32]] var self)) ([int 32] deref ([ref r_anon_1 [int 32]] var other))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_cmp_Ordering 0 0] block 1 let __result [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] enum_literal core_cmp_Equal 0 0) ([adt core_cmp_Ordering 0 0] var __result)) ([int 32] wild) ([adt core_cmp_Ordering 0 0] block 1 let __result_0 [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] enum_literal core_cmp_Greater 1 0) ([adt core_cmp_Ordering 0 0] var __result_0))) ([int 32] wild) ([adt core_cmp_Ordering 0 0] block 1 let __result_1 [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] enum_literal core_cmp_Less -1 0) ([adt core_cmp_Ordering 0 0] var __result_1))) ([adt core_cmp_Ordering 0 0] var __result_2)) 
fn core_cmp_impls_i8__Ord_cmp 0 0 args 2 self [ref r_anon_0 [int 8]] other [ref r_anon_1 [int 8]] return [adt core_cmp_Ordering 0 0] 1 core_cmp_Ord_cmp 0 1 [int 8] body ([adt core_cmp_Ordering 0 0] block 1 let __result_2 [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] match ([int 32] cast ([bool] binop BiLt ([int 8] deref ([ref r_anon_0 [int 8]] var self)) ([int 8] deref ([ref r_anon_1 [int 8]] var other))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_cmp_Ordering 0 0] match ([int 32] cast ([bool] binop BiGt ([int 8] deref ([ref r_anon_0 [int 8]] var self)) ([int 8] deref ([ref r_anon_1 [int 8]] var other))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_cmp_Ordering 0 0] block 1 let __result [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] enum_literal core_cmp_Equal 0 0) ([adt core_cmp_Ordering 0 0] var __result)) ([int 32] wild) ([adt core_cmp_Ordering 0 0] block 1 let __result_0 [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] enum_literal core_cmp_Greater 1 0) ([adt core_cmp_Ordering 0 0] var __result_0))) ([int 32] wild) ([adt core_cmp_Ordering 0 0] block 1 let __result_1 [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] enum_literal core_cmp_Less -1 0) ([adt core_cmp_Ordering 0 0] var __result_1))) ([adt core_cmp_Ordering 0 0] var __result_2)) 
fn core_cmp_impls_i16__Ord_cmp 0 0 args 2 self [ref r_anon_0 [int 16]] other [ref r_anon_1 [int 16]] return [adt core_cmp_Ordering 0 0] 1 core_cmp_Ord_cmp 0 1 [int 16] body ([adt core_cmp_Ordering 0 0] block 1 let __result_2 [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] match ([int 32] cast ([bool] binop BiLt ([int 16] deref ([ref r_anon_0 [int 16]] var self)) ([int 16] deref ([ref r_anon_1 [int 16]] var other))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_cmp_Ordering 0 0] match ([int 32] cast ([bool] binop BiGt ([int 16] deref ([ref r_anon_0 [int 16]] var self)) ([int 16] deref ([ref r_anon_1 [int 16]] var other))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_cmp_Ordering 0 0] block 1 let __result [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] enum_literal core_cmp_Equal 0 0) ([adt core_cmp_Ordering 0 0] var __result)) ([int 32] wild) ([adt core_cmp_Ordering 0 0] block 1 let __result_0 [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] enum_literal core_cmp_Greater 1 0) ([adt core_cmp_Ordering 0 0] var __result_0))) ([int 32] wild) ([adt core_cmp_Ordering 0 0] block 1 let __result_1 [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] enum_literal core_cmp_Less -1 0) ([adt core_cmp_Ordering 0 0] var __result_1))) ([adt core_cmp_Ordering 0 0] var __result_2)) 
fn core_cmp_impls_i32__Ord_cmp 0 0 args 2 self [ref r_anon_0 [int 32]] other [ref r_anon_1 [int 32]] return [adt core_cmp_Ordering 0 0] 1 core_cmp_Ord_cmp 0 1 [int 32] body ([adt core_cmp_Ordering 0 0] block 1 let __result_2 [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] match ([int 32] cast ([bool] binop BiLt ([int 32] deref ([ref r_anon_0 [int 32]] var self)) ([int 32] deref ([ref r_anon_1 [int 32]] var other))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_cmp_Ordering 0 0] match ([int 32] cast ([bool] binop BiGt ([int 32] deref ([ref r_anon_0 [int 32]] var self)) ([int 32] deref ([ref r_anon_1 [int 32]] var other))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_cmp_Ordering 0 0] block 1 let __result [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] enum_literal core_cmp_Equal 0 0) ([adt core_cmp_Ordering 0 0] var __result)) ([int 32] wild) ([adt core_cmp_Ordering 0 0] block 1 let __result_0 [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] enum_literal core_cmp_Greater 1 0) ([adt core_cmp_Ordering 0 0] var __result_0))) ([int 32] wild) ([adt core_cmp_Ordering 0 0] block 1 let __result_1 [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] enum_literal core_cmp_Less -1 0) ([adt core_cmp_Ordering 0 0] var __result_1))) ([adt core_cmp_Ordering 0 0] var __result_2)) 
fn core_cmp_impls_i64__Ord_cmp 0 0 args 2 self [ref r_anon_0 [int 64]] other [ref r_anon_1 [int 64]] return [adt core_cmp_Ordering 0 0] 1 core_cmp_Ord_cmp 0 1 [int 64] body ([adt core_cmp_Ordering 0 0] block 1 let __result_2 [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] match ([int 32] cast ([bool] binop BiLt ([int 64] deref ([ref r_anon_0 [int 64]] var self)) ([int 64] deref ([ref r_anon_1 [int 64]] var other))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_cmp_Ordering 0 0] match ([int 32] cast ([bool] binop BiGt ([int 64] deref ([ref r_anon_0 [int 64]] var self)) ([int 64] deref ([ref r_anon_1 [int 64]] var other))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_cmp_Ordering 0 0] block 1 let __result [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] enum_literal core_cmp_Equal 0 0) ([adt core_cmp_Ordering 0 0] var __result)) ([int 32] wild) ([adt core_cmp_Ordering 0 0] block 1 let __result_0 [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] enum_literal core_cmp_Greater 1 0) ([adt core_cmp_Ordering 0 0] var __result_0))) ([int 32] wild) ([adt core_cmp_Ordering 0 0] block 1 let __result_1 [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] enum_literal core_cmp_Less -1 0) ([adt core_cmp_Ordering 0 0] var __result_1))) ([adt core_cmp_Ordering 0 0] var __result_2)) 
fn core_cmp_impls__x26_x27a_x20A__PartialEq_eq 2 r_named_0_76097 r_named_0_76098 2 t_0 t_1 args 2 self [ref r_anon_0 [ref r_named_0_76097 [var t_0]]] other [ref r_anon_1 [ref r_named_0_76098 [var t_1]]] return [bool] 1 core_cmp_PartialEq_eq 0 2 [ref r_named_0_76098 [var t_1]] [ref r_named_0_76097 [var t_0]] body ([bool] block 1 let __result [bool] ([bool] call core_cmp_PartialEq_eq 0 2 [var t_1] [var t_0] 2 ([ref r_named_0_76097 [var t_0]] deref ([ref r_anon_0 [ref r_named_0_76097 [var t_0]]] var self)) ([ref r_named_0_76098 [var t_1]] deref ([ref r_anon_1 [ref r_named_0_76098 [var t_1]]] var other))) ([bool] var __result)) 
fn core_cmp_impls__x26_x27a_x20A__PartialOrd_partial_cmp 2 r_named_0_76226 r_named_0_76227 2 t_0 t_1 args 2 self [ref r_anon_0 [ref r_named_0_76226 [var t_0]]] other [ref r_anon_1 [ref r_named_0_76227 [var t_1]]] return [adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] 1 core_cmp_PartialOrd_partial_cmp 0 2 [ref r_named_0_76227 [var t_1]] [ref r_named_0_76226 [var t_0]] body ([adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] block 1 let __result [adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] ([adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] call core_cmp_PartialOrd_partial_cmp 0 2 [var t_1] [var t_0] 2 ([ref r_named_0_76226 [var t_0]] deref ([ref r_anon_0 [ref r_named_0_76226 [var t_0]]] var self)) ([ref r_named_0_76227 [var t_1]] deref ([ref r_anon_1 [ref r_named_0_76227 [var t_1]]] var other))) ([adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] var __result)) 
fn core_cmp_impls__x26_x27a_x20A__PartialOrd_lt 2 r_named_0_76226 r_named_0_76227 2 t_0 t_1 args 2 self [ref r_anon_0 [ref r_named_0_76226 [var t_0]]] other [ref r_anon_1 [ref r_named_0_76227 [var t_1]]] return [bool] 1 core_cmp_PartialOrd_lt 0 2 [ref r_named_0_76227 [var t_1]] [ref r_named_0_76226 [var t_0]] body ([bool] block 1 let __result [bool] ([bool] call core_cmp_PartialOrd_lt 0 2 [var t_1] [var t_0] 2 ([ref r_named_0_76226 [var t_0]] deref ([ref r_anon_0 [ref r_named_0_76226 [var t_0]]] var self)) ([ref r_named_0_76227 [var t_1]] deref ([ref r_anon_1 [ref r_named_0_76227 [var t_1]]] var other))) ([bool] var __result)) 
fn core_cmp_impls__x26_x27a_x20A__PartialOrd_le 2 r_named_0_76226 r_named_0_76227 2 t_0 t_1 args 2 self [ref r_anon_0 [ref r_named_0_76226 [var t_0]]] other [ref r_anon_1 [ref r_named_0_76227 [var t_1]]] return [bool] 1 core_cmp_PartialOrd_le 0 2 [ref r_named_0_76227 [var t_1]] [ref r_named_0_76226 [var t_0]] body ([bool] block 1 let __result [bool] ([bool] call core_cmp_PartialOrd_le 0 2 [var t_1] [var t_0] 2 ([ref r_named_0_76226 [var t_0]] deref ([ref r_anon_0 [ref r_named_0_76226 [var t_0]]] var self)) ([ref r_named_0_76227 [var t_1]] deref ([ref r_anon_1 [ref r_named_0_76227 [var t_1]]] var other))) ([bool] var __result)) 
fn core_cmp_impls__x26_x27a_x20A__PartialOrd_ge 2 r_named_0_76226 r_named_0_76227 2 t_0 t_1 args 2 self [ref r_anon_0 [ref r_named_0_76226 [var t_0]]] other [ref r_anon_1 [ref r_named_0_76227 [var t_1]]] return [bool] 1 core_cmp_PartialOrd_ge 0 2 [ref r_named_0_76227 [var t_1]] [ref r_named_0_76226 [var t_0]] body ([bool] block 1 let __result [bool] ([bool] call core_cmp_PartialOrd_ge 0 2 [var t_1] [var t_0] 2 ([ref r_named_0_76226 [var t_0]] deref ([ref r_anon_0 [ref r_named_0_76226 [var t_0]]] var self)) ([ref r_named_0_76227 [var t_1]] deref ([ref r_anon_1 [ref r_named_0_76227 [var t_1]]] var other))) ([bool] var __result)) 
fn core_cmp_impls__x26_x27a_x20A__PartialOrd_gt 2 r_named_0_76226 r_named_0_76227 2 t_0 t_1 args 2 self [ref r_anon_0 [ref r_named_0_76226 [var t_0]]] other [ref r_anon_1 [ref r_named_0_76227 [var t_1]]] return [bool] 1 core_cmp_PartialOrd_gt 0 2 [ref r_named_0_76227 [var t_1]] [ref r_named_0_76226 [var t_0]] body ([bool] block 1 let __result [bool] ([bool] call core_cmp_PartialOrd_gt 0 2 [var t_1] [var t_0] 2 ([ref r_named_0_76226 [var t_0]] deref ([ref r_anon_0 [ref r_named_0_76226 [var t_0]]] var self)) ([ref r_named_0_76227 [var t_1]] deref ([ref r_anon_1 [ref r_named_0_76227 [var t_1]]] var other))) ([bool] var __result)) 
fn core_cmp_impls__x26_x27a_x20A__Ord_cmp 1 r_named_0_76263 1 t_0 args 2 self [ref r_anon_0 [ref r_named_0_76263 [var t_0]]] other [ref r_anon_1 [ref r_named_0_76263 [var t_0]]] return [adt core_cmp_Ordering 0 0] 1 core_cmp_Ord_cmp 0 1 [ref r_named_0_76263 [var t_0]] body ([adt core_cmp_Ordering 0 0] block 1 let __result [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] call core_cmp_Ord_cmp 0 1 [var t_0] 2 ([ref r_named_0_76263 [var t_0]] deref ([ref r_anon_0 [ref r_named_0_76263 [var t_0]]] var self)) ([ref r_named_0_76263 [var t_0]] deref ([ref r_anon_1 [ref r_named_0_76263 [var t_0]]] var other))) ([adt core_cmp_Ordering 0 0] var __result)) 
fn core_cmp_impls__x26_x27a_x20mut_x20A__PartialEq_eq 2 r_named_0_76337 r_named_0_76338 2 t_0 t_1 args 2 self [ref r_anon_0 [ref_mut r_named_0_76337 [var t_0]]] other [ref r_anon_1 [ref_mut r_named_0_76338 [var t_1]]] return [bool] 1 core_cmp_PartialEq_eq 0 2 [ref_mut r_named_0_76338 [var t_1]] [ref_mut r_named_0_76337 [var t_0]] body ([bool] block 1 let __result [bool] ([bool] call core_cmp_PartialEq_eq 0 2 [var t_1] [var t_0] 2 ([ref_mut r_named_0_76337 [var t_0]] deref ([ref r_anon_0 [ref_mut r_named_0_76337 [var t_0]]] var self)) ([ref_mut r_named_0_76338 [var t_1]] deref ([ref r_anon_1 [ref_mut r_named_0_76338 [var t_1]]] var other))) ([bool] var __result)) 
fn core_cmp_impls__x26_x27a_x20mut_x20A__PartialOrd_partial_cmp 2 r_named_0_76466 r_named_0_76467 2 t_0 t_1 args 2 self [ref r_anon_0 [ref_mut r_named_0_76466 [var t_0]]] other [ref r_anon_1 [ref_mut r_named_0_76467 [var t_1]]] return [adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] 1 core_cmp_PartialOrd_partial_cmp 0 2 [ref_mut r_named_0_76467 [var t_1]] [ref_mut r_named_0_76466 [var t_0]] body ([adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] block 1 let __result [adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] ([adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] call core_cmp_PartialOrd_partial_cmp 0 2 [var t_1] [var t_0] 2 ([ref_mut r_named_0_76466 [var t_0]] deref ([ref r_anon_0 [ref_mut r_named_0_76466 [var t_0]]] var self)) ([ref_mut r_named_0_76467 [var t_1]] deref ([ref r_anon_1 [ref_mut r_named_0_76467 [var t_1]]] var other))) ([adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] var __result)) 
fn core_cmp_impls__x26_x27a_x20mut_x20A__PartialOrd_lt 2 r_named_0_76466 r_named_0_76467 2 t_0 t_1 args 2 self [ref r_anon_0 [ref_mut r_named_0_76466 [var t_0]]] other [ref r_anon_1 [ref_mut r_named_0_76467 [var t_1]]] return [bool] 1 core_cmp_PartialOrd_lt 0 2 [ref_mut r_named_0_76467 [var t_1]] [ref_mut r_named_0_76466 [var t_0]] body ([bool] block 1 let __result [bool] ([bool] call core_cmp_PartialOrd_lt 0 2 [var t_1] [var t_0] 2 ([ref_mut r_named_0_76466 [var t_0]] deref ([ref r_anon_0 [ref_mut r_named_0_76466 [var t_0]]] var self)) ([ref_mut r_named_0_76467 [var t_1]] deref ([ref r_anon_1 [ref_mut r_named_0_76467 [var t_1]]] var other))) ([bool] var __result)) 
fn core_cmp_impls__x26_x27a_x20mut_x20A__PartialOrd_le 2 r_named_0_76466 r_named_0_76467 2 t_0 t_1 args 2 self [ref r_anon_0 [ref_mut r_named_0_76466 [var t_0]]] other [ref r_anon_1 [ref_mut r_named_0_76467 [var t_1]]] return [bool] 1 core_cmp_PartialOrd_le 0 2 [ref_mut r_named_0_76467 [var t_1]] [ref_mut r_named_0_76466 [var t_0]] body ([bool] block 1 let __result [bool] ([bool] call core_cmp_PartialOrd_le 0 2 [var t_1] [var t_0] 2 ([ref_mut r_named_0_76466 [var t_0]] deref ([ref r_anon_0 [ref_mut r_named_0_76466 [var t_0]]] var self)) ([ref_mut r_named_0_76467 [var t_1]] deref ([ref r_anon_1 [ref_mut r_named_0_76467 [var t_1]]] var other))) ([bool] var __result)) 
fn core_cmp_impls__x26_x27a_x20mut_x20A__PartialOrd_ge 2 r_named_0_76466 r_named_0_76467 2 t_0 t_1 args 2 self [ref r_anon_0 [ref_mut r_named_0_76466 [var t_0]]] other [ref r_anon_1 [ref_mut r_named_0_76467 [var t_1]]] return [bool] 1 core_cmp_PartialOrd_ge 0 2 [ref_mut r_named_0_76467 [var t_1]] [ref_mut r_named_0_76466 [var t_0]] body ([bool] block 1 let __result [bool] ([bool] call core_cmp_PartialOrd_ge 0 2 [var t_1] [var t_0] 2 ([ref_mut r_named_0_76466 [var t_0]] deref ([ref r_anon_0 [ref_mut r_named_0_76466 [var t_0]]] var self)) ([ref_mut r_named_0_76467 [var t_1]] deref ([ref r_anon_1 [ref_mut r_named_0_76467 [var t_1]]] var other))) ([bool] var __result)) 
fn core_cmp_impls__x26_x27a_x20mut_x20A__PartialOrd_gt 2 r_named_0_76466 r_named_0_76467 2 t_0 t_1 args 2 self [ref r_anon_0 [ref_mut r_named_0_76466 [var t_0]]] other [ref r_anon_1 [ref_mut r_named_0_76467 [var t_1]]] return [bool] 1 core_cmp_PartialOrd_gt 0 2 [ref_mut r_named_0_76467 [var t_1]] [ref_mut r_named_0_76466 [var t_0]] body ([bool] block 1 let __result [bool] ([bool] call core_cmp_PartialOrd_gt 0 2 [var t_1] [var t_0] 2 ([ref_mut r_named_0_76466 [var t_0]] deref ([ref r_anon_0 [ref_mut r_named_0_76466 [var t_0]]] var self)) ([ref_mut r_named_0_76467 [var t_1]] deref ([ref r_anon_1 [ref_mut r_named_0_76467 [var t_1]]] var other))) ([bool] var __result)) 
fn core_cmp_impls__x26_x27a_x20mut_x20A__Ord_cmp 1 r_named_0_76503 1 t_0 args 2 self [ref r_anon_0 [ref_mut r_named_0_76503 [var t_0]]] other [ref r_anon_1 [ref_mut r_named_0_76503 [var t_0]]] return [adt core_cmp_Ordering 0 0] 1 core_cmp_Ord_cmp 0 1 [ref_mut r_named_0_76503 [var t_0]] body ([adt core_cmp_Ordering 0 0] block 1 let __result [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] call core_cmp_Ord_cmp 0 1 [var t_0] 2 ([ref_mut r_named_0_76503 [var t_0]] deref ([ref r_anon_0 [ref_mut r_named_0_76503 [var t_0]]] var self)) ([ref_mut r_named_0_76503 [var t_0]] deref ([ref r_anon_1 [ref_mut r_named_0_76503 [var t_0]]] var other))) ([adt core_cmp_Ordering 0 0] var __result)) 
fn core_cmp_impls__x26_x27a_x20A__PartialEq_eq 2 r_named_0_76577 r_named_0_76578 2 t_0 t_1 args 2 self [ref r_anon_0 [ref r_named_0_76577 [var t_0]]] other [ref r_anon_1 [ref_mut r_named_0_76578 [var t_1]]] return [bool] 1 core_cmp_PartialEq_eq 0 2 [ref_mut r_named_0_76578 [var t_1]] [ref r_named_0_76577 [var t_0]] body ([bool] block 1 let __result [bool] ([bool] call core_cmp_PartialEq_eq 0 2 [var t_1] [var t_0] 2 ([ref r_named_0_76577 [var t_0]] deref ([ref r_anon_0 [ref r_named_0_76577 [var t_0]]] var self)) ([ref_mut r_named_0_76578 [var t_1]] deref ([ref r_anon_1 [ref_mut r_named_0_76578 [var t_1]]] var other))) ([bool] var __result)) 
fn core_cmp_impls__x26_x27a_x20mut_x20A__PartialEq_eq 2 r_named_0_76641 r_named_0_76642 2 t_0 t_1 args 2 self [ref r_anon_0 [ref_mut r_named_0_76641 [var t_0]]] other [ref r_anon_1 [ref r_named_0_76642 [var t_1]]] return [bool] 1 core_cmp_PartialEq_eq 0 2 [ref r_named_0_76642 [var t_1]] [ref_mut r_named_0_76641 [var t_0]] body ([bool] block 1 let __result [bool] ([bool] call core_cmp_PartialEq_eq 0 2 [var t_1] [var t_0] 2 ([ref_mut r_named_0_76641 [var t_0]] deref ([ref r_anon_0 [ref_mut r_named_0_76641 [var t_0]]] var self)) ([ref r_named_0_76642 [var t_1]] deref ([ref r_anon_1 [ref r_named_0_76642 [var t_1]]] var other))) ([bool] var __result)) 
fn core_clone__x26_x27a_x20T__Clone_clone 1 r_named_0_76697 1 t_0 args 1 self [ref r_anon_0 [ref r_named_0_76697 [var t_0]]] return [ref r_named_0_76697 [var t_0]] 1 core_clone_Clone_clone 0 1 [ref r_named_0_76697 [var t_0]] body ([ref r_named_0_76697 [var t_0]] block 1 let __result [ref r_named_0_76697 [var t_0]] ([ref r_named_0_76697 [var t_0]] deref ([ref r_anon_0 [ref r_named_0_76697 [var t_0]]] var self)) ([ref r_named_0_76697 [var t_0]] var __result)) 
fn core_clone_int__Clone_clone 0 0 args 1 self [ref r_anon_0 [int 32]] return [int 32] 1 core_clone_Clone_clone 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] deref ([ref r_anon_0 [int 32]] var self)) ([int 32] var __result)) 
fn core_clone_i8__Clone_clone 0 0 args 1 self [ref r_anon_0 [int 8]] return [int 8] 1 core_clone_Clone_clone 0 1 [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] deref ([ref r_anon_0 [int 8]] var self)) ([int 8] var __result)) 
fn core_clone_i16__Clone_clone 0 0 args 1 self [ref r_anon_0 [int 16]] return [int 16] 1 core_clone_Clone_clone 0 1 [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] deref ([ref r_anon_0 [int 16]] var self)) ([int 16] var __result)) 
fn core_clone_i32__Clone_clone 0 0 args 1 self [ref r_anon_0 [int 32]] return [int 32] 1 core_clone_Clone_clone 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] deref ([ref r_anon_0 [int 32]] var self)) ([int 32] var __result)) 
fn core_clone_i64__Clone_clone 0 0 args 1 self [ref r_anon_0 [int 64]] return [int 64] 1 core_clone_Clone_clone 0 1 [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] deref ([ref r_anon_0 [int 64]] var self)) ([int 64] var __result)) 
fn core_clone_uint__Clone_clone 0 0 args 1 self [ref r_anon_0 [uint 32]] return [uint 32] 1 core_clone_Clone_clone 0 1 [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) ([uint 32] var __result)) 
fn core_clone_u8__Clone_clone 0 0 args 1 self [ref r_anon_0 [uint 8]] return [uint 8] 1 core_clone_Clone_clone 0 1 [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] deref ([ref r_anon_0 [uint 8]] var self)) ([uint 8] var __result)) 
fn core_clone_u16__Clone_clone 0 0 args 1 self [ref r_anon_0 [uint 16]] return [uint 16] 1 core_clone_Clone_clone 0 1 [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] deref ([ref r_anon_0 [uint 16]] var self)) ([uint 16] var __result)) 
fn core_clone_u32__Clone_clone 0 0 args 1 self [ref r_anon_0 [uint 32]] return [uint 32] 1 core_clone_Clone_clone 0 1 [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] deref ([ref r_anon_0 [uint 32]] var self)) ([uint 32] var __result)) 
fn core_clone_u64__Clone_clone 0 0 args 1 self [ref r_anon_0 [uint 64]] return [uint 64] 1 core_clone_Clone_clone 0 1 [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] deref ([ref r_anon_0 [uint 64]] var self)) ([uint 64] var __result)) 
fn core_clone__x28_x29__Clone_clone 0 0 args 1 self [ref r_anon_0 [unit]] return [unit] 1 core_clone_Clone_clone 0 1 [unit] body ([unit] block 1 let __result [unit] ([unit] deref ([ref r_anon_0 [unit]] var self)) ([unit] var __result)) 
fn core_clone_bool__Clone_clone 0 0 args 1 self [ref r_anon_0 [bool]] return [bool] 1 core_clone_Clone_clone 0 1 [bool] body ([bool] block 1 let __result [bool] ([bool] deref ([ref r_anon_0 [bool]] var self)) ([bool] var __result)) 
fn core_default__x28_x29__Default_default 0 0 args 0 return [unit] 1 core_default_Default_default 0 1 [unit] body ([unit] block 1 let __result [unit] ([unit] simple_literal _) ([unit] var __result)) 
fn core_default_bool__Default_default 0 0 args 0 return [bool] 1 core_default_Default_default 0 1 [bool] body ([bool] block 1 let __result [bool] ([bool] simple_literal false) ([bool] var __result)) 
fn core_default_uint__Default_default 0 0 args 0 return [uint 32] 1 core_default_Default_default 0 1 [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] simple_literal 0) ([uint 32] var __result)) 
fn core_default_u8__Default_default 0 0 args 0 return [uint 8] 1 core_default_Default_default 0 1 [uint 8] body ([uint 8] block 1 let __result [uint 8] ([uint 8] simple_literal 0) ([uint 8] var __result)) 
fn core_default_u16__Default_default 0 0 args 0 return [uint 16] 1 core_default_Default_default 0 1 [uint 16] body ([uint 16] block 1 let __result [uint 16] ([uint 16] simple_literal 0) ([uint 16] var __result)) 
fn core_default_u32__Default_default 0 0 args 0 return [uint 32] 1 core_default_Default_default 0 1 [uint 32] body ([uint 32] block 1 let __result [uint 32] ([uint 32] simple_literal 0) ([uint 32] var __result)) 
fn core_default_u64__Default_default 0 0 args 0 return [uint 64] 1 core_default_Default_default 0 1 [uint 64] body ([uint 64] block 1 let __result [uint 64] ([uint 64] simple_literal 0) ([uint 64] var __result)) 
fn core_default_int__Default_default 0 0 args 0 return [int 32] 1 core_default_Default_default 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] simple_literal 0) ([int 32] var __result)) 
fn core_default_i8__Default_default 0 0 args 0 return [int 8] 1 core_default_Default_default 0 1 [int 8] body ([int 8] block 1 let __result [int 8] ([int 8] simple_literal 0) ([int 8] var __result)) 
fn core_default_i16__Default_default 0 0 args 0 return [int 16] 1 core_default_Default_default 0 1 [int 16] body ([int 16] block 1 let __result [int 16] ([int 16] simple_literal 0) ([int 16] var __result)) 
fn core_default_i32__Default_default 0 0 args 0 return [int 32] 1 core_default_Default_default 0 1 [int 32] body ([int 32] block 1 let __result [int 32] ([int 32] simple_literal 0) ([int 32] var __result)) 
fn core_default_i64__Default_default 0 0 args 0 return [int 64] 1 core_default_Default_default 0 1 [int 64] body ([int 64] block 1 let __result [int 64] ([int 64] simple_literal 0) ([int 64] var __result)) 
fn core_any_T__Any_get_type_id 0 1 t_0 args 1 self [ref r_anon_0 [var t_0]] return [adt core_any_TypeId 0 0] 1 core_any_Any_get_type_id 0 1 [var t_0] body ([adt core_any_TypeId 0 0] block 1 let __result [adt core_any_TypeId 0 0] ([adt core_any_TypeId 0 0] call core_any_TypeId_of 0 1 [var t_0] 0) ([adt core_any_TypeId 0 0] var __result)) 
struct core_any_TypeId 0 0 1 t [uint 64] 0 
fn core_any_TypeId_of 0 1 f_0 args 0 return [adt core_any_TypeId 0 0] 0 body ([adt core_any_TypeId 0 0] block 1 let __result_0 [adt core_any_TypeId 0 0] ([adt core_any_TypeId 0 0] struct_literal 1 t ([uint 64] unsafe 1 let __result [uint 64] ([uint 64] call core_intrinsics_type_id 0 1 [var f_0] 0) ([uint 64] var __result))) ([adt core_any_TypeId 0 0] var __result_0)) 
struct core_atomic_AtomicBool 0 0 1 v [adt core_cell_UnsafeCell 0 1 [uint 32]] 0 
struct core_atomic_AtomicIsize 0 0 1 v [adt core_cell_UnsafeCell 0 1 [int 32]] 0 
struct core_atomic_AtomicUsize 0 0 1 v [adt core_cell_UnsafeCell 0 1 [uint 32]] 0 
struct core_atomic_AtomicPtr 0 1 t_0 1 p [adt core_cell_UnsafeCell 0 1 [uint 32]] 0 
enum core_atomic_Ordering 0 0 5 core_atomic_Relaxed 0 core_atomic_Release 0 core_atomic_Acquire 0 core_atomic_AcqRel 0 core_atomic_SeqCst 0 0 
fn core_atomic_AtomicBool_new 0 0 args 1 v [bool] return [adt core_atomic_AtomicBool 0 0] 0 body ([adt core_atomic_AtomicBool 0 0] block 2 let val [uint 32] ([uint 32] match ([int 32] cast ([bool] var v) [int 32]) 2 ([int 32] simple_literal 0) ([uint 32] block 1 let __result [uint 32] ([uint 32] simple_literal 0) ([uint 32] var __result)) ([int 32] wild) ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] simple_literal -1) ([uint 32] var __result_0))) let __result_1 [adt core_atomic_AtomicBool 0 0] ([adt core_atomic_AtomicBool 0 0] struct_literal 1 v ([adt core_cell_UnsafeCell 0 1 [uint 32]] call core_cell_UnsafeCell_new 0 1 [uint 32] 1 ([uint 32] var val))) ([adt core_atomic_AtomicBool 0 0] var __result_1)) 
fn core_atomic_AtomicBool_swap 0 0 args 3 self [ref r_anon_0 [adt core_atomic_AtomicBool 0 0]] val [bool] order [adt core_atomic_Ordering 0 0] return [bool] 0 body ([bool] block 2 let val_0 [uint 32] ([uint 32] match ([int 32] cast ([bool] var val) [int 32]) 2 ([int 32] simple_literal 0) ([uint 32] block 1 let __result [uint 32] ([uint 32] simple_literal 0) ([uint 32] var __result)) ([int 32] wild) ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] simple_literal -1) ([uint 32] var __result_0))) let __result_2 [bool] ([bool] unsafe 1 let __result_1 [bool] ([bool] binop BiGt ([uint 32] call core_atomic_atomic_swap 0 1 [uint 32] 3 ([ptr_mut [uint 32]] call core_cell_UnsafeCell_get 0 1 [uint 32] 1 ([ref r_scope_78169 [adt core_cell_UnsafeCell 0 1 [uint 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [uint 32]] field ([adt core_atomic_AtomicBool 0 0] deref ([ref r_anon_0 [adt core_atomic_AtomicBool 0 0]] var self)) v))) ([uint 32] var val_0) ([adt core_atomic_Ordering 0 0] var order)) ([uint 32] simple_literal 0)) ([bool] var __result_1)) ([bool] var __result_2)) 
fn core_atomic_AtomicBool_compare_and_swap 0 0 args 4 self [ref r_anon_0 [adt core_atomic_AtomicBool 0 0]] old [bool] new [bool] order [adt core_atomic_Ordering 0 0] return [bool] 0 body ([bool] block 3 let old_0 [uint 32] ([uint 32] match ([int 32] cast ([bool] var old) [int 32]) 2 ([int 32] simple_literal 0) ([uint 32] block 1 let __result [uint 32] ([uint 32] simple_literal 0) ([uint 32] var __result)) ([int 32] wild) ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] simple_literal -1) ([uint 32] var __result_0))) let new_0 [uint 32] ([uint 32] match ([int 32] cast ([bool] var new) [int 32]) 2 ([int 32] simple_literal 0) ([uint 32] block 1 let __result_1 [uint 32] ([uint 32] simple_literal 0) ([uint 32] var __result_1)) ([int 32] wild) ([uint 32] block 1 let __result_2 [uint 32] ([uint 32] simple_literal -1) ([uint 32] var __result_2))) let __result_4 [bool] ([bool] unsafe 1 let __result_3 [bool] ([bool] binop BiGt ([uint 32] call core_atomic_atomic_compare_and_swap 0 1 [uint 32] 4 ([ptr_mut [uint 32]] call core_cell_UnsafeCell_get 0 1 [uint 32] 1 ([ref r_scope_78220 [adt core_cell_UnsafeCell 0 1 [uint 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [uint 32]] field ([adt core_atomic_AtomicBool 0 0] deref ([ref r_anon_0 [adt core_atomic_AtomicBool 0 0]] var self)) v))) ([uint 32] var old_0) ([uint 32] var new_0) ([adt core_atomic_Ordering 0 0] var order)) ([uint 32] simple_literal 0)) ([bool] var __result_3)) ([bool] var __result_4)) 
fn core_atomic_AtomicBool_fetch_and 0 0 args 3 self [ref r_anon_0 [adt core_atomic_AtomicBool 0 0]] val [bool] order [adt core_atomic_Ordering 0 0] return [bool] 0 body ([bool] block 2 let val_0 [uint 32] ([uint 32] match ([int 32] cast ([bool] var val) [int 32]) 2 ([int 32] simple_literal 0) ([uint 32] block 1 let __result [uint 32] ([uint 32] simple_literal 0) ([uint 32] var __result)) ([int 32] wild) ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] simple_literal -1) ([uint 32] var __result_0))) let __result_2 [bool] ([bool] unsafe 1 let __result_1 [bool] ([bool] binop BiGt ([uint 32] call core_atomic_atomic_and 0 1 [uint 32] 3 ([ptr_mut [uint 32]] call core_cell_UnsafeCell_get 0 1 [uint 32] 1 ([ref r_scope_78258 [adt core_cell_UnsafeCell 0 1 [uint 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [uint 32]] field ([adt core_atomic_AtomicBool 0 0] deref ([ref r_anon_0 [adt core_atomic_AtomicBool 0 0]] var self)) v))) ([uint 32] var val_0) ([adt core_atomic_Ordering 0 0] var order)) ([uint 32] simple_literal 0)) ([bool] var __result_1)) ([bool] var __result_2)) 
fn core_atomic_AtomicBool_fetch_nand 0 0 args 3 self [ref r_anon_0 [adt core_atomic_AtomicBool 0 0]] val [bool] order [adt core_atomic_Ordering 0 0] return [bool] 0 body ([bool] block 2 let val_0 [uint 32] ([uint 32] match ([int 32] cast ([bool] var val) [int 32]) 2 ([int 32] simple_literal 0) ([uint 32] block 1 let __result [uint 32] ([uint 32] simple_literal 0) ([uint 32] var __result)) ([int 32] wild) ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] simple_literal -1) ([uint 32] var __result_0))) let __result_2 [bool] ([bool] unsafe 1 let __result_1 [bool] ([bool] binop BiGt ([uint 32] call core_atomic_atomic_nand 0 1 [uint 32] 3 ([ptr_mut [uint 32]] call core_cell_UnsafeCell_get 0 1 [uint 32] 1 ([ref r_scope_78295 [adt core_cell_UnsafeCell 0 1 [uint 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [uint 32]] field ([adt core_atomic_AtomicBool 0 0] deref ([ref r_anon_0 [adt core_atomic_AtomicBool 0 0]] var self)) v))) ([uint 32] var val_0) ([adt core_atomic_Ordering 0 0] var order)) ([uint 32] simple_literal 0)) ([bool] var __result_1)) ([bool] var __result_2)) 
fn core_atomic_AtomicBool_fetch_or 0 0 args 3 self [ref r_anon_0 [adt core_atomic_AtomicBool 0 0]] val [bool] order [adt core_atomic_Ordering 0 0] return [bool] 0 body ([bool] block 2 let val_0 [uint 32] ([uint 32] match ([int 32] cast ([bool] var val) [int 32]) 2 ([int 32] simple_literal 0) ([uint 32] block 1 let __result [uint 32] ([uint 32] simple_literal 0) ([uint 32] var __result)) ([int 32] wild) ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] simple_literal -1) ([uint 32] var __result_0))) let __result_2 [bool] ([bool] unsafe 1 let __result_1 [bool] ([bool] binop BiGt ([uint 32] call core_atomic_atomic_or 0 1 [uint 32] 3 ([ptr_mut [uint 32]] call core_cell_UnsafeCell_get 0 1 [uint 32] 1 ([ref r_scope_78332 [adt core_cell_UnsafeCell 0 1 [uint 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [uint 32]] field ([adt core_atomic_AtomicBool 0 0] deref ([ref r_anon_0 [adt core_atomic_AtomicBool 0 0]] var self)) v))) ([uint 32] var val_0) ([adt core_atomic_Ordering 0 0] var order)) ([uint 32] simple_literal 0)) ([bool] var __result_1)) ([bool] var __result_2)) 
fn core_atomic_AtomicBool_fetch_xor 0 0 args 3 self [ref r_anon_0 [adt core_atomic_AtomicBool 0 0]] val [bool] order [adt core_atomic_Ordering 0 0] return [bool] 0 body ([bool] block 2 let val_0 [uint 32] ([uint 32] match ([int 32] cast ([bool] var val) [int 32]) 2 ([int 32] simple_literal 0) ([uint 32] block 1 let __result [uint 32] ([uint 32] simple_literal 0) ([uint 32] var __result)) ([int 32] wild) ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] simple_literal -1) ([uint 32] var __result_0))) let __result_2 [bool] ([bool] unsafe 1 let __result_1 [bool] ([bool] binop BiGt ([uint 32] call core_atomic_atomic_xor 0 1 [uint 32] 3 ([ptr_mut [uint 32]] call core_cell_UnsafeCell_get 0 1 [uint 32] 1 ([ref r_scope_78369 [adt core_cell_UnsafeCell 0 1 [uint 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [uint 32]] field ([adt core_atomic_AtomicBool 0 0] deref ([ref r_anon_0 [adt core_atomic_AtomicBool 0 0]] var self)) v))) ([uint 32] var val_0) ([adt core_atomic_Ordering 0 0] var order)) ([uint 32] simple_literal 0)) ([bool] var __result_1)) ([bool] var __result_2)) 
fn core_atomic_AtomicIsize_new 0 0 args 1 v [int 32] return [adt core_atomic_AtomicIsize 0 0] 0 body ([adt core_atomic_AtomicIsize 0 0] block 1 let __result [adt core_atomic_AtomicIsize 0 0] ([adt core_atomic_AtomicIsize 0 0] struct_literal 1 v ([adt core_cell_UnsafeCell 0 1 [int 32]] call core_cell_UnsafeCell_new 0 1 [int 32] 1 ([int 32] var v))) ([adt core_atomic_AtomicIsize 0 0] var __result)) 
fn core_atomic_AtomicIsize_swap 0 0 args 3 self [ref r_anon_0 [adt core_atomic_AtomicIsize 0 0]] val [int 32] order [adt core_atomic_Ordering 0 0] return [int 32] 0 body ([int 32] block 1 let __result_0 [int 32] ([int 32] unsafe 1 let __result [int 32] ([int 32] call core_atomic_atomic_swap 0 1 [int 32] 3 ([ptr_mut [int 32]] call core_cell_UnsafeCell_get 0 1 [int 32] 1 ([ref r_scope_78456 [adt core_cell_UnsafeCell 0 1 [int 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [int 32]] field ([adt core_atomic_AtomicIsize 0 0] deref ([ref r_anon_0 [adt core_atomic_AtomicIsize 0 0]] var self)) v))) ([int 32] var val) ([adt core_atomic_Ordering 0 0] var order)) ([int 32] var __result)) ([int 32] var __result_0)) 
fn core_atomic_AtomicIsize_compare_and_swap 0 0 args 4 self [ref r_anon_0 [adt core_atomic_AtomicIsize 0 0]] old [int 32] new [int 32] order [adt core_atomic_Ordering 0 0] return [int 32] 0 body ([int 32] block 1 let __result_0 [int 32] ([int 32] unsafe 1 let __result [int 32] ([int 32] call core_atomic_atomic_compare_and_swap 0 1 [int 32] 4 ([ptr_mut [int 32]] call core_cell_UnsafeCell_get 0 1 [int 32] 1 ([ref r_scope_78485 [adt core_cell_UnsafeCell 0 1 [int 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [int 32]] field ([adt core_atomic_AtomicIsize 0 0] deref ([ref r_anon_0 [adt core_atomic_AtomicIsize 0 0]] var self)) v))) ([int 32] var old) ([int 32] var new) ([adt core_atomic_Ordering 0 0] var order)) ([int 32] var __result)) ([int 32] var __result_0)) 
fn core_atomic_AtomicIsize_fetch_add 0 0 args 3 self [ref r_anon_0 [adt core_atomic_AtomicIsize 0 0]] val [int 32] order [adt core_atomic_Ordering 0 0] return [int 32] 0 body ([int 32] block 1 let __result_0 [int 32] ([int 32] unsafe 1 let __result [int 32] ([int 32] call core_atomic_atomic_add 0 1 [int 32] 3 ([ptr_mut [int 32]] call core_cell_UnsafeCell_get 0 1 [int 32] 1 ([ref r_scope_78511 [adt core_cell_UnsafeCell 0 1 [int 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [int 32]] field ([adt core_atomic_AtomicIsize 0 0] deref ([ref r_anon_0 [adt core_atomic_AtomicIsize 0 0]] var self)) v))) ([int 32] var val) ([adt core_atomic_Ordering 0 0] var order)) ([int 32] var __result)) ([int 32] var __result_0)) 
fn core_atomic_AtomicIsize_fetch_sub 0 0 args 3 self [ref r_anon_0 [adt core_atomic_AtomicIsize 0 0]] val [int 32] order [adt core_atomic_Ordering 0 0] return [int 32] 0 body ([int 32] block 1 let __result_0 [int 32] ([int 32] unsafe 1 let __result [int 32] ([int 32] call core_atomic_atomic_sub 0 1 [int 32] 3 ([ptr_mut [int 32]] call core_cell_UnsafeCell_get 0 1 [int 32] 1 ([ref r_scope_78536 [adt core_cell_UnsafeCell 0 1 [int 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [int 32]] field ([adt core_atomic_AtomicIsize 0 0] deref ([ref r_anon_0 [adt core_atomic_AtomicIsize 0 0]] var self)) v))) ([int 32] var val) ([adt core_atomic_Ordering 0 0] var order)) ([int 32] var __result)) ([int 32] var __result_0)) 
fn core_atomic_AtomicIsize_fetch_and 0 0 args 3 self [ref r_anon_0 [adt core_atomic_AtomicIsize 0 0]] val [int 32] order [adt core_atomic_Ordering 0 0] return [int 32] 0 body ([int 32] block 1 let __result_0 [int 32] ([int 32] unsafe 1 let __result [int 32] ([int 32] call core_atomic_atomic_and 0 1 [int 32] 3 ([ptr_mut [int 32]] call core_cell_UnsafeCell_get 0 1 [int 32] 1 ([ref r_scope_78561 [adt core_cell_UnsafeCell 0 1 [int 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [int 32]] field ([adt core_atomic_AtomicIsize 0 0] deref ([ref r_anon_0 [adt core_atomic_AtomicIsize 0 0]] var self)) v))) ([int 32] var val) ([adt core_atomic_Ordering 0 0] var order)) ([int 32] var __result)) ([int 32] var __result_0)) 
fn core_atomic_AtomicIsize_fetch_or 0 0 args 3 self [ref r_anon_0 [adt core_atomic_AtomicIsize 0 0]] val [int 32] order [adt core_atomic_Ordering 0 0] return [int 32] 0 body ([int 32] block 1 let __result_0 [int 32] ([int 32] unsafe 1 let __result [int 32] ([int 32] call core_atomic_atomic_or 0 1 [int 32] 3 ([ptr_mut [int 32]] call core_cell_UnsafeCell_get 0 1 [int 32] 1 ([ref r_scope_78586 [adt core_cell_UnsafeCell 0 1 [int 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [int 32]] field ([adt core_atomic_AtomicIsize 0 0] deref ([ref r_anon_0 [adt core_atomic_AtomicIsize 0 0]] var self)) v))) ([int 32] var val) ([adt core_atomic_Ordering 0 0] var order)) ([int 32] var __result)) ([int 32] var __result_0)) 
fn core_atomic_AtomicIsize_fetch_xor 0 0 args 3 self [ref r_anon_0 [adt core_atomic_AtomicIsize 0 0]] val [int 32] order [adt core_atomic_Ordering 0 0] return [int 32] 0 body ([int 32] block 1 let __result_0 [int 32] ([int 32] unsafe 1 let __result [int 32] ([int 32] call core_atomic_atomic_xor 0 1 [int 32] 3 ([ptr_mut [int 32]] call core_cell_UnsafeCell_get 0 1 [int 32] 1 ([ref r_scope_78611 [adt core_cell_UnsafeCell 0 1 [int 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [int 32]] field ([adt core_atomic_AtomicIsize 0 0] deref ([ref r_anon_0 [adt core_atomic_AtomicIsize 0 0]] var self)) v))) ([int 32] var val) ([adt core_atomic_Ordering 0 0] var order)) ([int 32] var __result)) ([int 32] var __result_0)) 
fn core_atomic_AtomicUsize_new 0 0 args 1 v [uint 32] return [adt core_atomic_AtomicUsize 0 0] 0 body ([adt core_atomic_AtomicUsize 0 0] block 1 let __result [adt core_atomic_AtomicUsize 0 0] ([adt core_atomic_AtomicUsize 0 0] struct_literal 1 v ([adt core_cell_UnsafeCell 0 1 [uint 32]] call core_cell_UnsafeCell_new 0 1 [uint 32] 1 ([uint 32] var v))) ([adt core_atomic_AtomicUsize 0 0] var __result)) 
fn core_atomic_AtomicUsize_swap 0 0 args 3 self [ref r_anon_0 [adt core_atomic_AtomicUsize 0 0]] val [uint 32] order [adt core_atomic_Ordering 0 0] return [uint 32] 0 body ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] unsafe 1 let __result [uint 32] ([uint 32] call core_atomic_atomic_swap 0 1 [uint 32] 3 ([ptr_mut [uint 32]] call core_cell_UnsafeCell_get 0 1 [uint 32] 1 ([ref r_scope_78697 [adt core_cell_UnsafeCell 0 1 [uint 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [uint 32]] field ([adt core_atomic_AtomicUsize 0 0] deref ([ref r_anon_0 [adt core_atomic_AtomicUsize 0 0]] var self)) v))) ([uint 32] var val) ([adt core_atomic_Ordering 0 0] var order)) ([uint 32] var __result)) ([uint 32] var __result_0)) 
fn core_atomic_AtomicUsize_compare_and_swap 0 0 args 4 self [ref r_anon_0 [adt core_atomic_AtomicUsize 0 0]] old [uint 32] new [uint 32] order [adt core_atomic_Ordering 0 0] return [uint 32] 0 body ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] unsafe 1 let __result [uint 32] ([uint 32] call core_atomic_atomic_compare_and_swap 0 1 [uint 32] 4 ([ptr_mut [uint 32]] call core_cell_UnsafeCell_get 0 1 [uint 32] 1 ([ref r_scope_78726 [adt core_cell_UnsafeCell 0 1 [uint 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [uint 32]] field ([adt core_atomic_AtomicUsize 0 0] deref ([ref r_anon_0 [adt core_atomic_AtomicUsize 0 0]] var self)) v))) ([uint 32] var old) ([uint 32] var new) ([adt core_atomic_Ordering 0 0] var order)) ([uint 32] var __result)) ([uint 32] var __result_0)) 
fn core_atomic_AtomicUsize_fetch_add 0 0 args 3 self [ref r_anon_0 [adt core_atomic_AtomicUsize 0 0]] val [uint 32] order [adt core_atomic_Ordering 0 0] return [uint 32] 0 body ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] unsafe 1 let __result [uint 32] ([uint 32] call core_atomic_atomic_add 0 1 [uint 32] 3 ([ptr_mut [uint 32]] call core_cell_UnsafeCell_get 0 1 [uint 32] 1 ([ref r_scope_78752 [adt core_cell_UnsafeCell 0 1 [uint 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [uint 32]] field ([adt core_atomic_AtomicUsize 0 0] deref ([ref r_anon_0 [adt core_atomic_AtomicUsize 0 0]] var self)) v))) ([uint 32] var val) ([adt core_atomic_Ordering 0 0] var order)) ([uint 32] var __result)) ([uint 32] var __result_0)) 
fn core_atomic_AtomicUsize_fetch_sub 0 0 args 3 self [ref r_anon_0 [adt core_atomic_AtomicUsize 0 0]] val [uint 32] order [adt core_atomic_Ordering 0 0] return [uint 32] 0 body ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] unsafe 1 let __result [uint 32] ([uint 32] call core_atomic_atomic_sub 0 1 [uint 32] 3 ([ptr_mut [uint 32]] call core_cell_UnsafeCell_get 0 1 [uint 32] 1 ([ref r_scope_78777 [adt core_cell_UnsafeCell 0 1 [uint 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [uint 32]] field ([adt core_atomic_AtomicUsize 0 0] deref ([ref r_anon_0 [adt core_atomic_AtomicUsize 0 0]] var self)) v))) ([uint 32] var val) ([adt core_atomic_Ordering 0 0] var order)) ([uint 32] var __result)) ([uint 32] var __result_0)) 
fn core_atomic_AtomicUsize_fetch_and 0 0 args 3 self [ref r_anon_0 [adt core_atomic_AtomicUsize 0 0]] val [uint 32] order [adt core_atomic_Ordering 0 0] return [uint 32] 0 body ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] unsafe 1 let __result [uint 32] ([uint 32] call core_atomic_atomic_and 0 1 [uint 32] 3 ([ptr_mut [uint 32]] call core_cell_UnsafeCell_get 0 1 [uint 32] 1 ([ref r_scope_78802 [adt core_cell_UnsafeCell 0 1 [uint 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [uint 32]] field ([adt core_atomic_AtomicUsize 0 0] deref ([ref r_anon_0 [adt core_atomic_AtomicUsize 0 0]] var self)) v))) ([uint 32] var val) ([adt core_atomic_Ordering 0 0] var order)) ([uint 32] var __result)) ([uint 32] var __result_0)) 
fn core_atomic_AtomicUsize_fetch_or 0 0 args 3 self [ref r_anon_0 [adt core_atomic_AtomicUsize 0 0]] val [uint 32] order [adt core_atomic_Ordering 0 0] return [uint 32] 0 body ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] unsafe 1 let __result [uint 32] ([uint 32] call core_atomic_atomic_or 0 1 [uint 32] 3 ([ptr_mut [uint 32]] call core_cell_UnsafeCell_get 0 1 [uint 32] 1 ([ref r_scope_78827 [adt core_cell_UnsafeCell 0 1 [uint 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [uint 32]] field ([adt core_atomic_AtomicUsize 0 0] deref ([ref r_anon_0 [adt core_atomic_AtomicUsize 0 0]] var self)) v))) ([uint 32] var val) ([adt core_atomic_Ordering 0 0] var order)) ([uint 32] var __result)) ([uint 32] var __result_0)) 
fn core_atomic_AtomicUsize_fetch_xor 0 0 args 3 self [ref r_anon_0 [adt core_atomic_AtomicUsize 0 0]] val [uint 32] order [adt core_atomic_Ordering 0 0] return [uint 32] 0 body ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] unsafe 1 let __result [uint 32] ([uint 32] call core_atomic_atomic_xor 0 1 [uint 32] 3 ([ptr_mut [uint 32]] call core_cell_UnsafeCell_get 0 1 [uint 32] 1 ([ref r_scope_78852 [adt core_cell_UnsafeCell 0 1 [uint 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [uint 32]] field ([adt core_atomic_AtomicUsize 0 0] deref ([ref r_anon_0 [adt core_atomic_AtomicUsize 0 0]] var self)) v))) ([uint 32] var val) ([adt core_atomic_Ordering 0 0] var order)) ([uint 32] var __result)) ([uint 32] var __result_0)) 
fn core_atomic_AtomicPtr_new 0 1 t_0 args 1 p [ptr_mut [var t_0]] return [adt core_atomic_AtomicPtr 0 1 [var t_0]] 0 body ([adt core_atomic_AtomicPtr 0 1 [var t_0]] block 1 let __result [adt core_atomic_AtomicPtr 0 1 [var t_0]] ([adt core_atomic_AtomicPtr 0 1 [var t_0]] struct_literal 1 p ([adt core_cell_UnsafeCell 0 1 [uint 32]] call core_cell_UnsafeCell_new 0 1 [uint 32] 1 ([uint 32] cast ([ptr_mut [var t_0]] var p) [uint 32]))) ([adt core_atomic_AtomicPtr 0 1 [var t_0]] var __result)) 
fn core_atomic_AtomicPtr_swap 0 1 t_0 args 3 self [ref r_anon_0 [adt core_atomic_AtomicPtr 0 1 [var t_0]]] ptr [ptr_mut [var t_0]] order [adt core_atomic_Ordering 0 0] return [ptr_mut [var t_0]] 0 body ([ptr_mut [var t_0]] block 1 let __result_0 [ptr_mut [var t_0]] ([ptr_mut [var t_0]] unsafe 1 let __result [ptr_mut [var t_0]] ([ptr_mut [var t_0]] cast ([uint 32] call core_atomic_atomic_swap 0 1 [uint 32] 3 ([ptr_mut [uint 32]] call core_cell_UnsafeCell_get 0 1 [uint 32] 1 ([ref r_scope_78956 [adt core_cell_UnsafeCell 0 1 [uint 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [uint 32]] field ([adt core_atomic_AtomicPtr 0 1 [var t_0]] deref ([ref r_anon_0 [adt core_atomic_AtomicPtr 0 1 [var t_0]]] var self)) p))) ([uint 32] cast ([ptr_mut [var t_0]] var ptr) [uint 32]) ([adt core_atomic_Ordering 0 0] var order)) [ptr_mut [var t_0]]) ([ptr_mut [var t_0]] var __result)) ([ptr_mut [var t_0]] var __result_0)) 
fn core_atomic_AtomicPtr_compare_and_swap 0 1 t_0 args 4 self [ref r_anon_0 [adt core_atomic_AtomicPtr 0 1 [var t_0]]] old [ptr_mut [var t_0]] new [ptr_mut [var t_0]] order [adt core_atomic_Ordering 0 0] return [ptr_mut [var t_0]] 0 body ([ptr_mut [var t_0]] block 1 let __result_0 [ptr_mut [var t_0]] ([ptr_mut [var t_0]] unsafe 1 let __result [ptr_mut [var t_0]] ([ptr_mut [var t_0]] cast ([uint 32] call core_atomic_atomic_compare_and_swap 0 1 [uint 32] 4 ([ptr_mut [uint 32]] call core_cell_UnsafeCell_get 0 1 [uint 32] 1 ([ref r_scope_78995 [adt core_cell_UnsafeCell 0 1 [uint 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [uint 32]] field ([adt core_atomic_AtomicPtr 0 1 [var t_0]] deref ([ref r_anon_0 [adt core_atomic_AtomicPtr 0 1 [var t_0]]] var self)) p))) ([uint 32] cast ([ptr_mut [var t_0]] var old) [uint 32]) ([uint 32] cast ([ptr_mut [var t_0]] var new) [uint 32]) ([adt core_atomic_Ordering 0 0] var order)) [ptr_mut [var t_0]]) ([ptr_mut [var t_0]] var __result)) ([ptr_mut [var t_0]] var __result_0)) 
fn core_atomic_atomic_swap 0 1 f_0 args 3 dst [ptr_mut [var f_0]] val [var f_0] order [adt core_atomic_Ordering 0 0] return [var f_0] 0 body ([var f_0] unsafe 1 let __result [var f_0] ([var f_0] match ([adt core_atomic_Ordering 0 0] var order) 5 ([adt core_atomic_Ordering 0 0] enum core_atomic_Acquire 2 0) ([var f_0] call core_intrinsics_atomic_xchg_acq 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var val)) ([adt core_atomic_Ordering 0 0] enum core_atomic_Release 1 0) ([var f_0] call core_intrinsics_atomic_xchg_rel 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var val)) ([adt core_atomic_Ordering 0 0] enum core_atomic_AcqRel 3 0) ([var f_0] call core_intrinsics_atomic_xchg_acqrel 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var val)) ([adt core_atomic_Ordering 0 0] enum core_atomic_Relaxed 0 0) ([var f_0] call core_intrinsics_atomic_xchg_relaxed 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var val)) ([adt core_atomic_Ordering 0 0] enum core_atomic_SeqCst 4 0) ([var f_0] call core_intrinsics_atomic_xchg 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var val))) ([var f_0] var __result)) 
fn core_atomic_atomic_add 0 1 f_0 args 3 dst [ptr_mut [var f_0]] val [var f_0] order [adt core_atomic_Ordering 0 0] return [var f_0] 0 body ([var f_0] unsafe 1 let __result [var f_0] ([var f_0] match ([adt core_atomic_Ordering 0 0] var order) 5 ([adt core_atomic_Ordering 0 0] enum core_atomic_Acquire 2 0) ([var f_0] call core_intrinsics_atomic_xadd_acq 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var val)) ([adt core_atomic_Ordering 0 0] enum core_atomic_Release 1 0) ([var f_0] call core_intrinsics_atomic_xadd_rel 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var val)) ([adt core_atomic_Ordering 0 0] enum core_atomic_AcqRel 3 0) ([var f_0] call core_intrinsics_atomic_xadd_acqrel 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var val)) ([adt core_atomic_Ordering 0 0] enum core_atomic_Relaxed 0 0) ([var f_0] call core_intrinsics_atomic_xadd_relaxed 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var val)) ([adt core_atomic_Ordering 0 0] enum core_atomic_SeqCst 4 0) ([var f_0] call core_intrinsics_atomic_xadd 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var val))) ([var f_0] var __result)) 
fn core_atomic_atomic_sub 0 1 f_0 args 3 dst [ptr_mut [var f_0]] val [var f_0] order [adt core_atomic_Ordering 0 0] return [var f_0] 0 body ([var f_0] unsafe 1 let __result [var f_0] ([var f_0] match ([adt core_atomic_Ordering 0 0] var order) 5 ([adt core_atomic_Ordering 0 0] enum core_atomic_Acquire 2 0) ([var f_0] call core_intrinsics_atomic_xsub_acq 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var val)) ([adt core_atomic_Ordering 0 0] enum core_atomic_Release 1 0) ([var f_0] call core_intrinsics_atomic_xsub_rel 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var val)) ([adt core_atomic_Ordering 0 0] enum core_atomic_AcqRel 3 0) ([var f_0] call core_intrinsics_atomic_xsub_acqrel 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var val)) ([adt core_atomic_Ordering 0 0] enum core_atomic_Relaxed 0 0) ([var f_0] call core_intrinsics_atomic_xsub_relaxed 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var val)) ([adt core_atomic_Ordering 0 0] enum core_atomic_SeqCst 4 0) ([var f_0] call core_intrinsics_atomic_xsub 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var val))) ([var f_0] var __result)) 
fn core_atomic_atomic_compare_and_swap 0 1 f_0 args 4 dst [ptr_mut [var f_0]] old [var f_0] new [var f_0] order [adt core_atomic_Ordering 0 0] return [var f_0] 0 body ([var f_0] unsafe 1 let __result [var f_0] ([var f_0] match ([adt core_atomic_Ordering 0 0] var order) 5 ([adt core_atomic_Ordering 0 0] enum core_atomic_Acquire 2 0) ([var f_0] call core_intrinsics_atomic_cxchg_acq 0 1 [var f_0] 3 ([ptr_mut [var f_0]] var dst) ([var f_0] var old) ([var f_0] var new)) ([adt core_atomic_Ordering 0 0] enum core_atomic_Release 1 0) ([var f_0] call core_intrinsics_atomic_cxchg_rel 0 1 [var f_0] 3 ([ptr_mut [var f_0]] var dst) ([var f_0] var old) ([var f_0] var new)) ([adt core_atomic_Ordering 0 0] enum core_atomic_AcqRel 3 0) ([var f_0] call core_intrinsics_atomic_cxchg_acqrel 0 1 [var f_0] 3 ([ptr_mut [var f_0]] var dst) ([var f_0] var old) ([var f_0] var new)) ([adt core_atomic_Ordering 0 0] enum core_atomic_Relaxed 0 0) ([var f_0] call core_intrinsics_atomic_cxchg_relaxed 0 1 [var f_0] 3 ([ptr_mut [var f_0]] var dst) ([var f_0] var old) ([var f_0] var new)) ([adt core_atomic_Ordering 0 0] enum core_atomic_SeqCst 4 0) ([var f_0] call core_intrinsics_atomic_cxchg 0 1 [var f_0] 3 ([ptr_mut [var f_0]] var dst) ([var f_0] var old) ([var f_0] var new))) ([var f_0] var __result)) 
fn core_atomic_atomic_and 0 1 f_0 args 3 dst [ptr_mut [var f_0]] val [var f_0] order [adt core_atomic_Ordering 0 0] return [var f_0] 0 body ([var f_0] unsafe 1 let __result [var f_0] ([var f_0] match ([adt core_atomic_Ordering 0 0] var order) 5 ([adt core_atomic_Ordering 0 0] enum core_atomic_Acquire 2 0) ([var f_0] call core_intrinsics_atomic_and_acq 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var val)) ([adt core_atomic_Ordering 0 0] enum core_atomic_Release 1 0) ([var f_0] call core_intrinsics_atomic_and_rel 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var val)) ([adt core_atomic_Ordering 0 0] enum core_atomic_AcqRel 3 0) ([var f_0] call core_intrinsics_atomic_and_acqrel 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var val)) ([adt core_atomic_Ordering 0 0] enum core_atomic_Relaxed 0 0) ([var f_0] call core_intrinsics_atomic_and_relaxed 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var val)) ([adt core_atomic_Ordering 0 0] enum core_atomic_SeqCst 4 0) ([var f_0] call core_intrinsics_atomic_and 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var val))) ([var f_0] var __result)) 
fn core_atomic_atomic_nand 0 1 f_0 args 3 dst [ptr_mut [var f_0]] val [var f_0] order [adt core_atomic_Ordering 0 0] return [var f_0] 0 body ([var f_0] unsafe 1 let __result [var f_0] ([var f_0] match ([adt core_atomic_Ordering 0 0] var order) 5 ([adt core_atomic_Ordering 0 0] enum core_atomic_Acquire 2 0) ([var f_0] call core_intrinsics_atomic_nand_acq 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var val)) ([adt core_atomic_Ordering 0 0] enum core_atomic_Release 1 0) ([var f_0] call core_intrinsics_atomic_nand_rel 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var val)) ([adt core_atomic_Ordering 0 0] enum core_atomic_AcqRel 3 0) ([var f_0] call core_intrinsics_atomic_nand_acqrel 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var val)) ([adt core_atomic_Ordering 0 0] enum core_atomic_Relaxed 0 0) ([var f_0] call core_intrinsics_atomic_nand_relaxed 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var val)) ([adt core_atomic_Ordering 0 0] enum core_atomic_SeqCst 4 0) ([var f_0] call core_intrinsics_atomic_nand 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var val))) ([var f_0] var __result)) 
fn core_atomic_atomic_or 0 1 f_0 args 3 dst [ptr_mut [var f_0]] val [var f_0] order [adt core_atomic_Ordering 0 0] return [var f_0] 0 body ([var f_0] unsafe 1 let __result [var f_0] ([var f_0] match ([adt core_atomic_Ordering 0 0] var order) 5 ([adt core_atomic_Ordering 0 0] enum core_atomic_Acquire 2 0) ([var f_0] call core_intrinsics_atomic_or_acq 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var val)) ([adt core_atomic_Ordering 0 0] enum core_atomic_Release 1 0) ([var f_0] call core_intrinsics_atomic_or_rel 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var val)) ([adt core_atomic_Ordering 0 0] enum core_atomic_AcqRel 3 0) ([var f_0] call core_intrinsics_atomic_or_acqrel 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var val)) ([adt core_atomic_Ordering 0 0] enum core_atomic_Relaxed 0 0) ([var f_0] call core_intrinsics_atomic_or_relaxed 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var val)) ([adt core_atomic_Ordering 0 0] enum core_atomic_SeqCst 4 0) ([var f_0] call core_intrinsics_atomic_or 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var val))) ([var f_0] var __result)) 
fn core_atomic_atomic_xor 0 1 f_0 args 3 dst [ptr_mut [var f_0]] val [var f_0] order [adt core_atomic_Ordering 0 0] return [var f_0] 0 body ([var f_0] unsafe 1 let __result [var f_0] ([var f_0] match ([adt core_atomic_Ordering 0 0] var order) 5 ([adt core_atomic_Ordering 0 0] enum core_atomic_Acquire 2 0) ([var f_0] call core_intrinsics_atomic_xor_acq 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var val)) ([adt core_atomic_Ordering 0 0] enum core_atomic_Release 1 0) ([var f_0] call core_intrinsics_atomic_xor_rel 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var val)) ([adt core_atomic_Ordering 0 0] enum core_atomic_AcqRel 3 0) ([var f_0] call core_intrinsics_atomic_xor_acqrel 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var val)) ([adt core_atomic_Ordering 0 0] enum core_atomic_Relaxed 0 0) ([var f_0] call core_intrinsics_atomic_xor_relaxed 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var val)) ([adt core_atomic_Ordering 0 0] enum core_atomic_SeqCst 4 0) ([var f_0] call core_intrinsics_atomic_xor 0 1 [var f_0] 2 ([ptr_mut [var f_0]] var dst) ([var f_0] var val))) ([var f_0] var __result)) 
struct core_atomic_AtomicInt 0 0 1 v [adt core_cell_UnsafeCell 0 1 [int 32]] 0 
struct core_atomic_AtomicUint 0 0 1 v [adt core_cell_UnsafeCell 0 1 [uint 32]] 0 
fn core_atomic_AtomicInt_new 0 0 args 1 v [int 32] return [adt core_atomic_AtomicInt 0 0] 0 body ([adt core_atomic_AtomicInt 0 0] block 1 let __result [adt core_atomic_AtomicInt 0 0] ([adt core_atomic_AtomicInt 0 0] struct_literal 1 v ([adt core_cell_UnsafeCell 0 1 [int 32]] call core_cell_UnsafeCell_new 0 1 [int 32] 1 ([int 32] var v))) ([adt core_atomic_AtomicInt 0 0] var __result)) 
fn core_atomic_AtomicInt_swap 0 0 args 3 self [ref r_anon_0 [adt core_atomic_AtomicInt 0 0]] val [int 32] order [adt core_atomic_Ordering 0 0] return [int 32] 0 body ([int 32] block 1 let __result_0 [int 32] ([int 32] unsafe 1 let __result [int 32] ([int 32] call core_atomic_atomic_swap 0 1 [int 32] 3 ([ptr_mut [int 32]] call core_cell_UnsafeCell_get 0 1 [int 32] 1 ([ref r_scope_79713 [adt core_cell_UnsafeCell 0 1 [int 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [int 32]] field ([adt core_atomic_AtomicInt 0 0] deref ([ref r_anon_0 [adt core_atomic_AtomicInt 0 0]] var self)) v))) ([int 32] var val) ([adt core_atomic_Ordering 0 0] var order)) ([int 32] var __result)) ([int 32] var __result_0)) 
fn core_atomic_AtomicInt_compare_and_swap 0 0 args 4 self [ref r_anon_0 [adt core_atomic_AtomicInt 0 0]] old [int 32] new [int 32] order [adt core_atomic_Ordering 0 0] return [int 32] 0 body ([int 32] block 1 let __result_0 [int 32] ([int 32] unsafe 1 let __result [int 32] ([int 32] call core_atomic_atomic_compare_and_swap 0 1 [int 32] 4 ([ptr_mut [int 32]] call core_cell_UnsafeCell_get 0 1 [int 32] 1 ([ref r_scope_79742 [adt core_cell_UnsafeCell 0 1 [int 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [int 32]] field ([adt core_atomic_AtomicInt 0 0] deref ([ref r_anon_0 [adt core_atomic_AtomicInt 0 0]] var self)) v))) ([int 32] var old) ([int 32] var new) ([adt core_atomic_Ordering 0 0] var order)) ([int 32] var __result)) ([int 32] var __result_0)) 
fn core_atomic_AtomicInt_fetch_add 0 0 args 3 self [ref r_anon_0 [adt core_atomic_AtomicInt 0 0]] val [int 32] order [adt core_atomic_Ordering 0 0] return [int 32] 0 body ([int 32] block 1 let __result_0 [int 32] ([int 32] unsafe 1 let __result [int 32] ([int 32] call core_atomic_atomic_add 0 1 [int 32] 3 ([ptr_mut [int 32]] call core_cell_UnsafeCell_get 0 1 [int 32] 1 ([ref r_scope_79768 [adt core_cell_UnsafeCell 0 1 [int 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [int 32]] field ([adt core_atomic_AtomicInt 0 0] deref ([ref r_anon_0 [adt core_atomic_AtomicInt 0 0]] var self)) v))) ([int 32] var val) ([adt core_atomic_Ordering 0 0] var order)) ([int 32] var __result)) ([int 32] var __result_0)) 
fn core_atomic_AtomicInt_fetch_sub 0 0 args 3 self [ref r_anon_0 [adt core_atomic_AtomicInt 0 0]] val [int 32] order [adt core_atomic_Ordering 0 0] return [int 32] 0 body ([int 32] block 1 let __result_0 [int 32] ([int 32] unsafe 1 let __result [int 32] ([int 32] call core_atomic_atomic_sub 0 1 [int 32] 3 ([ptr_mut [int 32]] call core_cell_UnsafeCell_get 0 1 [int 32] 1 ([ref r_scope_79793 [adt core_cell_UnsafeCell 0 1 [int 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [int 32]] field ([adt core_atomic_AtomicInt 0 0] deref ([ref r_anon_0 [adt core_atomic_AtomicInt 0 0]] var self)) v))) ([int 32] var val) ([adt core_atomic_Ordering 0 0] var order)) ([int 32] var __result)) ([int 32] var __result_0)) 
fn core_atomic_AtomicInt_fetch_and 0 0 args 3 self [ref r_anon_0 [adt core_atomic_AtomicInt 0 0]] val [int 32] order [adt core_atomic_Ordering 0 0] return [int 32] 0 body ([int 32] block 1 let __result_0 [int 32] ([int 32] unsafe 1 let __result [int 32] ([int 32] call core_atomic_atomic_and 0 1 [int 32] 3 ([ptr_mut [int 32]] call core_cell_UnsafeCell_get 0 1 [int 32] 1 ([ref r_scope_79818 [adt core_cell_UnsafeCell 0 1 [int 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [int 32]] field ([adt core_atomic_AtomicInt 0 0] deref ([ref r_anon_0 [adt core_atomic_AtomicInt 0 0]] var self)) v))) ([int 32] var val) ([adt core_atomic_Ordering 0 0] var order)) ([int 32] var __result)) ([int 32] var __result_0)) 
fn core_atomic_AtomicInt_fetch_or 0 0 args 3 self [ref r_anon_0 [adt core_atomic_AtomicInt 0 0]] val [int 32] order [adt core_atomic_Ordering 0 0] return [int 32] 0 body ([int 32] block 1 let __result_0 [int 32] ([int 32] unsafe 1 let __result [int 32] ([int 32] call core_atomic_atomic_or 0 1 [int 32] 3 ([ptr_mut [int 32]] call core_cell_UnsafeCell_get 0 1 [int 32] 1 ([ref r_scope_79843 [adt core_cell_UnsafeCell 0 1 [int 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [int 32]] field ([adt core_atomic_AtomicInt 0 0] deref ([ref r_anon_0 [adt core_atomic_AtomicInt 0 0]] var self)) v))) ([int 32] var val) ([adt core_atomic_Ordering 0 0] var order)) ([int 32] var __result)) ([int 32] var __result_0)) 
fn core_atomic_AtomicInt_fetch_xor 0 0 args 3 self [ref r_anon_0 [adt core_atomic_AtomicInt 0 0]] val [int 32] order [adt core_atomic_Ordering 0 0] return [int 32] 0 body ([int 32] block 1 let __result_0 [int 32] ([int 32] unsafe 1 let __result [int 32] ([int 32] call core_atomic_atomic_xor 0 1 [int 32] 3 ([ptr_mut [int 32]] call core_cell_UnsafeCell_get 0 1 [int 32] 1 ([ref r_scope_79868 [adt core_cell_UnsafeCell 0 1 [int 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [int 32]] field ([adt core_atomic_AtomicInt 0 0] deref ([ref r_anon_0 [adt core_atomic_AtomicInt 0 0]] var self)) v))) ([int 32] var val) ([adt core_atomic_Ordering 0 0] var order)) ([int 32] var __result)) ([int 32] var __result_0)) 
fn core_atomic_AtomicUint_new 0 0 args 1 v [uint 32] return [adt core_atomic_AtomicUint 0 0] 0 body ([adt core_atomic_AtomicUint 0 0] block 1 let __result [adt core_atomic_AtomicUint 0 0] ([adt core_atomic_AtomicUint 0 0] struct_literal 1 v ([adt core_cell_UnsafeCell 0 1 [uint 32]] call core_cell_UnsafeCell_new 0 1 [uint 32] 1 ([uint 32] var v))) ([adt core_atomic_AtomicUint 0 0] var __result)) 
fn core_atomic_AtomicUint_swap 0 0 args 3 self [ref r_anon_0 [adt core_atomic_AtomicUint 0 0]] val [uint 32] order [adt core_atomic_Ordering 0 0] return [uint 32] 0 body ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] unsafe 1 let __result [uint 32] ([uint 32] call core_atomic_atomic_swap 0 1 [uint 32] 3 ([ptr_mut [uint 32]] call core_cell_UnsafeCell_get 0 1 [uint 32] 1 ([ref r_scope_79954 [adt core_cell_UnsafeCell 0 1 [uint 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [uint 32]] field ([adt core_atomic_AtomicUint 0 0] deref ([ref r_anon_0 [adt core_atomic_AtomicUint 0 0]] var self)) v))) ([uint 32] var val) ([adt core_atomic_Ordering 0 0] var order)) ([uint 32] var __result)) ([uint 32] var __result_0)) 
fn core_atomic_AtomicUint_compare_and_swap 0 0 args 4 self [ref r_anon_0 [adt core_atomic_AtomicUint 0 0]] old [uint 32] new [uint 32] order [adt core_atomic_Ordering 0 0] return [uint 32] 0 body ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] unsafe 1 let __result [uint 32] ([uint 32] call core_atomic_atomic_compare_and_swap 0 1 [uint 32] 4 ([ptr_mut [uint 32]] call core_cell_UnsafeCell_get 0 1 [uint 32] 1 ([ref r_scope_79983 [adt core_cell_UnsafeCell 0 1 [uint 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [uint 32]] field ([adt core_atomic_AtomicUint 0 0] deref ([ref r_anon_0 [adt core_atomic_AtomicUint 0 0]] var self)) v))) ([uint 32] var old) ([uint 32] var new) ([adt core_atomic_Ordering 0 0] var order)) ([uint 32] var __result)) ([uint 32] var __result_0)) 
fn core_atomic_AtomicUint_fetch_add 0 0 args 3 self [ref r_anon_0 [adt core_atomic_AtomicUint 0 0]] val [uint 32] order [adt core_atomic_Ordering 0 0] return [uint 32] 0 body ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] unsafe 1 let __result [uint 32] ([uint 32] call core_atomic_atomic_add 0 1 [uint 32] 3 ([ptr_mut [uint 32]] call core_cell_UnsafeCell_get 0 1 [uint 32] 1 ([ref r_scope_80009 [adt core_cell_UnsafeCell 0 1 [uint 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [uint 32]] field ([adt core_atomic_AtomicUint 0 0] deref ([ref r_anon_0 [adt core_atomic_AtomicUint 0 0]] var self)) v))) ([uint 32] var val) ([adt core_atomic_Ordering 0 0] var order)) ([uint 32] var __result)) ([uint 32] var __result_0)) 
fn core_atomic_AtomicUint_fetch_sub 0 0 args 3 self [ref r_anon_0 [adt core_atomic_AtomicUint 0 0]] val [uint 32] order [adt core_atomic_Ordering 0 0] return [uint 32] 0 body ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] unsafe 1 let __result [uint 32] ([uint 32] call core_atomic_atomic_sub 0 1 [uint 32] 3 ([ptr_mut [uint 32]] call core_cell_UnsafeCell_get 0 1 [uint 32] 1 ([ref r_scope_80034 [adt core_cell_UnsafeCell 0 1 [uint 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [uint 32]] field ([adt core_atomic_AtomicUint 0 0] deref ([ref r_anon_0 [adt core_atomic_AtomicUint 0 0]] var self)) v))) ([uint 32] var val) ([adt core_atomic_Ordering 0 0] var order)) ([uint 32] var __result)) ([uint 32] var __result_0)) 
fn core_atomic_AtomicUint_fetch_and 0 0 args 3 self [ref r_anon_0 [adt core_atomic_AtomicUint 0 0]] val [uint 32] order [adt core_atomic_Ordering 0 0] return [uint 32] 0 body ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] unsafe 1 let __result [uint 32] ([uint 32] call core_atomic_atomic_and 0 1 [uint 32] 3 ([ptr_mut [uint 32]] call core_cell_UnsafeCell_get 0 1 [uint 32] 1 ([ref r_scope_80059 [adt core_cell_UnsafeCell 0 1 [uint 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [uint 32]] field ([adt core_atomic_AtomicUint 0 0] deref ([ref r_anon_0 [adt core_atomic_AtomicUint 0 0]] var self)) v))) ([uint 32] var val) ([adt core_atomic_Ordering 0 0] var order)) ([uint 32] var __result)) ([uint 32] var __result_0)) 
fn core_atomic_AtomicUint_fetch_or 0 0 args 3 self [ref r_anon_0 [adt core_atomic_AtomicUint 0 0]] val [uint 32] order [adt core_atomic_Ordering 0 0] return [uint 32] 0 body ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] unsafe 1 let __result [uint 32] ([uint 32] call core_atomic_atomic_or 0 1 [uint 32] 3 ([ptr_mut [uint 32]] call core_cell_UnsafeCell_get 0 1 [uint 32] 1 ([ref r_scope_80084 [adt core_cell_UnsafeCell 0 1 [uint 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [uint 32]] field ([adt core_atomic_AtomicUint 0 0] deref ([ref r_anon_0 [adt core_atomic_AtomicUint 0 0]] var self)) v))) ([uint 32] var val) ([adt core_atomic_Ordering 0 0] var order)) ([uint 32] var __result)) ([uint 32] var __result_0)) 
fn core_atomic_AtomicUint_fetch_xor 0 0 args 3 self [ref r_anon_0 [adt core_atomic_AtomicUint 0 0]] val [uint 32] order [adt core_atomic_Ordering 0 0] return [uint 32] 0 body ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] unsafe 1 let __result [uint 32] ([uint 32] call core_atomic_atomic_xor 0 1 [uint 32] 3 ([ptr_mut [uint 32]] call core_cell_UnsafeCell_get 0 1 [uint 32] 1 ([ref r_scope_80109 [adt core_cell_UnsafeCell 0 1 [uint 32]]] addr_of ([adt core_cell_UnsafeCell 0 1 [uint 32]] field ([adt core_atomic_AtomicUint 0 0] deref ([ref r_anon_0 [adt core_atomic_AtomicUint 0 0]] var self)) v))) ([uint 32] var val) ([adt core_atomic_Ordering 0 0] var order)) ([uint 32] var __result)) ([uint 32] var __result_0)) 
fn core_borrow_T__BorrowFrom_borrow_from 0 1 t_0 args 1 owned [ref r_anon_0 [var t_0]] return [ref r_anon_0 [var t_0]] 1 core_borrow_BorrowFrom_borrow_from 0 2 [var t_0] [var t_0] body ([ref r_anon_0 [var t_0]] block 1 let __result [ref r_anon_0 [var t_0]] ([ref r_anon_0 [var t_0]] var owned) ([ref r_anon_0 [var t_0]] var __result)) 
fn core_borrow_T__BorrowFromMut_borrow_from_mut 0 1 t_0 args 1 owned [ref_mut r_anon_0 [var t_0]] return [ref_mut r_anon_0 [var t_0]] 1 core_borrow_BorrowFromMut_borrow_from_mut 0 2 [var t_0] [var t_0] body ([ref_mut r_anon_0 [var t_0]] block 1 let __result [ref_mut r_anon_0 [var t_0]] ([ref_mut r_anon_0 [var t_0]] var owned) ([ref_mut r_anon_0 [var t_0]] var __result)) 
fn core_borrow_T__BorrowFrom_borrow_from 2 r_named_0_80231 r_named_0_80205 1 t_0 args 1 owned [ref r_named_0_80205 [ref r_named_0_80231 [var t_0]]] return [ref r_named_0_80205 [var t_0]] 1 core_borrow_BorrowFrom_borrow_from 0 2 [ref r_named_0_80231 [var t_0]] [var t_0] body ([ref r_named_0_80231 [var t_0]] block 1 let __result [ref r_named_0_80231 [var t_0]] ([ref r_named_0_80231 [var t_0]] deref ([ref r_named_0_80205 [ref r_named_0_80231 [var t_0]]] var owned)) ([ref r_named_0_80231 [var t_0]] var __result)) 
fn core_borrow_T__BorrowFrom_borrow_from 2 r_named_0_80263 r_named_0_80237 1 t_0 args 1 owned [ref r_named_0_80237 [ref_mut r_named_0_80263 [var t_0]]] return [ref r_named_0_80237 [var t_0]] 1 core_borrow_BorrowFrom_borrow_from 0 2 [ref_mut r_named_0_80263 [var t_0]] [var t_0] body ([ref_mut r_named_0_80263 [var t_0]] block 1 let __result [ref_mut r_named_0_80263 [var t_0]] ([ref_mut r_named_0_80263 [var t_0]] deref ([ref r_named_0_80237 [ref_mut r_named_0_80263 [var t_0]]] var owned)) ([ref_mut r_named_0_80263 [var t_0]] var __result)) 
fn core_borrow_T__BorrowFromMut_borrow_from_mut 2 r_named_0_80295 r_named_0_80269 1 t_0 args 1 owned [ref_mut r_named_0_80269 [ref_mut r_named_0_80295 [var t_0]]] return [ref_mut r_named_0_80269 [var t_0]] 1 core_borrow_BorrowFromMut_borrow_from_mut 0 2 [ref_mut r_named_0_80295 [var t_0]] [var t_0] body ([ref_mut r_named_0_80295 [var t_0]] block 1 let __result [ref_mut r_named_0_80295 [var t_0]] ([ref_mut r_named_0_80295 [var t_0]] deref ([ref_mut r_named_0_80269 [ref_mut r_named_0_80295 [var t_0]]] var owned)) ([ref_mut r_named_0_80295 [var t_0]] var __result)) 
fn core_borrow_B__BorrowFrom_borrow_from 2 r_named_0_80334 r_named_0_80301 2 t_0 t_1 args 1 owned [ref r_named_0_80301 [adt core_borrow_Cow 1 r_named_0_80334 2 [var t_0] [var t_1]]] return [ref r_named_0_80301 [var t_1]] 1 core_borrow_BorrowFrom_borrow_from 0 2 [adt core_borrow_Cow 1 r_named_0_80334 2 [var t_0] [var t_1]] [var t_1] body ([ref r_named_0_80301 [var t_1]] block 1 let __result_0 [ref r_named_0_80301 [var t_1]] ([ref r_named_0_80301 [var t_1]] block 3 let lifttemp_0 [var t_1] ([var t_1] call core_ops_Deref_deref 0 1 [adt core_borrow_Cow 1 r_named_0_80334 2 [var t_0] [var t_1]] 1 ([ref r_named_0_80301 [adt core_borrow_Cow 1 r_named_0_80334 2 [var t_0] [var t_1]]] var owned)) let __result [ref r_named_0_80301 [var t_1]] ([ref r_named_0_80301 [var t_1]] addr_of ([var t_1] var lifttemp_0)) expr ([unit] call drop_glue 0 1 [var t_1] 1 ([ptr_mut [var t_1]] addr_of ([var t_1] var lifttemp_0))) ([ref r_named_0_80301 [var t_1]] var __result)) ([ref r_named_0_80301 [var t_1]] var __result_0)) 
fn core_borrow_Cow__IntoCow_into_cow 1 r_named_0_80385 2 t_0 t_1 args 1 self [adt core_borrow_Cow 1 r_named_0_80385 2 [var t_0] [var t_1]] return [adt core_borrow_Cow 1 r_named_0_80385 2 [var t_0] [var t_1]] 1 core_borrow_IntoCow_into_cow 1 r_named_0_80385 3 [var t_0] [var t_1] [adt core_borrow_Cow 1 r_named_0_80385 2 [var t_0] [var t_1]] body ([adt core_borrow_Cow 1 r_named_0_80385 2 [var t_0] [var t_1]] block 1 let __result [adt core_borrow_Cow 1 r_named_0_80385 2 [var t_0] [var t_1]] ([adt core_borrow_Cow 1 r_named_0_80385 2 [var t_0] [var t_1]] var self) ([adt core_borrow_Cow 1 r_named_0_80385 2 [var t_0] [var t_1]] var __result)) 
fn core_borrow_T__ToOwned_to_owned 0 1 t_0 args 1 self [ref r_anon_0 [var t_0]] return [var t_0] 1 core_borrow_ToOwned_to_owned 0 2 [var t_0] [var t_0] body ([var t_0] block 1 let __result [var t_0] ([var t_0] call core_clone_Clone_clone 0 1 [var t_0] 1 ([ref r_anon_0 [var t_0]] var self)) ([var t_0] var __result)) 
enum core_borrow_Cow 1 r_named_0_80448 2 t_0 t_1 2 core_borrow_Borrowed 1 [ref r_named_0_80448 [var t_1]] core_borrow_Owned 1 [var t_0] 0 
fn core_borrow_Cow__Clone_clone 1 r_named_0_80498 2 t_0 t_1 args 1 self [ref r_anon_0 [adt core_borrow_Cow 1 r_named_0_80498 2 [var t_0] [var t_1]]] return [adt core_borrow_Cow 1 r_named_0_80498 2 [var t_0] [var t_1]] 1 core_clone_Clone_clone 0 1 [adt core_borrow_Cow 1 r_named_0_80498 2 [var t_0] [var t_1]] body ([adt core_borrow_Cow 1 r_named_0_80498 2 [var t_0] [var t_1]] block 1 let __result_0 [adt core_borrow_Cow 1 r_named_0_80498 2 [var t_0] [var t_1]] ([adt core_borrow_Cow 1 r_named_0_80498 2 [var t_0] [var t_1]] match ([adt core_borrow_Cow 1 r_named_0_80498 2 [var t_0] [var t_1]] deref ([ref r_anon_0 [adt core_borrow_Cow 1 r_named_0_80498 2 [var t_0] [var t_1]]] var self)) 2 ([adt core_borrow_Cow 1 r_named_0_80498 2 [var t_0] [var t_1]] enum core_borrow_Borrowed 0 1 ([ref r_named_0_80498 [var t_1]] var b)) ([adt core_borrow_Cow 1 r_named_0_80498 2 [var t_0] [var t_1]] enum_literal core_borrow_Borrowed 0 1 ([ref r_named_0_80498 [var t_1]] var b)) ([adt core_borrow_Cow 1 r_named_0_80498 2 [var t_0] [var t_1]] enum core_borrow_Owned 1 1 ([ref r_scope_80469 [var t_0]] var o)) ([adt core_borrow_Cow 1 r_named_0_80498 2 [var t_0] [var t_1]] block 2 let b_0 [ref r_scope_80480 [var t_1]] ([ref r_scope_80480 [var t_1]] call core_borrow_BorrowFrom_borrow_from 0 2 [var t_0] [var t_1] 1 ([ref r_scope_80469 [var t_0]] var o)) let __result [adt core_borrow_Cow 1 r_named_0_80498 2 [var t_0] [var t_1]] ([adt core_borrow_Cow 1 r_named_0_80498 2 [var t_0] [var t_1]] enum_literal core_borrow_Owned 1 1 ([var t_0] call core_borrow_ToOwned_to_owned 0 2 [var t_0] [var t_1] 1 ([ref r_scope_80480 [var t_1]] var b_0))) ([adt core_borrow_Cow 1 r_named_0_80498 2 [var t_0] [var t_1]] var __result))) ([adt core_borrow_Cow 1 r_named_0_80498 2 [var t_0] [var t_1]] var __result_0)) 
fn core_borrow_Cow_to_mut 1 r_named_0_80594 2 t_0 t_1 args 1 self [ref_mut r_anon_0 [adt core_borrow_Cow 1 r_named_0_80594 2 [var t_0] [var t_1]]] return [ref_mut r_anon_0 [var t_0]] 0 body ([ref_mut r_anon_0 [var t_0]] block 1 let __result_0 [ref_mut r_anon_0 [var t_0]] ([ref_mut r_anon_0 [var t_0]] match ([adt core_borrow_Cow 1 r_named_0_80594 2 [var t_0] [var t_1]] deref ([ref_mut r_anon_0 [adt core_borrow_Cow 1 r_named_0_80594 2 [var t_0] [var t_1]]] var self)) 2 ([adt core_borrow_Cow 1 r_scope_80522 2 [var t_0] [var t_1]] enum core_borrow_Borrowed 0 1 ([ref r_scope_80522 [var t_1]] var borrowed)) ([ref_mut r_anon_0 [var t_0]] block 2 expr ([unit] assign ([adt core_borrow_Cow 1 r_named_0_80594 2 [var t_0] [var t_1]] deref ([ref_mut r_anon_0 [adt core_borrow_Cow 1 r_named_0_80594 2 [var t_0] [var t_1]]] var self)) ([adt core_borrow_Cow 1 r_named_0_80594 2 [var t_0] [var t_1]] enum_literal core_borrow_Owned 1 1 ([var t_0] call core_borrow_ToOwned_to_owned 0 2 [var t_0] [var t_1] 1 ([ref r_scope_80522 [var t_1]] var borrowed)))) let __result [ref_mut r_anon_0 [var t_0]] ([ref_mut r_anon_0 [var t_0]] call core_borrow_Cow_to_mut 1 r_named_0_80594 2 [var t_0] [var t_1] 1 ([ref_mut r_anon_0 [adt core_borrow_Cow 1 r_named_0_80594 2 [var t_0] [var t_1]]] var self)) ([ref_mut r_anon_0 [var t_0]] var __result)) ([adt core_borrow_Cow 1 r_scope_80522 2 [var t_0] [var t_1]] enum core_borrow_Owned 1 1 ([ref_mut r_anon_0 [var t_0]] var owned)) ([ref_mut r_anon_0 [var t_0]] var owned)) ([ref_mut r_anon_0 [var t_0]] var __result_0)) 
fn core_borrow_Cow_into_owned 1 r_named_0_80594 2 t_0 t_1 args 1 self [adt core_borrow_Cow 1 r_named_0_80594 2 [var t_0] [var t_1]] return [var t_0] 0 body ([var t_0] block 1 let __result [var t_0] ([var t_0] match ([adt core_borrow_Cow 1 r_named_0_80594 2 [var t_0] [var t_1]] var self) 2 ([adt core_borrow_Cow 1 r_scope_80550 2 [var t_0] [var t_1]] enum core_borrow_Borrowed 0 1 ([ref r_scope_80550 [var t_1]] var borrowed)) ([var t_0] call core_borrow_ToOwned_to_owned 0 2 [var t_0] [var t_1] 1 ([ref r_scope_80550 [var t_1]] var borrowed)) ([adt core_borrow_Cow 1 r_scope_80550 2 [var t_0] [var t_1]] enum core_borrow_Owned 1 1 ([var t_0] var owned)) ([var t_0] var owned)) ([var t_0] var __result)) 
fn core_borrow_Cow_is_borrowed 1 r_named_0_80594 2 t_0 t_1 args 1 self [ref r_anon_0 [adt core_borrow_Cow 1 r_named_0_80594 2 [var t_0] [var t_1]]] return [bool] 0 body ([bool] block 1 let __result [bool] ([bool] match ([adt core_borrow_Cow 1 r_named_0_80594 2 [var t_0] [var t_1]] deref ([ref r_anon_0 [adt core_borrow_Cow 1 r_named_0_80594 2 [var t_0] [var t_1]]] var self)) 2 ([adt core_borrow_Cow 1 r_named_0_80594 2 [var t_0] [var t_1]] enum core_borrow_Borrowed 0 1 ([ref r_named_0_80594 [var t_1]] wild)) ([bool] simple_literal true) ([adt core_borrow_Cow 1 r_named_0_80594 2 [var t_0] [var t_1]] wild) ([bool] simple_literal false)) ([bool] var __result)) 
fn core_borrow_Cow_is_owned 1 r_named_0_80594 2 t_0 t_1 args 1 self [ref r_anon_0 [adt core_borrow_Cow 1 r_named_0_80594 2 [var t_0] [var t_1]]] return [bool] 0 body ([bool] block 1 let __result [bool] ([bool] match ([adt core_borrow_Cow 1 r_named_0_80594 2 [var t_0] [var t_1]] deref ([ref r_anon_0 [adt core_borrow_Cow 1 r_named_0_80594 2 [var t_0] [var t_1]]] var self)) 2 ([adt core_borrow_Cow 1 r_named_0_80594 2 [var t_0] [var t_1]] enum core_borrow_Owned 1 1 ([var t_0] wild)) ([bool] simple_literal true) ([adt core_borrow_Cow 1 r_named_0_80594 2 [var t_0] [var t_1]] wild) ([bool] simple_literal false)) ([bool] var __result)) 
associated_type 1 r_named_0_80636 2 t_0 t_1 core_ops_Deref_Target 0 1 [adt core_borrow_Cow 1 r_named_0_80636 2 [var t_0] [var t_1]] [var t_1] 
fn core_borrow_Cow__Deref_deref 1 r_named_0_80636 2 t_0 t_1 args 1 self [ref r_anon_0 [adt core_borrow_Cow 1 r_named_0_80636 2 [var t_0] [var t_1]]] return [ref r_anon_0 [var t_1]] 1 core_ops_Deref_deref 0 1 [adt core_borrow_Cow 1 r_named_0_80636 2 [var t_0] [var t_1]] body ([ref r_anon_0 [var t_1]] block 1 let __result [ref r_anon_0 [var t_1]] ([ref r_anon_0 [var t_1]] match ([adt core_borrow_Cow 1 r_named_0_80636 2 [var t_0] [var t_1]] deref ([ref r_anon_0 [adt core_borrow_Cow 1 r_named_0_80636 2 [var t_0] [var t_1]]] var self)) 2 ([adt core_borrow_Cow 1 r_anon_0 2 [var t_0] [var t_1]] enum core_borrow_Borrowed 0 1 ([ref r_anon_0 [var t_1]] var borrowed)) ([ref r_anon_0 [var t_1]] var borrowed) ([adt core_borrow_Cow 1 r_anon_0 2 [var t_0] [var t_1]] enum core_borrow_Owned 1 1 ([ref r_anon_0 [var t_0]] var owned)) ([ref r_anon_0 [var t_1]] call core_borrow_BorrowFrom_borrow_from 0 2 [var t_0] [var t_1] 1 ([ref r_anon_0 [var t_0]] var owned))) ([ref r_anon_0 [var t_1]] var __result)) 
fn core_borrow_Cow__Ord_cmp 1 r_named_0_80703 2 t_0 t_1 args 2 self [ref r_anon_0 [adt core_borrow_Cow 1 r_named_0_80703 2 [var t_0] [var t_1]]] other [ref r_anon_1 [adt core_borrow_Cow 1 r_named_0_80703 2 [var t_0] [var t_1]]] return [adt core_cmp_Ordering 0 0] 1 core_cmp_Ord_cmp 0 1 [adt core_borrow_Cow 1 r_named_0_80703 2 [var t_0] [var t_1]] body ([adt core_cmp_Ordering 0 0] block 1 let __result_0 [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] block 5 let lifttemp_1 [var t_1] ([var t_1] call core_ops_Deref_deref 0 1 [adt core_borrow_Cow 1 r_named_0_80703 2 [var t_0] [var t_1]] 1 ([ref r_anon_0 [adt core_borrow_Cow 1 r_named_0_80703 2 [var t_0] [var t_1]]] var self)) let lifttemp_2 [var t_1] ([var t_1] call core_ops_Deref_deref 0 1 [adt core_borrow_Cow 1 r_named_0_80703 2 [var t_0] [var t_1]] 1 ([ref r_anon_1 [adt core_borrow_Cow 1 r_named_0_80703 2 [var t_0] [var t_1]]] var other)) let __result [adt core_cmp_Ordering 0 0] ([adt core_cmp_Ordering 0 0] call core_cmp_Ord_cmp 0 1 [var t_1] 2 ([ref r_scope_80689 [var t_1]] addr_of ([var t_1] var lifttemp_1)) ([ref r_scope_80689 [var t_1]] addr_of ([var t_1] var lifttemp_2))) expr ([unit] call drop_glue 0 1 [var t_1] 1 ([ptr_mut [var t_1]] addr_of ([var t_1] var lifttemp_2))) expr ([unit] call drop_glue 0 1 [var t_1] 1 ([ptr_mut [var t_1]] addr_of ([var t_1] var lifttemp_1))) ([adt core_cmp_Ordering 0 0] var __result)) ([adt core_cmp_Ordering 0 0] var __result_0)) 
fn core_borrow_Cow__PartialEq_eq 2 r_named_0_80761 r_named_0_80762 4 t_0 t_1 t_2 t_3 args 2 self [ref r_anon_0 [adt core_borrow_Cow 1 r_named_0_80761 2 [var t_0] [var t_2]]] other [ref r_anon_1 [adt core_borrow_Cow 1 r_named_0_80762 2 [var t_1] [var t_3]]] return [bool] 1 core_cmp_PartialEq_eq 0 2 [adt core_borrow_Cow 1 r_named_0_80762 2 [var t_1] [var t_3]] [adt core_borrow_Cow 1 r_named_0_80761 2 [var t_0] [var t_2]] body ([bool] block 1 let __result_0 [bool] ([bool] block 5 let lifttemp_3 [var t_2] ([var t_2] call core_ops_Deref_deref 0 1 [adt core_borrow_Cow 1 r_named_0_80761 2 [var t_0] [var t_2]] 1 ([ref r_anon_0 [adt core_borrow_Cow 1 r_named_0_80761 2 [var t_0] [var t_2]]] var self)) let lifttemp_4 [var t_3] ([var t_3] call core_ops_Deref_deref 0 1 [adt core_borrow_Cow 1 r_named_0_80762 2 [var t_1] [var t_3]] 1 ([ref r_anon_1 [adt core_borrow_Cow 1 r_named_0_80762 2 [var t_1] [var t_3]]] var other)) let __result [bool] ([bool] call core_cmp_PartialEq_eq 0 2 [var t_3] [var t_2] 2 ([ref r_scope_80737 [var t_2]] addr_of ([var t_2] var lifttemp_3)) ([ref r_scope_80737 [var t_3]] addr_of ([var t_3] var lifttemp_4))) expr ([unit] call drop_glue 0 1 [var t_3] 1 ([ptr_mut [var t_3]] addr_of ([var t_3] var lifttemp_4))) expr ([unit] call drop_glue 0 1 [var t_2] 1 ([ptr_mut [var t_2]] addr_of ([var t_2] var lifttemp_3))) ([bool] var __result)) ([bool] var __result_0)) 
fn core_borrow_Cow__PartialOrd_partial_cmp 1 r_named_0_80819 2 t_0 t_1 args 2 self [ref r_anon_0 [adt core_borrow_Cow 1 r_named_0_80819 2 [var t_0] [var t_1]]] other [ref r_anon_1 [adt core_borrow_Cow 1 r_named_0_80819 2 [var t_0] [var t_1]]] return [adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] 1 core_cmp_PartialOrd_partial_cmp 0 1 [adt core_borrow_Cow 1 r_named_0_80819 2 [var t_0] [var t_1]] body ([adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] block 1 let __result_0 [adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] ([adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] block 5 let lifttemp_5 [var t_1] ([var t_1] call core_ops_Deref_deref 0 1 [adt core_borrow_Cow 1 r_named_0_80819 2 [var t_0] [var t_1]] 1 ([ref r_anon_0 [adt core_borrow_Cow 1 r_named_0_80819 2 [var t_0] [var t_1]]] var self)) let lifttemp_6 [var t_1] ([var t_1] call core_ops_Deref_deref 0 1 [adt core_borrow_Cow 1 r_named_0_80819 2 [var t_0] [var t_1]] 1 ([ref r_anon_1 [adt core_borrow_Cow 1 r_named_0_80819 2 [var t_0] [var t_1]]] var other)) let __result [adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] ([adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] call core_cmp_PartialOrd_partial_cmp 0 2 [var t_1] [var t_1] 2 ([ref r_scope_80805 [var t_1]] addr_of ([var t_1] var lifttemp_5)) ([ref r_scope_80805 [var t_1]] addr_of ([var t_1] var lifttemp_6))) expr ([unit] call drop_glue 0 1 [var t_1] 1 ([ptr_mut [var t_1]] addr_of ([var t_1] var lifttemp_6))) expr ([unit] call drop_glue 0 1 [var t_1] 1 ([ptr_mut [var t_1]] addr_of ([var t_1] var lifttemp_5))) ([adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] var __result)) ([adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] var __result_0)) 
struct core_cell_Cell 0 1 t_0 1 value [adt core_cell_UnsafeCell 0 1 [var t_0]] 0 
fn core_cell_Cell_new 0 1 t_0 args 1 value [var t_0] return [adt core_cell_Cell 0 1 [var t_0]] 0 body ([adt core_cell_Cell 0 1 [var t_0]] block 1 let __result [adt core_cell_Cell 0 1 [var t_0]] ([adt core_cell_Cell 0 1 [var t_0]] struct_literal 1 value ([adt core_cell_UnsafeCell 0 1 [var t_0]] call core_cell_UnsafeCell_new 0 1 [var t_0] 1 ([var t_0] var value))) ([adt core_cell_Cell 0 1 [var t_0]] var __result)) 
fn core_cell_Cell_get 0 1 t_0 args 1 self [ref r_anon_0 [adt core_cell_Cell 0 1 [var t_0]]] return [var t_0] 0 body ([var t_0] block 1 let __result_0 [var t_0] ([var t_0] unsafe 1 let __result [var t_0] ([var t_0] deref ([ptr_mut [var t_0]] call core_cell_UnsafeCell_get 0 1 [var t_0] 1 ([ref r_scope_80986 [adt core_cell_UnsafeCell 0 1 [var t_0]]] addr_of ([adt core_cell_UnsafeCell 0 1 [var t_0]] field ([adt core_cell_Cell 0 1 [var t_0]] deref ([ref r_anon_0 [adt core_cell_Cell 0 1 [var t_0]]] var self)) value)))) ([var t_0] var __result)) ([var t_0] var __result_0)) 
fn core_cell_Cell_set 0 1 t_0 args 2 self [ref r_anon_0 [adt core_cell_Cell 0 1 [var t_0]]] value [var t_0] return [unit] 0 body ([unit] block 1 let __result_0 [unit] ([unit] unsafe 2 expr ([unit] assign ([var t_0] deref ([ptr_mut [var t_0]] call core_cell_UnsafeCell_get 0 1 [var t_0] 1 ([ref r_scope_81004 [adt core_cell_UnsafeCell 0 1 [var t_0]]] addr_of ([adt core_cell_UnsafeCell 0 1 [var t_0]] field ([adt core_cell_Cell 0 1 [var t_0]] deref ([ref r_anon_0 [adt core_cell_Cell 0 1 [var t_0]]] var self)) value)))) ([var t_0] var value)) let __result [unit] ([unit] simple_literal _Block) ([unit] var __result)) ([unit] var __result_0)) 
fn core_cell_Cell_as_unsafe_cell 1 r_named_0_81009 1 t_0 args 1 self [ref r_named_0_81009 [adt core_cell_Cell 0 1 [var t_0]]] return [ref r_named_0_81009 [adt core_cell_UnsafeCell 0 1 [var t_0]]] 0 body ([ref r_named_0_81009 [adt core_cell_UnsafeCell 0 1 [var t_0]]] unsafe 1 let __result [ref r_named_0_81009 [adt core_cell_UnsafeCell 0 1 [var t_0]]] ([ref r_named_0_81009 [adt core_cell_UnsafeCell 0 1 [var t_0]]] addr_of ([adt core_cell_UnsafeCell 0 1 [var t_0]] field ([adt core_cell_Cell 0 1 [var t_0]] deref ([ref r_named_0_81009 [adt core_cell_Cell 0 1 [var t_0]]] var self)) value)) ([ref r_named_0_81009 [adt core_cell_UnsafeCell 0 1 [var t_0]]] var __result)) 
fn core_cell_Cell__Clone_clone 0 1 t_0 args 1 self [ref r_anon_0 [adt core_cell_Cell 0 1 [var t_0]]] return [adt core_cell_Cell 0 1 [var t_0]] 1 core_clone_Clone_clone 0 1 [adt core_cell_Cell 0 1 [var t_0]] body ([adt core_cell_Cell 0 1 [var t_0]] block 1 let __result [adt core_cell_Cell 0 1 [var t_0]] ([adt core_cell_Cell 0 1 [var t_0]] call core_cell_Cell_new 0 1 [var t_0] 1 ([var t_0] call core_cell_Cell_get 0 1 [var t_0] 1 ([ref r_anon_0 [adt core_cell_Cell 0 1 [var t_0]]] var self))) ([adt core_cell_Cell 0 1 [var t_0]] var __result)) 
fn core_cell_Cell__Default_default 0 1 t_0 args 0 return [adt core_cell_Cell 0 1 [var t_0]] 1 core_default_Default_default 0 1 [adt core_cell_Cell 0 1 [var t_0]] body ([adt core_cell_Cell 0 1 [var t_0]] block 1 let __result [adt core_cell_Cell 0 1 [var t_0]] ([adt core_cell_Cell 0 1 [var t_0]] call core_cell_Cell_new 0 1 [var t_0] 1 ([var t_0] call core_default_Default_default 0 1 [var t_0] 0)) ([adt core_cell_Cell 0 1 [var t_0]] var __result)) 
fn core_cell_Cell__PartialEq_eq 0 1 t_0 args 2 self [ref r_anon_0 [adt core_cell_Cell 0 1 [var t_0]]] other [ref r_anon_1 [adt core_cell_Cell 0 1 [var t_0]]] return [bool] 1 core_cmp_PartialEq_eq 0 1 [adt core_cell_Cell 0 1 [var t_0]] body ([bool] block 1 let __result_0 [bool] ([bool] block 3 let lifttemp_7 [var t_0] ([var t_0] call core_cell_Cell_get 0 1 [var t_0] 1 ([ref r_anon_0 [adt core_cell_Cell 0 1 [var t_0]]] var self)) let __result [bool] ([bool] call core_cmp_PartialEq_eq 0 2 [var t_0] [var t_0] 2 ([ref r_scope_81103 [var t_0]] addr_of ([var t_0] var lifttemp_7)) ([var t_0] call core_cell_Cell_get 0 1 [var t_0] 1 ([ref r_anon_1 [adt core_cell_Cell 0 1 [var t_0]]] var other))) expr ([unit] call drop_glue 0 1 [var t_0] 1 ([ptr_mut [var t_0]] addr_of ([var t_0] var lifttemp_7))) ([bool] var __result)) ([bool] var __result_0)) 
struct core_cell_RefCell 0 1 t_0 2 value [adt core_cell_UnsafeCell 0 1 [var t_0]] borrow [adt core_cell_Cell 0 1 [uint 32]] 0 
fn core_cell_RefCell_new 0 1 t_0 args 1 value [var t_0] return [adt core_cell_RefCell 0 1 [var t_0]] 0 body ([adt core_cell_RefCell 0 1 [var t_0]] block 1 let __result [adt core_cell_RefCell 0 1 [var t_0]] ([adt core_cell_RefCell 0 1 [var t_0]] struct_literal 2 value ([adt core_cell_UnsafeCell 0 1 [var t_0]] call core_cell_UnsafeCell_new 0 1 [var t_0] 1 ([var t_0] var value)) borrow ([adt core_cell_Cell 0 1 [uint 32]] call core_cell_Cell_new 0 1 [uint 32] 1 ([uint 32] simple_literal 0))) ([adt core_cell_RefCell 0 1 [var t_0]] var __result)) 
fn core_cell_RefCell_try_borrow 1 r_named_0_81212 1 t_0 args 1 self [ref r_named_0_81212 [adt core_cell_RefCell 0 1 [var t_0]]] return [adt core_option_Option 0 1 [adt core_cell_Ref 1 r_named_0_81212 1 [var t_0]]] 0 body ([adt core_option_Option 0 1 [adt core_cell_Ref 1 r_named_0_81212 1 [var t_0]]] block 1 let __result_0 [adt core_option_Option 0 1 [adt core_cell_Ref 1 r_named_0_81212 1 [var t_0]]] ([adt core_option_Option 0 1 [adt core_cell_Ref 1 r_named_0_81212 1 [var t_0]]] match ([adt core_option_Option 0 1 [adt core_cell_BorrowRef 1 r_named_0_81212 0]] call core_cell_BorrowRef_new 1 r_named_0_81212 0 1 ([ref r_named_0_81212 [adt core_cell_Cell 0 1 [uint 32]]] addr_of ([adt core_cell_Cell 0 1 [uint 32]] field ([adt core_cell_RefCell 0 1 [var t_0]] deref ([ref r_named_0_81212 [adt core_cell_RefCell 0 1 [var t_0]]] var self)) borrow))) 2 ([adt core_option_Option 0 1 [adt core_cell_BorrowRef 1 r_named_0_81212 0]] enum core_option_Some 1 1 ([adt core_cell_BorrowRef 1 r_named_0_81212 0] var b)) ([adt core_option_Option 0 1 [adt core_cell_Ref 1 r_named_0_81212 1 [var t_0]]] enum_literal core_option_Some 1 1 ([adt core_cell_Ref 1 r_named_0_81212 1 [var t_0]] struct_literal 2 _value ([ptr_mut [var t_0]] unsafe 1 let __result [ptr_mut [var t_0]] ([ptr_mut [var t_0]] call core_cell_UnsafeCell_get 0 1 [var t_0] 1 ([ref r_scope_81241 [adt core_cell_UnsafeCell 0 1 [var t_0]]] addr_of ([adt core_cell_UnsafeCell 0 1 [var t_0]] field ([adt core_cell_RefCell 0 1 [var t_0]] deref ([ref r_named_0_81212 [adt core_cell_RefCell 0 1 [var t_0]]] var self)) value))) ([ptr_mut [var t_0]] var __result)) _borrow ([adt core_cell_BorrowRef 1 r_named_0_81212 0] var b))) ([adt core_option_Option 0 1 [adt core_cell_BorrowRef 1 r_named_0_81212 0]] enum core_option_None 0 0) ([adt core_option_Option 0 1 [adt core_cell_Ref 1 r_named_0_81212 1 [var t_0]]] enum_literal core_option_None 0 0)) ([adt core_option_Option 0 1 [adt core_cell_Ref 1 r_named_0_81212 1 [var t_0]]] var __result_0)) 
fn core_cell_RefCell_try_borrow_mut 1 r_named_0_81291 1 t_0 args 1 self [ref r_named_0_81291 [adt core_cell_RefCell 0 1 [var t_0]]] return [adt core_option_Option 0 1 [adt core_cell_RefMut 1 r_named_0_81291 1 [var t_0]]] 0 body ([adt core_option_Option 0 1 [adt core_cell_RefMut 1 r_named_0_81291 1 [var t_0]]] block 1 let __result_0 [adt core_option_Option 0 1 [adt core_cell_RefMut 1 r_named_0_81291 1 [var t_0]]] ([adt core_option_Option 0 1 [adt core_cell_RefMut 1 r_named_0_81291 1 [var t_0]]] match ([adt core_option_Option 0 1 [adt core_cell_BorrowRefMut 1 r_named_0_81291 0]] call core_cell_BorrowRefMut_new 1 r_named_0_81291 0 1 ([ref r_named_0_81291 [adt core_cell_Cell 0 1 [uint 32]]] addr_of ([adt core_cell_Cell 0 1 [uint 32]] field ([adt core_cell_RefCell 0 1 [var t_0]] deref ([ref r_named_0_81291 [adt core_cell_RefCell 0 1 [var t_0]]] var self)) borrow))) 2 ([adt core_option_Option 0 1 [adt core_cell_BorrowRefMut 1 r_named_0_81291 0]] enum core_option_Some 1 1 ([adt core_cell_BorrowRefMut 1 r_named_0_81291 0] var b)) ([adt core_option_Option 0 1 [adt core_cell_RefMut 1 r_named_0_81291 1 [var t_0]]] enum_literal core_option_Some 1 1 ([adt core_cell_RefMut 1 r_named_0_81291 1 [var t_0]] struct_literal 2 _value ([ptr_mut [var t_0]] unsafe 1 let __result [ptr_mut [var t_0]] ([ptr_mut [var t_0]] call core_cell_UnsafeCell_get 0 1 [var t_0] 1 ([ref r_scope_81320 [adt core_cell_UnsafeCell 0 1 [var t_0]]] addr_of ([adt core_cell_UnsafeCell 0 1 [var t_0]] field ([adt core_cell_RefCell 0 1 [var t_0]] deref ([ref r_named_0_81291 [adt core_cell_RefCell 0 1 [var t_0]]] var self)) value))) ([ptr_mut [var t_0]] var __result)) _borrow ([adt core_cell_BorrowRefMut 1 r_named_0_81291 0] var b))) ([adt core_option_Option 0 1 [adt core_cell_BorrowRefMut 1 r_named_0_81291 0]] enum core_option_None 0 0) ([adt core_option_Option 0 1 [adt core_cell_RefMut 1 r_named_0_81291 1 [var t_0]]] enum_literal core_option_None 0 0)) ([adt core_option_Option 0 1 [adt core_cell_RefMut 1 r_named_0_81291 1 [var t_0]]] var __result_0)) 
fn core_cell_RefCell_as_unsafe_cell 1 r_named_0_81370 1 t_0 args 1 self [ref r_named_0_81370 [adt core_cell_RefCell 0 1 [var t_0]]] return [ref r_named_0_81370 [adt core_cell_UnsafeCell 0 1 [var t_0]]] 0 body ([ref r_named_0_81370 [adt core_cell_UnsafeCell 0 1 [var t_0]]] unsafe 1 let __result [ref r_named_0_81370 [adt core_cell_UnsafeCell 0 1 [var t_0]]] ([ref r_named_0_81370 [adt core_cell_UnsafeCell 0 1 [var t_0]]] addr_of ([adt core_cell_UnsafeCell 0 1 [var t_0]] field ([adt core_cell_RefCell 0 1 [var t_0]] deref ([ref r_named_0_81370 [adt core_cell_RefCell 0 1 [var t_0]]] var self)) value)) ([ref r_named_0_81370 [adt core_cell_UnsafeCell 0 1 [var t_0]]] var __result)) 
fn core_cell_RefCell__Default_default 0 1 t_0 args 0 return [adt core_cell_RefCell 0 1 [var t_0]] 1 core_default_Default_default 0 1 [adt core_cell_RefCell 0 1 [var t_0]] body ([adt core_cell_RefCell 0 1 [var t_0]] block 1 let __result [adt core_cell_RefCell 0 1 [var t_0]] ([adt core_cell_RefCell 0 1 [var t_0]] call core_cell_RefCell_new 0 1 [var t_0] 1 ([var t_0] call core_default_Default_default 0 1 [var t_0] 0)) ([adt core_cell_RefCell 0 1 [var t_0]] var __result)) 
struct core_cell_BorrowRef 1 r_named_0_81486 0 1 _borrow [ref r_named_0_81486 [adt core_cell_Cell 0 1 [uint 32]]] 1 core_cell_BorrowRef__Drop_drop 
fn core_cell_BorrowRef_new 1 r_named_0_81523 0 args 1 borrow [ref r_named_0_81523 [adt core_cell_Cell 0 1 [uint 32]]] return [adt core_option_Option 0 1 [adt core_cell_BorrowRef 1 r_named_0_81523 0]] 0 body ([adt core_option_Option 0 1 [adt core_cell_BorrowRef 1 r_named_0_81523 0]] block 1 let __result_0 [adt core_option_Option 0 1 [adt core_cell_BorrowRef 1 r_named_0_81523 0]] ([adt core_option_Option 0 1 [adt core_cell_BorrowRef 1 r_named_0_81523 0]] match ([uint 32] call core_cell_Cell_get 0 1 [uint 32] 1 ([ref r_named_0_81523 [adt core_cell_Cell 0 1 [uint 32]]] var borrow)) 2 ([uint 32] simple_literal -1) ([adt core_option_Option 0 1 [adt core_cell_BorrowRef 1 r_named_0_81523 0]] enum_literal core_option_None 0 0) ([uint 32] var b) ([adt core_option_Option 0 1 [adt core_cell_BorrowRef 1 r_named_0_81523 0]] block 2 expr ([unit] call core_cell_Cell_set 0 1 [uint 32] 2 ([ref r_named_0_81523 [adt core_cell_Cell 0 1 [uint 32]]] var borrow) ([uint 32] binop BiAdd ([uint 32] var b) ([uint 32] simple_literal 1))) let __result [adt core_option_Option 0 1 [adt core_cell_BorrowRef 1 r_named_0_81523 0]] ([adt core_option_Option 0 1 [adt core_cell_BorrowRef 1 r_named_0_81523 0]] enum_literal core_option_Some 1 1 ([adt core_cell_BorrowRef 1 r_named_0_81523 0] struct_literal 1 _borrow ([ref r_named_0_81523 [adt core_cell_Cell 0 1 [uint 32]]] var borrow))) ([adt core_option_Option 0 1 [adt core_cell_BorrowRef 1 r_named_0_81523 0]] var __result))) ([adt core_option_Option 0 1 [adt core_cell_BorrowRef 1 r_named_0_81523 0]] var __result_0)) 
struct core_cell_Ref 1 r_named_0_81674 1 t_0 2 _value [ref r_named_0_81674 [var t_0]] _borrow [adt core_cell_BorrowRef 1 r_named_0_81674 0] 0 
associated_type 1 r_named_0_81696 1 t_0 core_ops_Deref_Target 0 1 [adt core_cell_Ref 1 r_named_0_81696 1 [var t_0]] [var t_0] 
fn core_cell_Ref__Deref_deref 2 r_named_0_81696 r_named_0_81681 1 t_0 args 1 self [ref r_named_0_81681 [adt core_cell_Ref 1 r_named_0_81696 1 [var t_0]]] return [ref r_named_0_81681 [var t_0]] 1 core_ops_Deref_deref 0 1 [adt core_cell_Ref 1 r_named_0_81696 1 [var t_0]] body ([ref r_named_0_81696 [var t_0]] block 1 let __result [ref r_named_0_81696 [var t_0]] ([ref r_named_0_81696 [var t_0]] field ([adt core_cell_Ref 1 r_named_0_81696 1 [var t_0]] deref ([ref r_named_0_81681 [adt core_cell_Ref 1 r_named_0_81696 1 [var t_0]]] var self)) _value) ([ref r_named_0_81696 [var t_0]] var __result)) 
fn core_cell_clone_ref 1 r_named_0_81719 1 f_0 args 1 orig [ref r_anon_0 [adt core_cell_Ref 1 r_named_0_81719 1 [var f_0]]] return [adt core_cell_Ref 1 r_named_0_81719 1 [var f_0]] 0 body ([adt core_cell_Ref 1 r_named_0_81719 1 [var f_0]] block 1 let __result [adt core_cell_Ref 1 r_named_0_81719 1 [var f_0]] ([adt core_cell_Ref 1 r_named_0_81719 1 [var f_0]] struct_literal 2 _value ([ref r_named_0_81719 [var f_0]] field ([adt core_cell_Ref 1 r_named_0_81719 1 [var f_0]] deref ([ref r_anon_0 [adt core_cell_Ref 1 r_named_0_81719 1 [var f_0]]] var orig)) _value) _borrow ([adt core_cell_BorrowRef 1 r_named_0_81719 0] call core_clone_Clone_clone 0 1 [adt core_cell_BorrowRef 1 r_named_0_81719 0] 1 ([ref r_scope_81725 [adt core_cell_BorrowRef 1 r_named_0_81719 0]] addr_of ([adt core_cell_BorrowRef 1 r_named_0_81719 0] field ([adt core_cell_Ref 1 r_named_0_81719 1 [var f_0]] deref ([ref r_anon_0 [adt core_cell_Ref 1 r_named_0_81719 1 [var f_0]]] var orig)) _borrow)))) ([adt core_cell_Ref 1 r_named_0_81719 1 [var f_0]] var __result)) 
struct core_cell_BorrowRefMut 1 r_named_0_81736 0 1 _borrow [ref r_named_0_81736 [adt core_cell_Cell 0 1 [uint 32]]] 1 core_cell_BorrowRefMut__Drop_drop 
fn core_cell_BorrowRefMut_new 1 r_named_0_81829 0 args 1 borrow [ref r_named_0_81829 [adt core_cell_Cell 0 1 [uint 32]]] return [adt core_option_Option 0 1 [adt core_cell_BorrowRefMut 1 r_named_0_81829 0]] 0 body ([adt core_option_Option 0 1 [adt core_cell_BorrowRefMut 1 r_named_0_81829 0]] block 1 let __result_0 [adt core_option_Option 0 1 [adt core_cell_BorrowRefMut 1 r_named_0_81829 0]] ([adt core_option_Option 0 1 [adt core_cell_BorrowRefMut 1 r_named_0_81829 0]] match ([uint 32] call core_cell_Cell_get 0 1 [uint 32] 1 ([ref r_named_0_81829 [adt core_cell_Cell 0 1 [uint 32]]] var borrow)) 2 ([uint 32] simple_literal 0) ([adt core_option_Option 0 1 [adt core_cell_BorrowRefMut 1 r_named_0_81829 0]] block 2 expr ([unit] call core_cell_Cell_set 0 1 [uint 32] 2 ([ref r_named_0_81829 [adt core_cell_Cell 0 1 [uint 32]]] var borrow) ([uint 32] simple_literal -1)) let __result [adt core_option_Option 0 1 [adt core_cell_BorrowRefMut 1 r_named_0_81829 0]] ([adt core_option_Option 0 1 [adt core_cell_BorrowRefMut 1 r_named_0_81829 0]] enum_literal core_option_Some 1 1 ([adt core_cell_BorrowRefMut 1 r_named_0_81829 0] struct_literal 1 _borrow ([ref r_named_0_81829 [adt core_cell_Cell 0 1 [uint 32]]] var borrow))) ([adt core_option_Option 0 1 [adt core_cell_BorrowRefMut 1 r_named_0_81829 0]] var __result)) ([uint 32] wild) ([adt core_option_Option 0 1 [adt core_cell_BorrowRefMut 1 r_named_0_81829 0]] enum_literal core_option_None 0 0)) ([adt core_option_Option 0 1 [adt core_cell_BorrowRefMut 1 r_named_0_81829 0]] var __result_0)) 
struct core_cell_RefMut 1 r_named_0_81846 1 t_0 2 _value [ref_mut r_named_0_81846 [var t_0]] _borrow [adt core_cell_BorrowRefMut 1 r_named_0_81846 0] 0 
associated_type 1 r_named_0_81868 1 t_0 core_ops_Deref_Target 0 1 [adt core_cell_RefMut 1 r_named_0_81868 1 [var t_0]] [var t_0] 
fn core_cell_RefMut__Deref_deref 2 r_named_0_81868 r_named_0_81853 1 t_0 args 1 self [ref r_named_0_81853 [adt core_cell_RefMut 1 r_named_0_81868 1 [var t_0]]] return [ref r_named_0_81853 [var t_0]] 1 core_ops_Deref_deref 0 1 [adt core_cell_RefMut 1 r_named_0_81868 1 [var t_0]] body ([ref_mut r_named_0_81868 [var t_0]] block 1 let __result [ref_mut r_named_0_81868 [var t_0]] ([ref_mut r_named_0_81868 [var t_0]] field ([adt core_cell_RefMut 1 r_named_0_81868 1 [var t_0]] deref ([ref r_named_0_81853 [adt core_cell_RefMut 1 r_named_0_81868 1 [var t_0]]] var self)) _value) ([ref_mut r_named_0_81868 [var t_0]] var __result)) 
fn core_cell_RefMut__DerefMut_deref_mut 2 r_named_0_81892 r_named_0_81877 1 t_0 args 1 self [ref_mut r_named_0_81877 [adt core_cell_RefMut 1 r_named_0_81892 1 [var t_0]]] return [ref_mut r_named_0_81877 [var t_0]] 1 core_ops_DerefMut_deref_mut 0 1 [adt core_cell_RefMut 1 r_named_0_81892 1 [var t_0]] body ([ref_mut r_named_0_81892 [var t_0]] block 1 let __result [ref_mut r_named_0_81892 [var t_0]] ([ref_mut r_named_0_81892 [var t_0]] field ([adt core_cell_RefMut 1 r_named_0_81892 1 [var t_0]] deref ([ref_mut r_named_0_81877 [adt core_cell_RefMut 1 r_named_0_81892 1 [var t_0]]] var self)) _value) ([ref_mut r_named_0_81892 [var t_0]] var __result)) 
struct core_cell_UnsafeCell 0 1 t_0 1 value [var t_0] 0 
fn core_cell_UnsafeCell_new 0 1 t_0 args 1 value [var t_0] return [adt core_cell_UnsafeCell 0 1 [var t_0]] 0 body ([adt core_cell_UnsafeCell 0 1 [var t_0]] block 1 let __result [adt core_cell_UnsafeCell 0 1 [var t_0]] ([adt core_cell_UnsafeCell 0 1 [var t_0]] struct_literal 1 value ([var t_0] var value)) ([adt core_cell_UnsafeCell 0 1 [var t_0]] var __result)) 
fn core_cell_UnsafeCell_get 0 1 t_0 args 1 self [ref r_anon_0 [adt core_cell_UnsafeCell 0 1 [var t_0]]] return [ptr_mut [var t_0]] 0 body ([ptr_mut [var t_0]] block 1 let __result [ptr_mut [var t_0]] ([ptr_mut [var t_0]] cast ([ptr [var t_0]] cast ([ptr [var t_0]] addr_of ([var t_0] field ([adt core_cell_UnsafeCell 0 1 [var t_0]] deref ([ref r_anon_0 [adt core_cell_UnsafeCell 0 1 [var t_0]]] var self)) value)) [ptr [var t_0]]) [ptr_mut [var t_0]]) ([ptr_mut [var t_0]] var __result)) 
fn core_cell_UnsafeCell_into_inner 0 1 t_0 args 1 self [adt core_cell_UnsafeCell 0 1 [var t_0]] return [var t_0] 0 body ([var t_0] unsafe 1 let __result [var t_0] ([var t_0] field ([adt core_cell_UnsafeCell 0 1 [var t_0]] var self) value) ([var t_0] var __result)) 
enum core_char_EscapeUnicodeState 0 0 6 core_char_Backslash 0 core_char_Type 0 core_char_LeftBrace 0 core_char_Value 1 [uint 32] core_char_RightBrace 0 core_char_Done 0 0 
struct core_finally_Finallyalizer 1 r_named_0_83555 2 t_0 t_1 2 mutate [ref_mut r_named_0_83555 [var t_0]] dtor [var t_1] 1 core_finally_Finallyalizer__Drop_drop 
struct core_iter_Rev 0 1 t_0 1 iter [var t_0] 0 
associated_type 0 1 t_0 core_iter_Iterator_Item 0 1 [adt core_iter_Rev 0 1 [var t_0]] [abstract core_iter_Iterator_Item 0 1 [var t_0]] 
fn core_iter_Rev__Iterator_next 0 1 t_0 args 1 self [ref_mut r_anon_0 [adt core_iter_Rev 0 1 [var t_0]]] return [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] 1 core_iter_Iterator_next 0 1 [adt core_iter_Rev 0 1 [var t_0]] body ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] block 1 let __result [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] call core_iter_DoubleEndedIterator_next_back 0 1 [var t_0] 1 ([ref_mut r_scope_85532 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Rev 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Rev 0 1 [var t_0]]] var self)) iter))) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] var __result)) 
fn core_iter_Rev__Iterator_size_hint 0 1 t_0 args 1 self [ref r_anon_0 [adt core_iter_Rev 0 1 [var t_0]]] return [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] 1 core_iter_Iterator_size_hint 0 1 [adt core_iter_Rev 0 1 [var t_0]] body ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] block 1 let __result [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] call core_iter_Iterator_size_hint 0 1 [var t_0] 1 ([ref r_scope_85548 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Rev 0 1 [var t_0]] deref ([ref r_anon_0 [adt core_iter_Rev 0 1 [var t_0]]] var self)) iter))) ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] var __result)) 
fn core_iter_Rev__DoubleEndedIterator_next_back 0 1 t_0 args 1 self [ref_mut r_anon_0 [adt core_iter_Rev 0 1 [var t_0]]] return [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] 1 core_iter_DoubleEndedIterator_next_back 0 1 [adt core_iter_Rev 0 1 [var t_0]] body ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] block 1 let __result [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] call core_iter_Iterator_next 0 1 [var t_0] 1 ([ref_mut r_scope_85574 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Rev 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Rev 0 1 [var t_0]]] var self)) iter))) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] var __result)) 
fn core_iter_Rev__RandomAccessIterator_indexable 0 1 t_0 args 1 self [ref r_anon_0 [adt core_iter_Rev 0 1 [var t_0]]] return [uint 32] 1 core_iter_RandomAccessIterator_indexable 0 1 [adt core_iter_Rev 0 1 [var t_0]] body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_iter_RandomAccessIterator_indexable 0 1 [var t_0] 1 ([ref r_scope_85596 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Rev 0 1 [var t_0]] deref ([ref r_anon_0 [adt core_iter_Rev 0 1 [var t_0]]] var self)) iter))) ([uint 32] var __result)) 
fn core_iter_Rev__RandomAccessIterator_idx 0 1 t_0 args 2 self [ref_mut r_anon_0 [adt core_iter_Rev 0 1 [var t_0]]] index [uint 32] return [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] 1 core_iter_RandomAccessIterator_idx 0 1 [adt core_iter_Rev 0 1 [var t_0]] body ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] block 2 let amt [uint 32] ([uint 32] call core_iter_RandomAccessIterator_indexable 0 1 [adt core_iter_Rev 0 1 [var t_0]] 1 ([ref_mut r_anon_0 [adt core_iter_Rev 0 1 [var t_0]]] var self)) let __result [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] call core_iter_RandomAccessIterator_idx 0 1 [var t_0] 2 ([ref_mut r_scope_85620 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Rev 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Rev 0 1 [var t_0]]] var self)) iter)) ([uint 32] binop BiSub ([uint 32] binop BiSub ([uint 32] var amt) ([uint 32] var index)) ([uint 32] simple_literal 1))) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] var __result)) 
struct core_iter_ByRef 1 r_named_0_85647 1 t_0 1 iter [ref_mut r_named_0_85647 [var t_0]] 0 
associated_type 1 r_named_0_85688 1 t_0 core_iter_Iterator_Item 0 1 [adt core_iter_ByRef 1 r_named_0_85688 1 [var t_0]] [abstract core_iter_Iterator_Item 0 1 [var t_0]] 
fn core_iter_ByRef__Iterator_next 1 r_named_0_85688 1 t_0 args 1 self [ref_mut r_anon_0 [adt core_iter_ByRef 1 r_named_0_85688 1 [var t_0]]] return [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] 1 core_iter_Iterator_next 0 1 [adt core_iter_ByRef 1 r_named_0_85688 1 [var t_0]] body ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] block 1 let __result [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] call core_iter_Iterator_next 0 1 [var t_0] 1 ([ref_mut r_named_0_85688 [var t_0]] field ([adt core_iter_ByRef 1 r_named_0_85688 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_ByRef 1 r_named_0_85688 1 [var t_0]]] var self)) iter)) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] var __result)) 
fn core_iter_ByRef__Iterator_size_hint 1 r_named_0_85688 1 t_0 args 1 self [ref r_anon_0 [adt core_iter_ByRef 1 r_named_0_85688 1 [var t_0]]] return [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] 1 core_iter_Iterator_size_hint 0 1 [adt core_iter_ByRef 1 r_named_0_85688 1 [var t_0]] body ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] block 1 let __result [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] call core_iter_Iterator_size_hint 0 1 [var t_0] 1 ([ref_mut r_named_0_85688 [var t_0]] field ([adt core_iter_ByRef 1 r_named_0_85688 1 [var t_0]] deref ([ref r_anon_0 [adt core_iter_ByRef 1 r_named_0_85688 1 [var t_0]]] var self)) iter)) ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] var __result)) 
fn core_iter_ByRef__DoubleEndedIterator_next_back 1 r_named_0_85717 1 t_0 args 1 self [ref_mut r_anon_0 [adt core_iter_ByRef 1 r_named_0_85717 1 [var t_0]]] return [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] 1 core_iter_DoubleEndedIterator_next_back 0 1 [adt core_iter_ByRef 1 r_named_0_85717 1 [var t_0]] body ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] block 1 let __result [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] call core_iter_DoubleEndedIterator_next_back 0 1 [var t_0] 1 ([ref_mut r_named_0_85717 [var t_0]] field ([adt core_iter_ByRef 1 r_named_0_85717 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_ByRef 1 r_named_0_85717 1 [var t_0]]] var self)) iter)) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] var __result)) 
enum core_iter_MinMaxResult 0 1 t_0 3 core_iter_NoElements 0 core_iter_OneElement 1 [var t_0] core_iter_MinMax 2 [var t_0] [var t_0] 0 
fn core_iter_MinMaxResult_into_option 0 1 t_0 args 1 self [adt core_iter_MinMaxResult 0 1 [var t_0]] return [adt core_option_Option 0 1 [tuple 2 [var t_0] [var t_0]]] 0 body ([adt core_option_Option 0 1 [tuple 2 [var t_0] [var t_0]]] block 1 let __result [adt core_option_Option 0 1 [tuple 2 [var t_0] [var t_0]]] ([adt core_option_Option 0 1 [tuple 2 [var t_0] [var t_0]]] match ([adt core_iter_MinMaxResult 0 1 [var t_0]] var self) 3 ([adt core_iter_MinMaxResult 0 1 [var t_0]] enum core_iter_NoElements 0 0) ([adt core_option_Option 0 1 [tuple 2 [var t_0] [var t_0]]] enum_literal core_option_None 0 0) ([adt core_iter_MinMaxResult 0 1 [var t_0]] enum core_iter_OneElement 1 1 ([var t_0] var x)) ([adt core_option_Option 0 1 [tuple 2 [var t_0] [var t_0]]] enum_literal core_option_Some 1 1 ([tuple 2 [var t_0] [var t_0]] tuple_literal 2 ([var t_0] call core_clone_Clone_clone 0 1 [var t_0] 1 ([ref r_scope_87023 [var t_0]] addr_of ([var t_0] var x))) ([var t_0] var x))) ([adt core_iter_MinMaxResult 0 1 [var t_0]] enum core_iter_MinMax 2 2 ([var t_0] var x_0) ([var t_0] var y)) ([adt core_option_Option 0 1 [tuple 2 [var t_0] [var t_0]]] enum_literal core_option_Some 1 1 ([tuple 2 [var t_0] [var t_0]] tuple_literal 2 ([var t_0] var x_0) ([var t_0] var y)))) ([adt core_option_Option 0 1 [tuple 2 [var t_0] [var t_0]]] var __result)) 
struct core_iter_Cloned 0 1 t_0 1 it [var t_0] 0 
associated_type 0 3 t_0 t_1 t_2 core_iter_Iterator_Item 0 1 [adt core_iter_Cloned 0 1 [var t_2]] [var t_0] 
fn core_iter_Cloned__Iterator_size_hint 0 3 t_0 t_1 t_2 args 1 self [ref r_anon_0 [adt core_iter_Cloned 0 1 [var t_2]]] return [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] 1 core_iter_Iterator_size_hint 0 1 [adt core_iter_Cloned 0 1 [var t_2]] body ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] block 1 let __result [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] call core_iter_Iterator_size_hint 0 1 [var t_2] 1 ([ref r_scope_87109 [var t_2]] addr_of ([var t_2] field ([adt core_iter_Cloned 0 1 [var t_2]] deref ([ref r_anon_0 [adt core_iter_Cloned 0 1 [var t_2]]] var self)) it))) ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] var __result)) 
struct core_iter_Cycle 0 1 t_0 2 orig [var t_0] iter [var t_0] 0 
associated_type 0 1 t_0 core_iter_Iterator_Item 0 1 [adt core_iter_Cycle 0 1 [var t_0]] [abstract core_iter_Iterator_Item 0 1 [var t_0]] 
fn core_iter_Cycle__Iterator_next 0 1 t_0 args 1 self [ref_mut r_anon_0 [adt core_iter_Cycle 0 1 [var t_0]]] return [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] 1 core_iter_Iterator_next 0 1 [adt core_iter_Cycle 0 1 [var t_0]] body ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] block 1 let __result_0 [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] match ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] call core_iter_Iterator_next 0 1 [var t_0] 1 ([ref_mut r_scope_87275 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Cycle 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Cycle 0 1 [var t_0]]] var self)) iter))) 2 ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] enum core_option_None 0 0) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] block 2 expr ([unit] assign ([var t_0] field ([adt core_iter_Cycle 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Cycle 0 1 [var t_0]]] var self)) iter) ([var t_0] call core_clone_Clone_clone 0 1 [var t_0] 1 ([ref r_scope_87285 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Cycle 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Cycle 0 1 [var t_0]]] var self)) orig)))) let __result [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] call core_iter_Iterator_next 0 1 [var t_0] 1 ([ref_mut r_scope_87288 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Cycle 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Cycle 0 1 [var t_0]]] var self)) iter))) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] var __result)) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] var y) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] var y)) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] var __result_0)) 
fn core_iter_Cycle__RandomAccessIterator_indexable 0 1 t_0 args 1 self [ref r_anon_0 [adt core_iter_Cycle 0 1 [var t_0]]] return [uint 32] 1 core_iter_RandomAccessIterator_indexable 0 1 [adt core_iter_Cycle 0 1 [var t_0]] body ([uint 32] block 1 let __result_1 [uint 32] ([uint 32] match ([int 32] cast ([bool] binop BiGt ([uint 32] call core_iter_RandomAccessIterator_indexable 0 1 [var t_0] 1 ([ref r_scope_87351 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Cycle 0 1 [var t_0]] deref ([ref r_anon_0 [adt core_iter_Cycle 0 1 [var t_0]]] var self)) orig))) ([uint 32] simple_literal 0)) [int 32]) 2 ([int 32] simple_literal 0) ([uint 32] block 1 let __result [uint 32] ([uint 32] simple_literal 0) ([uint 32] var __result)) ([int 32] wild) ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] binop BiSub ([uint 32] cast ([uint 32] simple_literal 0) [uint 32]) ([uint 32] cast ([uint 32] simple_literal 1) [uint 32])) ([uint 32] var __result_0))) ([uint 32] var __result_1)) 
fn core_iter_Cycle__RandomAccessIterator_idx 0 1 t_0 args 2 self [ref_mut r_anon_0 [adt core_iter_Cycle 0 1 [var t_0]]] index [uint 32] return [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] 1 core_iter_RandomAccessIterator_idx 0 1 [adt core_iter_Cycle 0 1 [var t_0]] body ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] block 5 let __drop_liter [bool] ([bool] simple_literal false) let liter [uint 32] ([uint 32] call core_iter_RandomAccessIterator_indexable 0 1 [var t_0] 1 ([ref r_scope_87379 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Cycle 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Cycle 0 1 [var t_0]]] var self)) iter))) let lorig [uint 32] ([uint 32] call core_iter_RandomAccessIterator_indexable 0 1 [var t_0] 1 ([ref r_scope_87385 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Cycle 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Cycle 0 1 [var t_0]]] var self)) orig))) let __result_2 [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] match ([int 32] cast ([bool] binop BiEq ([uint 32] var lorig) ([uint 32] simple_literal 0)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] match ([int 32] cast ([bool] binop BiLt ([uint 32] var index) ([uint 32] var liter)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] block 1 let __result [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] call core_iter_RandomAccessIterator_idx 0 1 [var t_0] 2 ([ref_mut r_scope_87405 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Cycle 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Cycle 0 1 [var t_0]]] var self)) orig)) ([uint 32] binop BiRem ([uint 32] binop BiSub ([uint 32] var index) ([uint 32] var liter)) ([uint 32] var lorig))) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] block 1 let __result_0 [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] call core_iter_RandomAccessIterator_idx 0 1 [var t_0] 2 ([ref_mut r_scope_87399 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Cycle 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Cycle 0 1 [var t_0]]] var self)) iter)) ([uint 32] var index)) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] var __result_0))) ([int 32] wild) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] block 1 let __result_1 [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] var __result_1))) expr ([unit] match ([bool] var __drop_liter) 2 ([bool] simple_literal 0) ([unit] simple_literal _unit) ([bool] wild) ([unit] call drop_glue 0 1 [uint 32] 1 ([ptr_mut [uint 32]] addr_of ([uint 32] var liter)))) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] var __result_2)) 
struct core_iter_Chain 0 2 t_0 t_1 3 a [var t_0] b [var t_1] flag [bool] 0 
associated_type 0 3 t_0 t_1 t_2 core_iter_Iterator_Item 0 1 [adt core_iter_Chain 0 2 [var t_1] [var t_2]] [var t_0] 
fn core_iter_Chain__Iterator_next 0 3 t_0 t_1 t_2 args 1 self [ref_mut r_anon_0 [adt core_iter_Chain 0 2 [var t_1] [var t_2]]] return [adt core_option_Option 0 1 [var t_0]] 1 core_iter_Iterator_next 0 1 [adt core_iter_Chain 0 2 [var t_1] [var t_2]] body ([adt core_option_Option 0 1 [var t_0]] block 1 let __result_1 [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] match ([int 32] cast ([bool] field ([adt core_iter_Chain 0 2 [var t_1] [var t_2]] deref ([ref_mut r_anon_0 [adt core_iter_Chain 0 2 [var t_1] [var t_2]]] var self)) flag) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [var t_0]] block 3 expr ([unit] match ([adt core_option_Option 0 1 [var t_0]] call core_iter_Iterator_next 0 1 [var t_1] 1 ([ref_mut r_scope_87514 [var t_1]] addr_of ([var t_1] field ([adt core_iter_Chain 0 2 [var t_1] [var t_2]] deref ([ref_mut r_anon_0 [adt core_iter_Chain 0 2 [var t_1] [var t_2]]] var self)) a))) 2 ([adt core_option_Option 0 1 [var t_0]] enum core_option_Some 1 1 ([var t_0] var x)) ([unit] return ([adt core_option_Option 0 1 [var t_0]] enum_literal core_option_Some 1 1 ([var t_0] var x))) ([adt core_option_Option 0 1 [var t_0]] wild) ([unit] simple_literal _)) expr ([unit] assign ([bool] field ([adt core_iter_Chain 0 2 [var t_1] [var t_2]] deref ([ref_mut r_anon_0 [adt core_iter_Chain 0 2 [var t_1] [var t_2]]] var self)) flag) ([bool] simple_literal true)) let __result [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] call core_iter_Iterator_next 0 1 [var t_2] 1 ([ref_mut r_scope_87530 [var t_2]] addr_of ([var t_2] field ([adt core_iter_Chain 0 2 [var t_1] [var t_2]] deref ([ref_mut r_anon_0 [adt core_iter_Chain 0 2 [var t_1] [var t_2]]] var self)) b))) ([adt core_option_Option 0 1 [var t_0]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [var t_0]] block 1 let __result_0 [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] call core_iter_Iterator_next 0 1 [var t_2] 1 ([ref_mut r_scope_87507 [var t_2]] addr_of ([var t_2] field ([adt core_iter_Chain 0 2 [var t_1] [var t_2]] deref ([ref_mut r_anon_0 [adt core_iter_Chain 0 2 [var t_1] [var t_2]]] var self)) b))) ([adt core_option_Option 0 1 [var t_0]] var __result_0))) ([adt core_option_Option 0 1 [var t_0]] var __result_1)) 
fn core_iter_Chain__DoubleEndedIterator_next_back 0 3 t_0 t_1 t_2 args 1 self [ref_mut r_anon_0 [adt core_iter_Chain 0 2 [var t_1] [var t_2]]] return [adt core_option_Option 0 1 [var t_0]] 1 core_iter_DoubleEndedIterator_next_back 0 1 [adt core_iter_Chain 0 2 [var t_1] [var t_2]] body ([adt core_option_Option 0 1 [var t_0]] block 1 let __result [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] match ([adt core_option_Option 0 1 [var t_0]] call core_iter_DoubleEndedIterator_next_back 0 1 [var t_2] 1 ([ref_mut r_scope_87623 [var t_2]] addr_of ([var t_2] field ([adt core_iter_Chain 0 2 [var t_1] [var t_2]] deref ([ref_mut r_anon_0 [adt core_iter_Chain 0 2 [var t_1] [var t_2]]] var self)) b))) 2 ([adt core_option_Option 0 1 [var t_0]] enum core_option_Some 1 1 ([var t_0] var x)) ([adt core_option_Option 0 1 [var t_0]] enum_literal core_option_Some 1 1 ([var t_0] var x)) ([adt core_option_Option 0 1 [var t_0]] enum core_option_None 0 0) ([adt core_option_Option 0 1 [var t_0]] call core_iter_DoubleEndedIterator_next_back 0 1 [var t_1] 1 ([ref_mut r_scope_87632 [var t_1]] addr_of ([var t_1] field ([adt core_iter_Chain 0 2 [var t_1] [var t_2]] deref ([ref_mut r_anon_0 [adt core_iter_Chain 0 2 [var t_1] [var t_2]]] var self)) a)))) ([adt core_option_Option 0 1 [var t_0]] var __result)) 
fn core_iter_Chain__RandomAccessIterator_idx 0 3 t_0 t_1 t_2 args 2 self [ref_mut r_anon_0 [adt core_iter_Chain 0 2 [var t_1] [var t_2]]] index [uint 32] return [adt core_option_Option 0 1 [var t_0]] 1 core_iter_RandomAccessIterator_idx 0 1 [adt core_iter_Chain 0 2 [var t_1] [var t_2]] body ([adt core_option_Option 0 1 [var t_0]] block 2 let len [uint 32] ([uint 32] call core_iter_RandomAccessIterator_indexable 0 1 [var t_1] 1 ([ref r_scope_87699 [var t_1]] addr_of ([var t_1] field ([adt core_iter_Chain 0 2 [var t_1] [var t_2]] deref ([ref_mut r_anon_0 [adt core_iter_Chain 0 2 [var t_1] [var t_2]]] var self)) a))) let __result_1 [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] match ([int 32] cast ([bool] binop BiLt ([uint 32] var index) ([uint 32] var len)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [var t_0]] block 1 let __result [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] call core_iter_RandomAccessIterator_idx 0 1 [var t_2] 2 ([ref_mut r_scope_87713 [var t_2]] addr_of ([var t_2] field ([adt core_iter_Chain 0 2 [var t_1] [var t_2]] deref ([ref_mut r_anon_0 [adt core_iter_Chain 0 2 [var t_1] [var t_2]]] var self)) b)) ([uint 32] binop BiSub ([uint 32] var index) ([uint 32] var len))) ([adt core_option_Option 0 1 [var t_0]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [var t_0]] block 1 let __result_0 [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] call core_iter_RandomAccessIterator_idx 0 1 [var t_1] 2 ([ref_mut r_scope_87707 [var t_1]] addr_of ([var t_1] field ([adt core_iter_Chain 0 2 [var t_1] [var t_2]] deref ([ref_mut r_anon_0 [adt core_iter_Chain 0 2 [var t_1] [var t_2]]] var self)) a)) ([uint 32] var index)) ([adt core_option_Option 0 1 [var t_0]] var __result_0))) ([adt core_option_Option 0 1 [var t_0]] var __result_1)) 
struct core_iter_Zip 0 2 t_0 t_1 2 a [var t_0] b [var t_1] 0 
associated_type 0 4 t_0 t_1 t_2 t_3 core_iter_Iterator_Item 0 1 [adt core_iter_Zip 0 2 [var t_2] [var t_3]] [tuple 2 [var t_0] [var t_1]] 
fn core_iter_Zip__Iterator_next 0 4 t_0 t_1 t_2 t_3 args 1 self [ref_mut r_anon_0 [adt core_iter_Zip 0 2 [var t_2] [var t_3]]] return [adt core_option_Option 0 1 [tuple 2 [var t_0] [var t_1]]] 1 core_iter_Iterator_next 0 1 [adt core_iter_Zip 0 2 [var t_2] [var t_3]] body ([adt core_option_Option 0 1 [tuple 2 [var t_0] [var t_1]]] block 1 let __result [adt core_option_Option 0 1 [tuple 2 [var t_0] [var t_1]]] ([adt core_option_Option 0 1 [tuple 2 [var t_0] [var t_1]]] match ([adt core_option_Option 0 1 [var t_0]] call core_iter_Iterator_next 0 1 [var t_2] 1 ([ref_mut r_scope_87817 [var t_2]] addr_of ([var t_2] field ([adt core_iter_Zip 0 2 [var t_2] [var t_3]] deref ([ref_mut r_anon_0 [adt core_iter_Zip 0 2 [var t_2] [var t_3]]] var self)) a))) 2 ([adt core_option_Option 0 1 [var t_0]] enum core_option_None 0 0) ([adt core_option_Option 0 1 [tuple 2 [var t_0] [var t_1]]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [var t_0]] enum core_option_Some 1 1 ([var t_0] var x)) ([adt core_option_Option 0 1 [tuple 2 [var t_0] [var t_1]]] match ([adt core_option_Option 0 1 [var t_1]] call core_iter_Iterator_next 0 1 [var t_3] 1 ([ref_mut r_scope_87825 [var t_3]] addr_of ([var t_3] field ([adt core_iter_Zip 0 2 [var t_2] [var t_3]] deref ([ref_mut r_anon_0 [adt core_iter_Zip 0 2 [var t_2] [var t_3]]] var self)) b))) 2 ([adt core_option_Option 0 1 [var t_1]] enum core_option_None 0 0) ([adt core_option_Option 0 1 [tuple 2 [var t_0] [var t_1]]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [var t_1]] enum core_option_Some 1 1 ([var t_1] var y)) ([adt core_option_Option 0 1 [tuple 2 [var t_0] [var t_1]]] enum_literal core_option_Some 1 1 ([tuple 2 [var t_0] [var t_1]] tuple_literal 2 ([var t_0] var x) ([var t_1] var y))))) ([adt core_option_Option 0 1 [tuple 2 [var t_0] [var t_1]]] var __result)) 
fn core_iter_Zip__RandomAccessIterator_indexable 0 4 t_0 t_1 t_2 t_3 args 1 self [ref r_anon_0 [adt core_iter_Zip 0 2 [var t_2] [var t_3]]] return [uint 32] 1 core_iter_RandomAccessIterator_indexable 0 1 [adt core_iter_Zip 0 2 [var t_2] [var t_3]] body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_cmp_min 0 1 [uint 32] 2 ([uint 32] call core_iter_RandomAccessIterator_indexable 0 1 [var t_2] 1 ([ref r_scope_88086 [var t_2]] addr_of ([var t_2] field ([adt core_iter_Zip 0 2 [var t_2] [var t_3]] deref ([ref r_anon_0 [adt core_iter_Zip 0 2 [var t_2] [var t_3]]] var self)) a))) ([uint 32] call core_iter_RandomAccessIterator_indexable 0 1 [var t_3] 1 ([ref r_scope_88089 [var t_3]] addr_of ([var t_3] field ([adt core_iter_Zip 0 2 [var t_2] [var t_3]] deref ([ref r_anon_0 [adt core_iter_Zip 0 2 [var t_2] [var t_3]]] var self)) b)))) ([uint 32] var __result)) 
fn core_iter_Zip__RandomAccessIterator_idx 0 4 t_0 t_1 t_2 t_3 args 2 self [ref_mut r_anon_0 [adt core_iter_Zip 0 2 [var t_2] [var t_3]]] index [uint 32] return [adt core_option_Option 0 1 [tuple 2 [var t_0] [var t_1]]] 1 core_iter_RandomAccessIterator_idx 0 1 [adt core_iter_Zip 0 2 [var t_2] [var t_3]] body ([adt core_option_Option 0 1 [tuple 2 [var t_0] [var t_1]]] block 1 let __result [adt core_option_Option 0 1 [tuple 2 [var t_0] [var t_1]]] ([adt core_option_Option 0 1 [tuple 2 [var t_0] [var t_1]]] match ([adt core_option_Option 0 1 [var t_0]] call core_iter_RandomAccessIterator_idx 0 1 [var t_2] 2 ([ref_mut r_scope_88110 [var t_2]] addr_of ([var t_2] field ([adt core_iter_Zip 0 2 [var t_2] [var t_3]] deref ([ref_mut r_anon_0 [adt core_iter_Zip 0 2 [var t_2] [var t_3]]] var self)) a)) ([uint 32] var index)) 2 ([adt core_option_Option 0 1 [var t_0]] enum core_option_None 0 0) ([adt core_option_Option 0 1 [tuple 2 [var t_0] [var t_1]]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [var t_0]] enum core_option_Some 1 1 ([var t_0] var x)) ([adt core_option_Option 0 1 [tuple 2 [var t_0] [var t_1]]] match ([adt core_option_Option 0 1 [var t_1]] call core_iter_RandomAccessIterator_idx 0 1 [var t_3] 2 ([ref_mut r_scope_88119 [var t_3]] addr_of ([var t_3] field ([adt core_iter_Zip 0 2 [var t_2] [var t_3]] deref ([ref_mut r_anon_0 [adt core_iter_Zip 0 2 [var t_2] [var t_3]]] var self)) b)) ([uint 32] var index)) 2 ([adt core_option_Option 0 1 [var t_1]] enum core_option_None 0 0) ([adt core_option_Option 0 1 [tuple 2 [var t_0] [var t_1]]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [var t_1]] enum core_option_Some 1 1 ([var t_1] var y)) ([adt core_option_Option 0 1 [tuple 2 [var t_0] [var t_1]]] enum_literal core_option_Some 1 1 ([tuple 2 [var t_0] [var t_1]] tuple_literal 2 ([var t_0] var x) ([var t_1] var y))))) ([adt core_option_Option 0 1 [tuple 2 [var t_0] [var t_1]]] var __result)) 
struct core_iter_Map 0 4 t_0 t_1 t_2 t_3 2 iter [var t_2] f [var t_3] 0 
fn core_iter_Map__Clone_clone 0 4 t_0 t_1 t_2 t_3 args 1 self [ref r_anon_0 [adt core_iter_Map 0 4 [var t_0] [var t_1] [var t_2] [var t_3]]] return [adt core_iter_Map 0 4 [var t_0] [var t_1] [var t_2] [var t_3]] 1 core_clone_Clone_clone 0 1 [adt core_iter_Map 0 4 [var t_0] [var t_1] [var t_2] [var t_3]] body ([adt core_iter_Map 0 4 [var t_0] [var t_1] [var t_2] [var t_3]] block 1 let __result [adt core_iter_Map 0 4 [var t_0] [var t_1] [var t_2] [var t_3]] ([adt core_iter_Map 0 4 [var t_0] [var t_1] [var t_2] [var t_3]] struct_literal 2 iter ([var t_2] call core_clone_Clone_clone 0 1 [var t_2] 1 ([ref r_scope_88195 [var t_2]] addr_of ([var t_2] field ([adt core_iter_Map 0 4 [var t_0] [var t_1] [var t_2] [var t_3]] deref ([ref r_anon_0 [adt core_iter_Map 0 4 [var t_0] [var t_1] [var t_2] [var t_3]]] var self)) iter))) f ([var t_3] call core_clone_Clone_clone 0 1 [var t_3] 1 ([ref r_scope_88198 [var t_3]] addr_of ([var t_3] field ([adt core_iter_Map 0 4 [var t_0] [var t_1] [var t_2] [var t_3]] deref ([ref r_anon_0 [adt core_iter_Map 0 4 [var t_0] [var t_1] [var t_2] [var t_3]]] var self)) f)))) ([adt core_iter_Map 0 4 [var t_0] [var t_1] [var t_2] [var t_3]] var __result)) 
associated_type 0 4 t_0 t_1 t_2 t_3 core_iter_Iterator_Item 0 1 [adt core_iter_Map 0 4 [var t_0] [var t_1] [var t_2] [var t_3]] [var t_1] 
fn core_iter_Map__Iterator_size_hint 0 4 t_0 t_1 t_2 t_3 args 1 self [ref r_anon_0 [adt core_iter_Map 0 4 [var t_0] [var t_1] [var t_2] [var t_3]]] return [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] 1 core_iter_Iterator_size_hint 0 1 [adt core_iter_Map 0 4 [var t_0] [var t_1] [var t_2] [var t_3]] body ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] block 1 let __result [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] call core_iter_Iterator_size_hint 0 1 [var t_2] 1 ([ref r_scope_88326 [var t_2]] addr_of ([var t_2] field ([adt core_iter_Map 0 4 [var t_0] [var t_1] [var t_2] [var t_3]] deref ([ref r_anon_0 [adt core_iter_Map 0 4 [var t_0] [var t_1] [var t_2] [var t_3]]] var self)) iter))) ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] var __result)) 
fn core_iter_Map__RandomAccessIterator_indexable 0 4 t_0 t_1 t_2 t_3 args 1 self [ref r_anon_0 [adt core_iter_Map 0 4 [var t_0] [var t_1] [var t_2] [var t_3]]] return [uint 32] 1 core_iter_RandomAccessIterator_indexable 0 1 [adt core_iter_Map 0 4 [var t_0] [var t_1] [var t_2] [var t_3]] body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_iter_RandomAccessIterator_indexable 0 1 [var t_2] 1 ([ref r_scope_88416 [var t_2]] addr_of ([var t_2] field ([adt core_iter_Map 0 4 [var t_0] [var t_1] [var t_2] [var t_3]] deref ([ref r_anon_0 [adt core_iter_Map 0 4 [var t_0] [var t_1] [var t_2] [var t_3]]] var self)) iter))) ([uint 32] var __result)) 
struct core_iter_Filter 0 3 t_0 t_1 t_2 2 iter [var t_1] predicate [var t_2] 0 
fn core_iter_Filter__Clone_clone 0 3 t_0 t_1 t_2 args 1 self [ref r_anon_0 [adt core_iter_Filter 0 3 [var t_0] [var t_1] [var t_2]]] return [adt core_iter_Filter 0 3 [var t_0] [var t_1] [var t_2]] 1 core_clone_Clone_clone 0 1 [adt core_iter_Filter 0 3 [var t_0] [var t_1] [var t_2]] body ([adt core_iter_Filter 0 3 [var t_0] [var t_1] [var t_2]] block 1 let __result [adt core_iter_Filter 0 3 [var t_0] [var t_1] [var t_2]] ([adt core_iter_Filter 0 3 [var t_0] [var t_1] [var t_2]] struct_literal 2 iter ([var t_1] call core_clone_Clone_clone 0 1 [var t_1] 1 ([ref r_scope_88513 [var t_1]] addr_of ([var t_1] field ([adt core_iter_Filter 0 3 [var t_0] [var t_1] [var t_2]] deref ([ref r_anon_0 [adt core_iter_Filter 0 3 [var t_0] [var t_1] [var t_2]]] var self)) iter))) predicate ([var t_2] call core_clone_Clone_clone 0 1 [var t_2] 1 ([ref r_scope_88516 [var t_2]] addr_of ([var t_2] field ([adt core_iter_Filter 0 3 [var t_0] [var t_1] [var t_2]] deref ([ref r_anon_0 [adt core_iter_Filter 0 3 [var t_0] [var t_1] [var t_2]]] var self)) predicate)))) ([adt core_iter_Filter 0 3 [var t_0] [var t_1] [var t_2]] var __result)) 
associated_type 0 3 t_0 t_1 t_2 core_iter_Iterator_Item 0 1 [adt core_iter_Filter 0 3 [var t_0] [var t_1] [var t_2]] [var t_0] 
struct core_iter_FilterMap 0 4 t_0 t_1 t_2 t_3 2 iter [var t_2] f [var t_3] 0 
fn core_iter_FilterMap__Clone_clone 0 4 t_0 t_1 t_2 t_3 args 1 self [ref r_anon_0 [adt core_iter_FilterMap 0 4 [var t_0] [var t_1] [var t_2] [var t_3]]] return [adt core_iter_FilterMap 0 4 [var t_0] [var t_1] [var t_2] [var t_3]] 1 core_clone_Clone_clone 0 1 [adt core_iter_FilterMap 0 4 [var t_0] [var t_1] [var t_2] [var t_3]] body ([adt core_iter_FilterMap 0 4 [var t_0] [var t_1] [var t_2] [var t_3]] block 1 let __result [adt core_iter_FilterMap 0 4 [var t_0] [var t_1] [var t_2] [var t_3]] ([adt core_iter_FilterMap 0 4 [var t_0] [var t_1] [var t_2] [var t_3]] struct_literal 2 iter ([var t_2] call core_clone_Clone_clone 0 1 [var t_2] 1 ([ref r_scope_88741 [var t_2]] addr_of ([var t_2] field ([adt core_iter_FilterMap 0 4 [var t_0] [var t_1] [var t_2] [var t_3]] deref ([ref r_anon_0 [adt core_iter_FilterMap 0 4 [var t_0] [var t_1] [var t_2] [var t_3]]] var self)) iter))) f ([var t_3] call core_clone_Clone_clone 0 1 [var t_3] 1 ([ref r_scope_88744 [var t_3]] addr_of ([var t_3] field ([adt core_iter_FilterMap 0 4 [var t_0] [var t_1] [var t_2] [var t_3]] deref ([ref r_anon_0 [adt core_iter_FilterMap 0 4 [var t_0] [var t_1] [var t_2] [var t_3]]] var self)) f)))) ([adt core_iter_FilterMap 0 4 [var t_0] [var t_1] [var t_2] [var t_3]] var __result)) 
associated_type 0 4 t_0 t_1 t_2 t_3 core_iter_Iterator_Item 0 1 [adt core_iter_FilterMap 0 4 [var t_0] [var t_1] [var t_2] [var t_3]] [var t_1] 
struct core_iter_Enumerate 0 1 t_0 2 iter [var t_0] count [uint 32] 0 
associated_type 0 1 t_0 core_iter_Iterator_Item 0 1 [adt core_iter_Enumerate 0 1 [var t_0]] [tuple 2 [uint 32] [abstract core_iter_Iterator_Item 0 1 [var t_0]]] 
fn core_iter_Enumerate__Iterator_size_hint 0 1 t_0 args 1 self [ref r_anon_0 [adt core_iter_Enumerate 0 1 [var t_0]]] return [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] 1 core_iter_Iterator_size_hint 0 1 [adt core_iter_Enumerate 0 1 [var t_0]] body ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] block 1 let __result [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] call core_iter_Iterator_size_hint 0 1 [var t_0] 1 ([ref r_scope_89044 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Enumerate 0 1 [var t_0]] deref ([ref r_anon_0 [adt core_iter_Enumerate 0 1 [var t_0]]] var self)) iter))) ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] var __result)) 
fn core_iter_Enumerate__DoubleEndedIterator_next_back 0 1 t_0 args 1 self [ref_mut r_anon_0 [adt core_iter_Enumerate 0 1 [var t_0]]] return [adt core_option_Option 0 1 [tuple 2 [uint 32] [abstract core_iter_Iterator_Item 0 1 [var t_0]]]] 1 core_iter_DoubleEndedIterator_next_back 0 1 [adt core_iter_Enumerate 0 1 [var t_0]] body ([adt core_option_Option 0 1 [tuple 2 [uint 32] [abstract core_iter_Iterator_Item 0 1 [var t_0]]]] block 1 let __result_0 [adt core_option_Option 0 1 [tuple 2 [uint 32] [abstract core_iter_Iterator_Item 0 1 [var t_0]]]] ([adt core_option_Option 0 1 [tuple 2 [uint 32] [abstract core_iter_Iterator_Item 0 1 [var t_0]]]] match ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] call core_iter_DoubleEndedIterator_next_back 0 1 [var t_0] 1 ([ref_mut r_scope_89074 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Enumerate 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Enumerate 0 1 [var t_0]]] var self)) iter))) 2 ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] enum core_option_Some 1 1 ([abstract core_iter_Iterator_Item 0 1 [var t_0]] var a)) ([adt core_option_Option 0 1 [tuple 2 [uint 32] [abstract core_iter_Iterator_Item 0 1 [var t_0]]]] block 2 let len [uint 32] ([uint 32] call core_iter_ExactSizeIterator_len 0 1 [var t_0] 1 ([ref r_scope_89084 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Enumerate 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Enumerate 0 1 [var t_0]]] var self)) iter))) let __result [adt core_option_Option 0 1 [tuple 2 [uint 32] [abstract core_iter_Iterator_Item 0 1 [var t_0]]]] ([adt core_option_Option 0 1 [tuple 2 [uint 32] [abstract core_iter_Iterator_Item 0 1 [var t_0]]]] enum_literal core_option_Some 1 1 ([tuple 2 [uint 32] [abstract core_iter_Iterator_Item 0 1 [var t_0]]] tuple_literal 2 ([uint 32] binop BiAdd ([uint 32] field ([adt core_iter_Enumerate 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Enumerate 0 1 [var t_0]]] var self)) count) ([uint 32] var len)) ([abstract core_iter_Iterator_Item 0 1 [var t_0]] var a))) ([adt core_option_Option 0 1 [tuple 2 [uint 32] [abstract core_iter_Iterator_Item 0 1 [var t_0]]]] var __result)) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] wild) ([adt core_option_Option 0 1 [tuple 2 [uint 32] [abstract core_iter_Iterator_Item 0 1 [var t_0]]]] enum_literal core_option_None 0 0)) ([adt core_option_Option 0 1 [tuple 2 [uint 32] [abstract core_iter_Iterator_Item 0 1 [var t_0]]]] var __result_0)) 
fn core_iter_Enumerate__RandomAccessIterator_indexable 0 1 t_0 args 1 self [ref r_anon_0 [adt core_iter_Enumerate 0 1 [var t_0]]] return [uint 32] 1 core_iter_RandomAccessIterator_indexable 0 1 [adt core_iter_Enumerate 0 1 [var t_0]] body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_iter_RandomAccessIterator_indexable 0 1 [var t_0] 1 ([ref r_scope_89117 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Enumerate 0 1 [var t_0]] deref ([ref r_anon_0 [adt core_iter_Enumerate 0 1 [var t_0]]] var self)) iter))) ([uint 32] var __result)) 
fn core_iter_Enumerate__RandomAccessIterator_idx 0 1 t_0 args 2 self [ref_mut r_anon_0 [adt core_iter_Enumerate 0 1 [var t_0]]] index [uint 32] return [adt core_option_Option 0 1 [tuple 2 [uint 32] [abstract core_iter_Iterator_Item 0 1 [var t_0]]]] 1 core_iter_RandomAccessIterator_idx 0 1 [adt core_iter_Enumerate 0 1 [var t_0]] body ([adt core_option_Option 0 1 [tuple 2 [uint 32] [abstract core_iter_Iterator_Item 0 1 [var t_0]]]] block 1 let __result [adt core_option_Option 0 1 [tuple 2 [uint 32] [abstract core_iter_Iterator_Item 0 1 [var t_0]]]] ([adt core_option_Option 0 1 [tuple 2 [uint 32] [abstract core_iter_Iterator_Item 0 1 [var t_0]]]] match ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] call core_iter_RandomAccessIterator_idx 0 1 [var t_0] 2 ([ref_mut r_scope_89140 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Enumerate 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Enumerate 0 1 [var t_0]]] var self)) iter)) ([uint 32] var index)) 2 ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] enum core_option_Some 1 1 ([abstract core_iter_Iterator_Item 0 1 [var t_0]] var a)) ([adt core_option_Option 0 1 [tuple 2 [uint 32] [abstract core_iter_Iterator_Item 0 1 [var t_0]]]] enum_literal core_option_Some 1 1 ([tuple 2 [uint 32] [abstract core_iter_Iterator_Item 0 1 [var t_0]]] tuple_literal 2 ([uint 32] binop BiAdd ([uint 32] field ([adt core_iter_Enumerate 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Enumerate 0 1 [var t_0]]] var self)) count) ([uint 32] var index)) ([abstract core_iter_Iterator_Item 0 1 [var t_0]] var a))) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] wild) ([adt core_option_Option 0 1 [tuple 2 [uint 32] [abstract core_iter_Iterator_Item 0 1 [var t_0]]]] enum_literal core_option_None 0 0)) ([adt core_option_Option 0 1 [tuple 2 [uint 32] [abstract core_iter_Iterator_Item 0 1 [var t_0]]]] var __result)) 
struct core_iter_Peekable 0 2 t_0 t_1 2 iter [var t_1] peeked [adt core_option_Option 0 1 [var t_0]] 0 
associated_type 0 2 t_0 t_1 core_iter_Iterator_Item 0 1 [adt core_iter_Peekable 0 2 [var t_0] [var t_1]] [var t_0] 
fn core_iter_Peekable_peek 0 2 t_0 t_1 args 1 self [ref_mut r_anon_0 [adt core_iter_Peekable 0 2 [var t_0] [var t_1]]] return [adt core_option_Option 0 1 [ref r_anon_0 [var t_0]]] 0 body ([adt core_option_Option 0 1 [ref r_anon_0 [var t_0]]] block 2 expr ([unit] match ([int 32] cast ([bool] call core_option_Option_is_none 0 1 [var t_0] 1 ([ref r_scope_89329 [adt core_option_Option 0 1 [var t_0]]] addr_of ([adt core_option_Option 0 1 [var t_0]] field ([adt core_iter_Peekable 0 2 [var t_0] [var t_1]] deref ([ref_mut r_anon_0 [adt core_iter_Peekable 0 2 [var t_0] [var t_1]]] var self)) peeked))) [int 32]) 2 ([int 32] simple_literal 0) ([unit] simple_literal _ExprIf) ([int 32] wild) ([unit] block 2 expr ([unit] assign ([adt core_option_Option 0 1 [var t_0]] field ([adt core_iter_Peekable 0 2 [var t_0] [var t_1]] deref ([ref_mut r_anon_0 [adt core_iter_Peekable 0 2 [var t_0] [var t_1]]] var self)) peeked) ([adt core_option_Option 0 1 [var t_0]] call core_iter_Iterator_next 0 1 [var t_1] 1 ([ref_mut r_scope_89337 [var t_1]] addr_of ([var t_1] field ([adt core_iter_Peekable 0 2 [var t_0] [var t_1]] deref ([ref_mut r_anon_0 [adt core_iter_Peekable 0 2 [var t_0] [var t_1]]] var self)) iter)))) let __result [unit] ([unit] simple_literal _Block) ([unit] var __result))) let __result_0 [adt core_option_Option 0 1 [ref r_anon_0 [var t_0]]] ([adt core_option_Option 0 1 [ref r_anon_0 [var t_0]]] match ([adt core_option_Option 0 1 [var t_0]] field ([adt core_iter_Peekable 0 2 [var t_0] [var t_1]] deref ([ref_mut r_anon_0 [adt core_iter_Peekable 0 2 [var t_0] [var t_1]]] var self)) peeked) 2 ([adt core_option_Option 0 1 [var t_0]] enum core_option_Some 1 1 ([ref r_anon_0 [var t_0]] var value)) ([adt core_option_Option 0 1 [ref r_anon_0 [var t_0]]] enum_literal core_option_Some 1 1 ([ref r_anon_0 [var t_0]] var value)) ([adt core_option_Option 0 1 [var t_0]] enum core_option_None 0 0) ([adt core_option_Option 0 1 [ref r_anon_0 [var t_0]]] enum_literal core_option_None 0 0)) ([adt core_option_Option 0 1 [ref r_anon_0 [var t_0]]] var __result_0)) 
fn core_iter_Peekable_is_empty 0 2 t_0 t_1 args 1 self [ref_mut r_anon_0 [adt core_iter_Peekable 0 2 [var t_0] [var t_1]]] return [bool] 0 body ([bool] block 1 let __result [bool] ([bool] call core_option_Option_is_none 0 1 [ref r_scope_89358 [var t_0]] 1 ([adt core_option_Option 0 1 [ref r_scope_89358 [var t_0]]] call core_iter_Peekable_peek 0 2 [var t_0] [var t_1] 1 ([ref_mut r_anon_0 [adt core_iter_Peekable 0 2 [var t_0] [var t_1]]] var self))) ([bool] var __result)) 
struct core_iter_SkipWhile 0 3 t_0 t_1 t_2 3 iter [var t_1] flag [bool] predicate [var t_2] 0 
fn core_iter_SkipWhile__Clone_clone 0 3 t_0 t_1 t_2 args 1 self [ref r_anon_0 [adt core_iter_SkipWhile 0 3 [var t_0] [var t_1] [var t_2]]] return [adt core_iter_SkipWhile 0 3 [var t_0] [var t_1] [var t_2]] 1 core_clone_Clone_clone 0 1 [adt core_iter_SkipWhile 0 3 [var t_0] [var t_1] [var t_2]] body ([adt core_iter_SkipWhile 0 3 [var t_0] [var t_1] [var t_2]] block 1 let __result [adt core_iter_SkipWhile 0 3 [var t_0] [var t_1] [var t_2]] ([adt core_iter_SkipWhile 0 3 [var t_0] [var t_1] [var t_2]] struct_literal 3 iter ([var t_1] call core_clone_Clone_clone 0 1 [var t_1] 1 ([ref r_scope_89420 [var t_1]] addr_of ([var t_1] field ([adt core_iter_SkipWhile 0 3 [var t_0] [var t_1] [var t_2]] deref ([ref r_anon_0 [adt core_iter_SkipWhile 0 3 [var t_0] [var t_1] [var t_2]]] var self)) iter))) flag ([bool] field ([adt core_iter_SkipWhile 0 3 [var t_0] [var t_1] [var t_2]] deref ([ref r_anon_0 [adt core_iter_SkipWhile 0 3 [var t_0] [var t_1] [var t_2]]] var self)) flag) predicate ([var t_2] call core_clone_Clone_clone 0 1 [var t_2] 1 ([ref r_scope_89425 [var t_2]] addr_of ([var t_2] field ([adt core_iter_SkipWhile 0 3 [var t_0] [var t_1] [var t_2]] deref ([ref r_anon_0 [adt core_iter_SkipWhile 0 3 [var t_0] [var t_1] [var t_2]]] var self)) predicate)))) ([adt core_iter_SkipWhile 0 3 [var t_0] [var t_1] [var t_2]] var __result)) 
associated_type 0 3 t_0 t_1 t_2 core_iter_Iterator_Item 0 1 [adt core_iter_SkipWhile 0 3 [var t_0] [var t_1] [var t_2]] [var t_0] 
struct core_iter_TakeWhile 0 3 t_0 t_1 t_2 3 iter [var t_1] flag [bool] predicate [var t_2] 0 
fn core_iter_TakeWhile__Clone_clone 0 3 t_0 t_1 t_2 args 1 self [ref r_anon_0 [adt core_iter_TakeWhile 0 3 [var t_0] [var t_1] [var t_2]]] return [adt core_iter_TakeWhile 0 3 [var t_0] [var t_1] [var t_2]] 1 core_clone_Clone_clone 0 1 [adt core_iter_TakeWhile 0 3 [var t_0] [var t_1] [var t_2]] body ([adt core_iter_TakeWhile 0 3 [var t_0] [var t_1] [var t_2]] block 1 let __result [adt core_iter_TakeWhile 0 3 [var t_0] [var t_1] [var t_2]] ([adt core_iter_TakeWhile 0 3 [var t_0] [var t_1] [var t_2]] struct_literal 3 iter ([var t_1] call core_clone_Clone_clone 0 1 [var t_1] 1 ([ref r_scope_89595 [var t_1]] addr_of ([var t_1] field ([adt core_iter_TakeWhile 0 3 [var t_0] [var t_1] [var t_2]] deref ([ref r_anon_0 [adt core_iter_TakeWhile 0 3 [var t_0] [var t_1] [var t_2]]] var self)) iter))) flag ([bool] field ([adt core_iter_TakeWhile 0 3 [var t_0] [var t_1] [var t_2]] deref ([ref r_anon_0 [adt core_iter_TakeWhile 0 3 [var t_0] [var t_1] [var t_2]]] var self)) flag) predicate ([var t_2] call core_clone_Clone_clone 0 1 [var t_2] 1 ([ref r_scope_89600 [var t_2]] addr_of ([var t_2] field ([adt core_iter_TakeWhile 0 3 [var t_0] [var t_1] [var t_2]] deref ([ref r_anon_0 [adt core_iter_TakeWhile 0 3 [var t_0] [var t_1] [var t_2]]] var self)) predicate)))) ([adt core_iter_TakeWhile 0 3 [var t_0] [var t_1] [var t_2]] var __result)) 
associated_type 0 3 t_0 t_1 t_2 core_iter_Iterator_Item 0 1 [adt core_iter_TakeWhile 0 3 [var t_0] [var t_1] [var t_2]] [var t_0] 
struct core_iter_Skip 0 1 t_0 2 iter [var t_0] n [uint 32] 0 
associated_type 0 1 t_0 core_iter_Iterator_Item 0 1 [adt core_iter_Skip 0 1 [var t_0]] [abstract core_iter_Iterator_Item 0 1 [var t_0]] 
fn core_iter_Skip__RandomAccessIterator_indexable 0 1 t_0 args 1 self [ref r_anon_0 [adt core_iter_Skip 0 1 [var t_0]]] return [uint 32] 1 core_iter_RandomAccessIterator_indexable 0 1 [adt core_iter_Skip 0 1 [var t_0]] body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_num_Int_saturating_sub 0 1 [uint 32] 2 ([uint 32] call core_iter_RandomAccessIterator_indexable 0 1 [var t_0] 1 ([ref r_scope_89923 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Skip 0 1 [var t_0]] deref ([ref r_anon_0 [adt core_iter_Skip 0 1 [var t_0]]] var self)) iter))) ([uint 32] field ([adt core_iter_Skip 0 1 [var t_0]] deref ([ref r_anon_0 [adt core_iter_Skip 0 1 [var t_0]]] var self)) n)) ([uint 32] var __result)) 
fn core_iter_Skip__RandomAccessIterator_idx 0 1 t_0 args 2 self [ref_mut r_anon_0 [adt core_iter_Skip 0 1 [var t_0]]] index [uint 32] return [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] 1 core_iter_RandomAccessIterator_idx 0 1 [adt core_iter_Skip 0 1 [var t_0]] body ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] block 1 let __result_1 [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] match ([int 32] cast ([bool] binop BiGe ([uint 32] var index) ([uint 32] call core_iter_RandomAccessIterator_indexable 0 1 [adt core_iter_Skip 0 1 [var t_0]] 1 ([ref_mut r_anon_0 [adt core_iter_Skip 0 1 [var t_0]]] var self))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] block 1 let __result [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] call core_iter_RandomAccessIterator_idx 0 1 [var t_0] 2 ([ref_mut r_scope_89953 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Skip 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Skip 0 1 [var t_0]]] var self)) iter)) ([uint 32] binop BiAdd ([uint 32] var index) ([uint 32] field ([adt core_iter_Skip 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Skip 0 1 [var t_0]]] var self)) n))) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] block 1 let __result_0 [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] var __result_0))) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] var __result_1)) 
struct core_iter_Take 0 1 t_0 2 iter [var t_0] n [uint 32] 0 
associated_type 0 1 t_0 core_iter_Iterator_Item 0 1 [adt core_iter_Take 0 1 [var t_0]] [abstract core_iter_Iterator_Item 0 1 [var t_0]] 
fn core_iter_Take__RandomAccessIterator_indexable 0 1 t_0 args 1 self [ref r_anon_0 [adt core_iter_Take 0 1 [var t_0]]] return [uint 32] 1 core_iter_RandomAccessIterator_indexable 0 1 [adt core_iter_Take 0 1 [var t_0]] body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_cmp_min 0 1 [uint 32] 2 ([uint 32] call core_iter_RandomAccessIterator_indexable 0 1 [var t_0] 1 ([ref r_scope_90135 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Take 0 1 [var t_0]] deref ([ref r_anon_0 [adt core_iter_Take 0 1 [var t_0]]] var self)) iter))) ([uint 32] field ([adt core_iter_Take 0 1 [var t_0]] deref ([ref r_anon_0 [adt core_iter_Take 0 1 [var t_0]]] var self)) n)) ([uint 32] var __result)) 
fn core_iter_Take__RandomAccessIterator_idx 0 1 t_0 args 2 self [ref_mut r_anon_0 [adt core_iter_Take 0 1 [var t_0]]] index [uint 32] return [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] 1 core_iter_RandomAccessIterator_idx 0 1 [adt core_iter_Take 0 1 [var t_0]] body ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] block 1 let __result_1 [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] match ([int 32] cast ([bool] binop BiGe ([uint 32] var index) ([uint 32] field ([adt core_iter_Take 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Take 0 1 [var t_0]]] var self)) n)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] block 1 let __result [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] call core_iter_RandomAccessIterator_idx 0 1 [var t_0] 2 ([ref_mut r_scope_90165 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Take 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Take 0 1 [var t_0]]] var self)) iter)) ([uint 32] var index)) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] block 1 let __result_0 [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] var __result_0))) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] var __result_1)) 
struct core_iter_Scan 0 5 t_0 t_1 t_2 t_3 t_4 3 iter [var t_2] f [var t_4] state [var t_3] 0 
fn core_iter_Scan__Clone_clone 0 5 t_0 t_1 t_2 t_3 t_4 args 1 self [ref r_anon_0 [adt core_iter_Scan 0 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]]] return [adt core_iter_Scan 0 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]] 1 core_clone_Clone_clone 0 1 [adt core_iter_Scan 0 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]] body ([adt core_iter_Scan 0 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]] block 1 let __result [adt core_iter_Scan 0 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]] ([adt core_iter_Scan 0 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]] struct_literal 3 iter ([var t_2] call core_clone_Clone_clone 0 1 [var t_2] 1 ([ref r_scope_90241 [var t_2]] addr_of ([var t_2] field ([adt core_iter_Scan 0 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]] deref ([ref r_anon_0 [adt core_iter_Scan 0 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]]] var self)) iter))) f ([var t_4] call core_clone_Clone_clone 0 1 [var t_4] 1 ([ref r_scope_90244 [var t_4]] addr_of ([var t_4] field ([adt core_iter_Scan 0 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]] deref ([ref r_anon_0 [adt core_iter_Scan 0 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]]] var self)) f))) state ([var t_3] call core_clone_Clone_clone 0 1 [var t_3] 1 ([ref r_scope_90247 [var t_3]] addr_of ([var t_3] field ([adt core_iter_Scan 0 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]] deref ([ref r_anon_0 [adt core_iter_Scan 0 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]]] var self)) state)))) ([adt core_iter_Scan 0 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]] var __result)) 
associated_type 0 5 t_0 t_1 t_2 t_3 t_4 core_iter_Iterator_Item 0 1 [adt core_iter_Scan 0 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]] [var t_1] 
struct core_iter_FlatMap 0 5 t_0 t_1 t_2 t_3 t_4 4 iter [var t_2] f [var t_4] frontiter [adt core_option_Option 0 1 [var t_3]] backiter [adt core_option_Option 0 1 [var t_3]] 0 
fn core_iter_FlatMap__Clone_clone 0 5 t_0 t_1 t_2 t_3 t_4 args 1 self [ref r_anon_0 [adt core_iter_FlatMap 0 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]]] return [adt core_iter_FlatMap 0 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]] 1 core_clone_Clone_clone 0 1 [adt core_iter_FlatMap 0 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]] body ([adt core_iter_FlatMap 0 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]] block 1 let __result [adt core_iter_FlatMap 0 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]] ([adt core_iter_FlatMap 0 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]] struct_literal 4 iter ([var t_2] call core_clone_Clone_clone 0 1 [var t_2] 1 ([ref r_scope_90446 [var t_2]] addr_of ([var t_2] field ([adt core_iter_FlatMap 0 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]] deref ([ref r_anon_0 [adt core_iter_FlatMap 0 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]]] var self)) iter))) f ([var t_4] call core_clone_Clone_clone 0 1 [var t_4] 1 ([ref r_scope_90449 [var t_4]] addr_of ([var t_4] field ([adt core_iter_FlatMap 0 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]] deref ([ref r_anon_0 [adt core_iter_FlatMap 0 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]]] var self)) f))) frontiter ([adt core_option_Option 0 1 [var t_3]] call core_clone_Clone_clone 0 1 [adt core_option_Option 0 1 [var t_3]] 1 ([ref r_scope_90452 [adt core_option_Option 0 1 [var t_3]]] addr_of ([adt core_option_Option 0 1 [var t_3]] field ([adt core_iter_FlatMap 0 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]] deref ([ref r_anon_0 [adt core_iter_FlatMap 0 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]]] var self)) frontiter))) backiter ([adt core_option_Option 0 1 [var t_3]] call core_clone_Clone_clone 0 1 [adt core_option_Option 0 1 [var t_3]] 1 ([ref r_scope_90455 [adt core_option_Option 0 1 [var t_3]]] addr_of ([adt core_option_Option 0 1 [var t_3]] field ([adt core_iter_FlatMap 0 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]] deref ([ref r_anon_0 [adt core_iter_FlatMap 0 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]]] var self)) backiter)))) ([adt core_iter_FlatMap 0 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]] var __result)) 
associated_type 0 5 t_0 t_1 t_2 t_3 t_4 core_iter_Iterator_Item 0 1 [adt core_iter_FlatMap 0 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]] [var t_1] 
struct core_iter_Fuse 0 1 t_0 2 iter [var t_0] done [bool] 0 
associated_type 0 1 t_0 core_iter_Iterator_Item 0 1 [adt core_iter_Fuse 0 1 [var t_0]] [abstract core_iter_Iterator_Item 0 1 [var t_0]] 
fn core_iter_Fuse__Iterator_next 0 1 t_0 args 1 self [ref_mut r_anon_0 [adt core_iter_Fuse 0 1 [var t_0]]] return [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] 1 core_iter_Iterator_next 0 1 [adt core_iter_Fuse 0 1 [var t_0]] body ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] block 1 let __result_2 [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] match ([int 32] cast ([bool] field ([adt core_iter_Fuse 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Fuse 0 1 [var t_0]]] var self)) done) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] block 1 let __result_0 [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] match ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] call core_iter_Iterator_next 0 1 [var t_0] 1 ([ref_mut r_scope_90862 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Fuse 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Fuse 0 1 [var t_0]]] var self)) iter))) 2 ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] enum core_option_None 0 0) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] block 2 expr ([unit] assign ([bool] field ([adt core_iter_Fuse 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Fuse 0 1 [var t_0]]] var self)) done) ([bool] simple_literal true)) let __result [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] var __result)) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] var x) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] var x)) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] var __result_0)) ([int 32] wild) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] block 1 let __result_1 [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] var __result_1))) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] var __result_2)) 
fn core_iter_Fuse__Iterator_size_hint 0 1 t_0 args 1 self [ref r_anon_0 [adt core_iter_Fuse 0 1 [var t_0]]] return [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] 1 core_iter_Iterator_size_hint 0 1 [adt core_iter_Fuse 0 1 [var t_0]] body ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] block 1 let __result_1 [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] match ([int 32] cast ([bool] field ([adt core_iter_Fuse 0 1 [var t_0]] deref ([ref r_anon_0 [adt core_iter_Fuse 0 1 [var t_0]]] var self)) done) [int 32]) 2 ([int 32] simple_literal 0) ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] block 1 let __result [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] call core_iter_Iterator_size_hint 0 1 [var t_0] 1 ([ref r_scope_90900 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Fuse 0 1 [var t_0]] deref ([ref r_anon_0 [adt core_iter_Fuse 0 1 [var t_0]]] var self)) iter))) ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] var __result)) ([int 32] wild) ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] block 1 let __result_0 [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] tuple_literal 2 ([uint 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] simple_literal 0))) ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] var __result_0))) ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] var __result_1)) 
fn core_iter_Fuse__DoubleEndedIterator_next_back 0 1 t_0 args 1 self [ref_mut r_anon_0 [adt core_iter_Fuse 0 1 [var t_0]]] return [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] 1 core_iter_DoubleEndedIterator_next_back 0 1 [adt core_iter_Fuse 0 1 [var t_0]] body ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] block 1 let __result_2 [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] match ([int 32] cast ([bool] field ([adt core_iter_Fuse 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Fuse 0 1 [var t_0]]] var self)) done) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] block 1 let __result_0 [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] match ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] call core_iter_DoubleEndedIterator_next_back 0 1 [var t_0] 1 ([ref_mut r_scope_90934 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Fuse 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Fuse 0 1 [var t_0]]] var self)) iter))) 2 ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] enum core_option_None 0 0) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] block 2 expr ([unit] assign ([bool] field ([adt core_iter_Fuse 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Fuse 0 1 [var t_0]]] var self)) done) ([bool] simple_literal true)) let __result [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] var __result)) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] var x) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] var x)) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] var __result_0)) ([int 32] wild) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] block 1 let __result_1 [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] var __result_1))) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] var __result_2)) 
fn core_iter_Fuse__RandomAccessIterator_indexable 0 1 t_0 args 1 self [ref r_anon_0 [adt core_iter_Fuse 0 1 [var t_0]]] return [uint 32] 1 core_iter_RandomAccessIterator_indexable 0 1 [adt core_iter_Fuse 0 1 [var t_0]] body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_iter_RandomAccessIterator_indexable 0 1 [var t_0] 1 ([ref r_scope_90967 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Fuse 0 1 [var t_0]] deref ([ref r_anon_0 [adt core_iter_Fuse 0 1 [var t_0]]] var self)) iter))) ([uint 32] var __result)) 
fn core_iter_Fuse__RandomAccessIterator_idx 0 1 t_0 args 2 self [ref_mut r_anon_0 [adt core_iter_Fuse 0 1 [var t_0]]] index [uint 32] return [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] 1 core_iter_RandomAccessIterator_idx 0 1 [adt core_iter_Fuse 0 1 [var t_0]] body ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] block 1 let __result [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] call core_iter_RandomAccessIterator_idx 0 1 [var t_0] 2 ([ref_mut r_scope_90986 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Fuse 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Fuse 0 1 [var t_0]]] var self)) iter)) ([uint 32] var index)) ([adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var t_0]]] var __result)) 
fn core_iter_Fuse_reset_fuse 0 1 t_0 args 1 self [ref_mut r_anon_0 [adt core_iter_Fuse 0 1 [var t_0]]] return [unit] 0 body ([unit] block 1 let __result [unit] ([unit] assign ([bool] field ([adt core_iter_Fuse 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Fuse 0 1 [var t_0]]] var self)) done) ([bool] simple_literal false)) ([unit] var __result)) 
struct core_iter_Inspect 0 3 t_0 t_1 t_2 2 iter [var t_1] f [var t_2] 0 
fn core_iter_Inspect__Clone_clone 0 3 t_0 t_1 t_2 args 1 self [ref r_anon_0 [adt core_iter_Inspect 0 3 [var t_0] [var t_1] [var t_2]]] return [adt core_iter_Inspect 0 3 [var t_0] [var t_1] [var t_2]] 1 core_clone_Clone_clone 0 1 [adt core_iter_Inspect 0 3 [var t_0] [var t_1] [var t_2]] body ([adt core_iter_Inspect 0 3 [var t_0] [var t_1] [var t_2]] block 1 let __result [adt core_iter_Inspect 0 3 [var t_0] [var t_1] [var t_2]] ([adt core_iter_Inspect 0 3 [var t_0] [var t_1] [var t_2]] struct_literal 2 iter ([var t_1] call core_clone_Clone_clone 0 1 [var t_1] 1 ([ref r_scope_91067 [var t_1]] addr_of ([var t_1] field ([adt core_iter_Inspect 0 3 [var t_0] [var t_1] [var t_2]] deref ([ref r_anon_0 [adt core_iter_Inspect 0 3 [var t_0] [var t_1] [var t_2]]] var self)) iter))) f ([var t_2] call core_clone_Clone_clone 0 1 [var t_2] 1 ([ref r_scope_91070 [var t_2]] addr_of ([var t_2] field ([adt core_iter_Inspect 0 3 [var t_0] [var t_1] [var t_2]] deref ([ref r_anon_0 [adt core_iter_Inspect 0 3 [var t_0] [var t_1] [var t_2]]] var self)) f)))) ([adt core_iter_Inspect 0 3 [var t_0] [var t_1] [var t_2]] var __result)) 
associated_type 0 3 t_0 t_1 t_2 core_iter_Iterator_Item 0 1 [adt core_iter_Inspect 0 3 [var t_0] [var t_1] [var t_2]] [var t_0] 
fn core_iter_Inspect__Iterator_size_hint 0 3 t_0 t_1 t_2 args 1 self [ref r_anon_0 [adt core_iter_Inspect 0 3 [var t_0] [var t_1] [var t_2]]] return [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] 1 core_iter_Iterator_size_hint 0 1 [adt core_iter_Inspect 0 3 [var t_0] [var t_1] [var t_2]] body ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] block 1 let __result [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] call core_iter_Iterator_size_hint 0 1 [var t_1] 1 ([ref r_scope_91190 [var t_1]] addr_of ([var t_1] field ([adt core_iter_Inspect 0 3 [var t_0] [var t_1] [var t_2]] deref ([ref r_anon_0 [adt core_iter_Inspect 0 3 [var t_0] [var t_1] [var t_2]]] var self)) iter))) ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] var __result)) 
fn core_iter_Inspect__RandomAccessIterator_indexable 0 3 t_0 t_1 t_2 args 1 self [ref r_anon_0 [adt core_iter_Inspect 0 3 [var t_0] [var t_1] [var t_2]]] return [uint 32] 1 core_iter_RandomAccessIterator_indexable 0 1 [adt core_iter_Inspect 0 3 [var t_0] [var t_1] [var t_2]] body ([uint 32] block 1 let __result [uint 32] ([uint 32] call core_iter_RandomAccessIterator_indexable 0 1 [var t_1] 1 ([ref r_scope_91272 [var t_1]] addr_of ([var t_1] field ([adt core_iter_Inspect 0 3 [var t_0] [var t_1] [var t_2]] deref ([ref r_anon_0 [adt core_iter_Inspect 0 3 [var t_0] [var t_1] [var t_2]]] var self)) iter))) ([uint 32] var __result)) 
struct core_iter_Unfold 0 3 t_0 t_1 t_2 2 f [var t_2] state [var t_1] 0 
fn core_iter_Unfold__Clone_clone 0 3 t_0 t_1 t_2 args 1 self [ref r_anon_0 [adt core_iter_Unfold 0 3 [var t_0] [var t_1] [var t_2]]] return [adt core_iter_Unfold 0 3 [var t_0] [var t_1] [var t_2]] 1 core_clone_Clone_clone 0 1 [adt core_iter_Unfold 0 3 [var t_0] [var t_1] [var t_2]] body ([adt core_iter_Unfold 0 3 [var t_0] [var t_1] [var t_2]] block 1 let __result [adt core_iter_Unfold 0 3 [var t_0] [var t_1] [var t_2]] ([adt core_iter_Unfold 0 3 [var t_0] [var t_1] [var t_2]] struct_literal 2 f ([var t_2] call core_clone_Clone_clone 0 1 [var t_2] 1 ([ref r_scope_91361 [var t_2]] addr_of ([var t_2] field ([adt core_iter_Unfold 0 3 [var t_0] [var t_1] [var t_2]] deref ([ref r_anon_0 [adt core_iter_Unfold 0 3 [var t_0] [var t_1] [var t_2]]] var self)) f))) state ([var t_1] call core_clone_Clone_clone 0 1 [var t_1] 1 ([ref r_scope_91364 [var t_1]] addr_of ([var t_1] field ([adt core_iter_Unfold 0 3 [var t_0] [var t_1] [var t_2]] deref ([ref r_anon_0 [adt core_iter_Unfold 0 3 [var t_0] [var t_1] [var t_2]]] var self)) state)))) ([adt core_iter_Unfold 0 3 [var t_0] [var t_1] [var t_2]] var __result)) 
fn core_iter_Unfold_new 0 3 t_0 t_1 t_2 args 2 initial_state [var t_1] f [var t_2] return [adt core_iter_Unfold 0 3 [var t_0] [var t_1] [var t_2]] 0 body ([adt core_iter_Unfold 0 3 [var t_0] [var t_1] [var t_2]] block 1 let __result [adt core_iter_Unfold 0 3 [var t_0] [var t_1] [var t_2]] ([adt core_iter_Unfold 0 3 [var t_0] [var t_1] [var t_2]] struct_literal 2 f ([var t_2] var f) state ([var t_1] var initial_state)) ([adt core_iter_Unfold 0 3 [var t_0] [var t_1] [var t_2]] var __result)) 
associated_type 0 3 t_0 t_1 t_2 core_iter_Iterator_Item 0 1 [adt core_iter_Unfold 0 3 [var t_0] [var t_1] [var t_2]] [var t_0] 
fn core_iter_Unfold__Iterator_size_hint 0 3 t_0 t_1 t_2 args 1 self [ref r_anon_0 [adt core_iter_Unfold 0 3 [var t_0] [var t_1] [var t_2]]] return [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] 1 core_iter_Iterator_size_hint 0 1 [adt core_iter_Unfold 0 3 [var t_0] [var t_1] [var t_2]] body ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] block 1 let __result [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] tuple_literal 2 ([uint 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_None 0 0)) ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] var __result)) 
struct core_iter_Counter 0 1 t_0 2 state [var t_0] step [var t_0] 0 
fn core_iter_count 0 1 f_0 args 2 start [var f_0] step [var f_0] return [adt core_iter_Counter 0 1 [var f_0]] 0 body ([adt core_iter_Counter 0 1 [var f_0]] block 1 let __result [adt core_iter_Counter 0 1 [var f_0]] ([adt core_iter_Counter 0 1 [var f_0]] struct_literal 2 state ([var f_0] var start) step ([var f_0] var step)) ([adt core_iter_Counter 0 1 [var f_0]] var __result)) 
associated_type 0 1 t_0 core_iter_Iterator_Item 0 1 [adt core_iter_Counter 0 1 [var t_0]] [var t_0] 
fn core_iter_Counter__Iterator_next 0 1 t_0 args 1 self [ref_mut r_anon_0 [adt core_iter_Counter 0 1 [var t_0]]] return [adt core_option_Option 0 1 [var t_0]] 1 core_iter_Iterator_next 0 1 [adt core_iter_Counter 0 1 [var t_0]] body ([adt core_option_Option 0 1 [var t_0]] block 3 let result [var t_0] ([var t_0] call core_clone_Clone_clone 0 1 [var t_0] 1 ([ref r_scope_91591 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Counter 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Counter 0 1 [var t_0]]] var self)) state))) expr ([unit] assign ([var t_0] field ([adt core_iter_Counter 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Counter 0 1 [var t_0]]] var self)) state) ([var t_0] call core_ops_Add_add 0 2 [var t_0] [var t_0] 2 ([var t_0] call core_clone_Clone_clone 0 1 [var t_0] 1 ([ref r_scope_91599 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Counter 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Counter 0 1 [var t_0]]] var self)) state))) ([var t_0] call core_clone_Clone_clone 0 1 [var t_0] 1 ([ref r_scope_91602 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Counter 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Counter 0 1 [var t_0]]] var self)) step))))) let __result [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] enum_literal core_option_Some 1 1 ([var t_0] var result)) ([adt core_option_Option 0 1 [var t_0]] var __result)) 
fn core_iter_Counter__Iterator_size_hint 0 1 t_0 args 1 self [ref r_anon_0 [adt core_iter_Counter 0 1 [var t_0]]] return [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] 1 core_iter_Iterator_size_hint 0 1 [adt core_iter_Counter 0 1 [var t_0]] body ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] block 1 let __result [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] tuple_literal 2 ([uint 32] binop BiSub ([uint 32] cast ([uint 32] simple_literal 0) [uint 32]) ([uint 32] cast ([uint 32] simple_literal 1) [uint 32])) ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_None 0 0)) ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] var __result)) 
struct core_iter_Range 0 1 t_0 3 state [var t_0] stop [var t_0] one [var t_0] 0 
fn core_iter_range 0 1 f_0 args 2 start [var f_0] stop [var f_0] return [adt core_iter_Range 0 1 [var f_0]] 0 body ([adt core_iter_Range 0 1 [var f_0]] block 1 let __result [adt core_iter_Range 0 1 [var f_0]] ([adt core_iter_Range 0 1 [var f_0]] struct_literal 3 state ([var f_0] var start) stop ([var f_0] var stop) one ([var f_0] call core_num_Int_one 0 1 [var f_0] 0)) ([adt core_iter_Range 0 1 [var f_0]] var __result)) 
associated_type 0 1 t_0 core_iter_Iterator_Item 0 1 [adt core_iter_Range 0 1 [var t_0]] [var t_0] 
fn core_iter_Range__Iterator_next 0 1 t_0 args 1 self [ref_mut r_anon_0 [adt core_iter_Range 0 1 [var t_0]]] return [adt core_option_Option 0 1 [var t_0]] 1 core_iter_Iterator_next 0 1 [adt core_iter_Range 0 1 [var t_0]] body ([adt core_option_Option 0 1 [var t_0]] block 1 let __result_1 [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] match ([int 32] cast ([bool] call core_cmp_PartialOrd_lt 0 2 [var t_0] [var t_0] 2 ([ref r_scope_91739 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Range 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Range 0 1 [var t_0]]] var self)) state)) ([var t_0] field ([adt core_iter_Range 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Range 0 1 [var t_0]]] var self)) stop)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [var t_0]] block 1 let __result [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [var t_0]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [var t_0]] block 3 let result [var t_0] ([var t_0] call core_clone_Clone_clone 0 1 [var t_0] 1 ([ref r_scope_91748 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Range 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Range 0 1 [var t_0]]] var self)) state))) expr ([unit] assign ([var t_0] field ([adt core_iter_Range 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Range 0 1 [var t_0]]] var self)) state) ([var t_0] call core_ops_Add_add 0 2 [var t_0] [var t_0] 2 ([var t_0] field ([adt core_iter_Range 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Range 0 1 [var t_0]]] var self)) state) ([var t_0] field ([adt core_iter_Range 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Range 0 1 [var t_0]]] var self)) one))) let __result_0 [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] enum_literal core_option_Some 1 1 ([var t_0] var result)) ([adt core_option_Option 0 1 [var t_0]] var __result_0))) ([adt core_option_Option 0 1 [var t_0]] var __result_1)) 
fn core_iter_Range__DoubleEndedIterator_next_back 0 1 t_0 args 1 self [ref_mut r_anon_0 [adt core_iter_Range 0 1 [var t_0]]] return [adt core_option_Option 0 1 [var t_0]] 1 core_iter_DoubleEndedIterator_next_back 0 1 [adt core_iter_Range 0 1 [var t_0]] body ([adt core_option_Option 0 1 [var t_0]] block 1 let __result_1 [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] match ([int 32] cast ([bool] call core_cmp_PartialOrd_gt 0 2 [var t_0] [var t_0] 2 ([ref r_scope_91883 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Range 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Range 0 1 [var t_0]]] var self)) stop)) ([var t_0] field ([adt core_iter_Range 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Range 0 1 [var t_0]]] var self)) state)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [var t_0]] block 1 let __result [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [var t_0]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [var t_0]] block 2 expr ([unit] assign ([var t_0] field ([adt core_iter_Range 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Range 0 1 [var t_0]]] var self)) stop) ([var t_0] call core_ops_Sub_sub 0 2 [var t_0] [var t_0] 2 ([var t_0] field ([adt core_iter_Range 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Range 0 1 [var t_0]]] var self)) stop) ([var t_0] field ([adt core_iter_Range 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Range 0 1 [var t_0]]] var self)) one))) let __result_0 [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] enum_literal core_option_Some 1 1 ([var t_0] call core_clone_Clone_clone 0 1 [var t_0] 1 ([ref r_scope_91900 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Range 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_Range 0 1 [var t_0]]] var self)) stop)))) ([adt core_option_Option 0 1 [var t_0]] var __result_0))) ([adt core_option_Option 0 1 [var t_0]] var __result_1)) 
struct core_iter_RangeInclusive 0 1 t_0 2 range [adt core_iter_Range 0 1 [var t_0]] done [bool] 0 
fn core_iter_range_inclusive 0 1 f_0 args 2 start [var f_0] stop [var f_0] return [adt core_iter_RangeInclusive 0 1 [var f_0]] 0 body ([adt core_iter_RangeInclusive 0 1 [var f_0]] block 1 let __result [adt core_iter_RangeInclusive 0 1 [var f_0]] ([adt core_iter_RangeInclusive 0 1 [var f_0]] struct_literal 2 range ([adt core_iter_Range 0 1 [var f_0]] call core_iter_range 0 1 [var f_0] 2 ([var f_0] var start) ([var f_0] var stop)) done ([bool] simple_literal false)) ([adt core_iter_RangeInclusive 0 1 [var f_0]] var __result)) 
associated_type 0 1 t_0 core_iter_Iterator_Item 0 1 [adt core_iter_RangeInclusive 0 1 [var t_0]] [var t_0] 
fn core_iter_RangeInclusive__Iterator_next 0 1 t_0 args 1 self [ref_mut r_anon_0 [adt core_iter_RangeInclusive 0 1 [var t_0]]] return [adt core_option_Option 0 1 [var t_0]] 1 core_iter_Iterator_next 0 1 [adt core_iter_RangeInclusive 0 1 [var t_0]] body ([adt core_option_Option 0 1 [var t_0]] block 1 let __result_2 [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] match ([adt core_option_Option 0 1 [var t_0]] call core_iter_Iterator_next 0 1 [adt core_iter_Range 0 1 [var t_0]] 1 ([ref_mut r_scope_92002 [adt core_iter_Range 0 1 [var t_0]]] addr_of ([adt core_iter_Range 0 1 [var t_0]] field ([adt core_iter_RangeInclusive 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeInclusive 0 1 [var t_0]]] var self)) range))) 2 ([adt core_option_Option 0 1 [var t_0]] enum core_option_Some 1 1 ([var t_0] var x)) ([adt core_option_Option 0 1 [var t_0]] enum_literal core_option_Some 1 1 ([var t_0] var x)) ([adt core_option_Option 0 1 [var t_0]] enum core_option_None 0 0) ([adt core_option_Option 0 1 [var t_0]] block 1 let __result_1 [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] match ([int 32] cast ([bool] binop BiAnd ([bool] unop UnNot ([bool] field ([adt core_iter_RangeInclusive 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeInclusive 0 1 [var t_0]]] var self)) done)) ([bool] call core_cmp_PartialEq_eq 0 2 [var t_0] [var t_0] 2 ([ref r_scope_92018 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Range 0 1 [var t_0]] field ([adt core_iter_RangeInclusive 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeInclusive 0 1 [var t_0]]] var self)) range) state)) ([var t_0] field ([adt core_iter_Range 0 1 [var t_0]] field ([adt core_iter_RangeInclusive 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeInclusive 0 1 [var t_0]]] var self)) range) stop))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [var t_0]] block 1 let __result [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [var t_0]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [var t_0]] block 2 expr ([unit] assign ([bool] field ([adt core_iter_RangeInclusive 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeInclusive 0 1 [var t_0]]] var self)) done) ([bool] simple_literal true)) let __result_0 [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] enum_literal core_option_Some 1 1 ([var t_0] call core_clone_Clone_clone 0 1 [var t_0] 1 ([ref r_scope_92033 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Range 0 1 [var t_0]] field ([adt core_iter_RangeInclusive 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeInclusive 0 1 [var t_0]]] var self)) range) stop)))) ([adt core_option_Option 0 1 [var t_0]] var __result_0))) ([adt core_option_Option 0 1 [var t_0]] var __result_1))) ([adt core_option_Option 0 1 [var t_0]] var __result_2)) 
fn core_iter_RangeInclusive__DoubleEndedIterator_next_back 0 1 t_0 args 1 self [ref_mut r_anon_0 [adt core_iter_RangeInclusive 0 1 [var t_0]]] return [adt core_option_Option 0 1 [var t_0]] 1 core_iter_DoubleEndedIterator_next_back 0 1 [adt core_iter_RangeInclusive 0 1 [var t_0]] body ([adt core_option_Option 0 1 [var t_0]] block 1 let __result_2 [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] match ([int 32] cast ([bool] call core_cmp_PartialOrd_gt 0 2 [var t_0] [var t_0] 2 ([ref r_scope_92112 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Range 0 1 [var t_0]] field ([adt core_iter_RangeInclusive 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeInclusive 0 1 [var t_0]]] var self)) range) stop)) ([var t_0] field ([adt core_iter_Range 0 1 [var t_0]] field ([adt core_iter_RangeInclusive 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeInclusive 0 1 [var t_0]]] var self)) range) state)) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [var t_0]] match ([int 32] cast ([bool] binop BiAnd ([bool] unop UnNot ([bool] field ([adt core_iter_RangeInclusive 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeInclusive 0 1 [var t_0]]] var self)) done)) ([bool] call core_cmp_PartialEq_eq 0 2 [var t_0] [var t_0] 2 ([ref r_scope_92147 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Range 0 1 [var t_0]] field ([adt core_iter_RangeInclusive 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeInclusive 0 1 [var t_0]]] var self)) range) state)) ([var t_0] field ([adt core_iter_Range 0 1 [var t_0]] field ([adt core_iter_RangeInclusive 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeInclusive 0 1 [var t_0]]] var self)) range) stop))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [var t_0]] block 1 let __result [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [var t_0]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [var t_0]] block 2 expr ([unit] assign ([bool] field ([adt core_iter_RangeInclusive 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeInclusive 0 1 [var t_0]]] var self)) done) ([bool] simple_literal true)) let __result_0 [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] enum_literal core_option_Some 1 1 ([var t_0] call core_clone_Clone_clone 0 1 [var t_0] 1 ([ref r_scope_92162 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Range 0 1 [var t_0]] field ([adt core_iter_RangeInclusive 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeInclusive 0 1 [var t_0]]] var self)) range) stop)))) ([adt core_option_Option 0 1 [var t_0]] var __result_0))) ([int 32] wild) ([adt core_option_Option 0 1 [var t_0]] block 3 let result [var t_0] ([var t_0] call core_clone_Clone_clone 0 1 [var t_0] 1 ([ref r_scope_92123 [var t_0]] addr_of ([var t_0] field ([adt core_iter_Range 0 1 [var t_0]] field ([adt core_iter_RangeInclusive 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeInclusive 0 1 [var t_0]]] var self)) range) stop))) expr ([unit] assign ([var t_0] field ([adt core_iter_Range 0 1 [var t_0]] field ([adt core_iter_RangeInclusive 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeInclusive 0 1 [var t_0]]] var self)) range) stop) ([var t_0] call core_ops_Sub_sub 0 2 [var t_0] [var t_0] 2 ([var t_0] field ([adt core_iter_Range 0 1 [var t_0]] field ([adt core_iter_RangeInclusive 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeInclusive 0 1 [var t_0]]] var self)) range) stop) ([var t_0] field ([adt core_iter_Range 0 1 [var t_0]] field ([adt core_iter_RangeInclusive 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeInclusive 0 1 [var t_0]]] var self)) range) one))) let __result_1 [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] enum_literal core_option_Some 1 1 ([var t_0] var result)) ([adt core_option_Option 0 1 [var t_0]] var __result_1))) ([adt core_option_Option 0 1 [var t_0]] var __result_2)) 
struct core_iter_RangeStep 0 1 t_0 4 state [var t_0] stop [var t_0] step [var t_0] rev [bool] 0 
fn core_iter_range_step 0 1 f_0 args 3 start [var f_0] stop [var f_0] step [var f_0] return [adt core_iter_RangeStep 0 1 [var f_0]] 0 body ([adt core_iter_RangeStep 0 1 [var f_0]] block 2 let rev [bool] ([bool] call core_cmp_PartialOrd_lt 0 2 [var f_0] [var f_0] 2 ([ref r_scope_92269 [var f_0]] addr_of ([var f_0] var step)) ([var f_0] call core_num_Int_zero 0 1 [var f_0] 0)) let __result [adt core_iter_RangeStep 0 1 [var f_0]] ([adt core_iter_RangeStep 0 1 [var f_0]] struct_literal 4 state ([var f_0] var start) stop ([var f_0] var stop) step ([var f_0] var step) rev ([bool] var rev)) ([adt core_iter_RangeStep 0 1 [var f_0]] var __result)) 
associated_type 0 1 t_0 core_iter_Iterator_Item 0 1 [adt core_iter_RangeStep 0 1 [var t_0]] [var t_0] 
fn core_iter_RangeStep__Iterator_next 0 1 t_0 args 1 self [ref_mut r_anon_0 [adt core_iter_RangeStep 0 1 [var t_0]]] return [adt core_option_Option 0 1 [var t_0]] 1 core_iter_Iterator_next 0 1 [adt core_iter_RangeStep 0 1 [var t_0]] body ([adt core_option_Option 0 1 [var t_0]] block 1 let __result_1 [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] match ([int 32] cast ([bool] binop BiOr ([bool] binop BiAnd ([bool] field ([adt core_iter_RangeStep 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeStep 0 1 [var t_0]]] var self)) rev) ([bool] call core_cmp_PartialOrd_gt 0 2 [var t_0] [var t_0] 2 ([ref r_scope_92298 [var t_0]] addr_of ([var t_0] field ([adt core_iter_RangeStep 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeStep 0 1 [var t_0]]] var self)) state)) ([var t_0] field ([adt core_iter_RangeStep 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeStep 0 1 [var t_0]]] var self)) stop))) ([bool] binop BiAnd ([bool] unop UnNot ([bool] field ([adt core_iter_RangeStep 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeStep 0 1 [var t_0]]] var self)) rev)) ([bool] call core_cmp_PartialOrd_lt 0 2 [var t_0] [var t_0] 2 ([ref r_scope_92308 [var t_0]] addr_of ([var t_0] field ([adt core_iter_RangeStep 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeStep 0 1 [var t_0]]] var self)) state)) ([var t_0] field ([adt core_iter_RangeStep 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeStep 0 1 [var t_0]]] var self)) stop)))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [var t_0]] block 1 let __result [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [var t_0]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [var t_0]] block 3 let result [var t_0] ([var t_0] field ([adt core_iter_RangeStep 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeStep 0 1 [var t_0]]] var self)) state) expr ([unit] match ([adt core_option_Option 0 1 [var t_0]] call core_num_Int_checked_add 0 1 [var t_0] 2 ([var t_0] field ([adt core_iter_RangeStep 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeStep 0 1 [var t_0]]] var self)) state) ([var t_0] field ([adt core_iter_RangeStep 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeStep 0 1 [var t_0]]] var self)) step)) 2 ([adt core_option_Option 0 1 [var t_0]] enum core_option_Some 1 1 ([var t_0] var x)) ([unit] assign ([var t_0] field ([adt core_iter_RangeStep 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeStep 0 1 [var t_0]]] var self)) state) ([var t_0] var x)) ([adt core_option_Option 0 1 [var t_0]] enum core_option_None 0 0) ([unit] assign ([var t_0] field ([adt core_iter_RangeStep 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeStep 0 1 [var t_0]]] var self)) state) ([var t_0] call core_clone_Clone_clone 0 1 [var t_0] 1 ([ref r_scope_92336 [var t_0]] addr_of ([var t_0] field ([adt core_iter_RangeStep 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeStep 0 1 [var t_0]]] var self)) stop))))) let __result_0 [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] enum_literal core_option_Some 1 1 ([var t_0] var result)) ([adt core_option_Option 0 1 [var t_0]] var __result_0))) ([adt core_option_Option 0 1 [var t_0]] var __result_1)) 
struct core_iter_RangeStepInclusive 0 1 t_0 5 state [var t_0] stop [var t_0] step [var t_0] rev [bool] done [bool] 0 
fn core_iter_range_step_inclusive 0 1 f_0 args 3 start [var f_0] stop [var f_0] step [var f_0] return [adt core_iter_RangeStepInclusive 0 1 [var f_0]] 0 body ([adt core_iter_RangeStepInclusive 0 1 [var f_0]] block 2 let rev [bool] ([bool] call core_cmp_PartialOrd_lt 0 2 [var f_0] [var f_0] 2 ([ref r_scope_92454 [var f_0]] addr_of ([var f_0] var step)) ([var f_0] call core_num_Int_zero 0 1 [var f_0] 0)) let __result [adt core_iter_RangeStepInclusive 0 1 [var f_0]] ([adt core_iter_RangeStepInclusive 0 1 [var f_0]] struct_literal 5 state ([var f_0] var start) stop ([var f_0] var stop) step ([var f_0] var step) rev ([bool] var rev) done ([bool] simple_literal false)) ([adt core_iter_RangeStepInclusive 0 1 [var f_0]] var __result)) 
associated_type 0 1 t_0 core_iter_Iterator_Item 0 1 [adt core_iter_RangeStepInclusive 0 1 [var t_0]] [var t_0] 
fn core_iter_RangeStepInclusive__Iterator_next 0 1 t_0 args 1 self [ref_mut r_anon_0 [adt core_iter_RangeStepInclusive 0 1 [var t_0]]] return [adt core_option_Option 0 1 [var t_0]] 1 core_iter_Iterator_next 0 1 [adt core_iter_RangeStepInclusive 0 1 [var t_0]] body ([adt core_option_Option 0 1 [var t_0]] block 1 let __result_1 [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] match ([int 32] cast ([bool] binop BiAnd ([bool] unop UnNot ([bool] field ([adt core_iter_RangeStepInclusive 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeStepInclusive 0 1 [var t_0]]] var self)) done)) ([bool] binop BiOr ([bool] binop BiAnd ([bool] field ([adt core_iter_RangeStepInclusive 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeStepInclusive 0 1 [var t_0]]] var self)) rev) ([bool] call core_cmp_PartialOrd_ge 0 2 [var t_0] [var t_0] 2 ([ref r_scope_92489 [var t_0]] addr_of ([var t_0] field ([adt core_iter_RangeStepInclusive 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeStepInclusive 0 1 [var t_0]]] var self)) state)) ([var t_0] field ([adt core_iter_RangeStepInclusive 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeStepInclusive 0 1 [var t_0]]] var self)) stop))) ([bool] binop BiAnd ([bool] unop UnNot ([bool] field ([adt core_iter_RangeStepInclusive 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeStepInclusive 0 1 [var t_0]]] var self)) rev)) ([bool] call core_cmp_PartialOrd_le 0 2 [var t_0] [var t_0] 2 ([ref r_scope_92499 [var t_0]] addr_of ([var t_0] field ([adt core_iter_RangeStepInclusive 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeStepInclusive 0 1 [var t_0]]] var self)) state)) ([var t_0] field ([adt core_iter_RangeStepInclusive 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeStepInclusive 0 1 [var t_0]]] var self)) stop))))) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [var t_0]] block 1 let __result [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [var t_0]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [var t_0]] block 3 let result [var t_0] ([var t_0] field ([adt core_iter_RangeStepInclusive 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeStepInclusive 0 1 [var t_0]]] var self)) state) expr ([unit] match ([adt core_option_Option 0 1 [var t_0]] call core_num_Int_checked_add 0 1 [var t_0] 2 ([var t_0] field ([adt core_iter_RangeStepInclusive 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeStepInclusive 0 1 [var t_0]]] var self)) state) ([var t_0] field ([adt core_iter_RangeStepInclusive 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeStepInclusive 0 1 [var t_0]]] var self)) step)) 2 ([adt core_option_Option 0 1 [var t_0]] enum core_option_Some 1 1 ([var t_0] var x)) ([unit] assign ([var t_0] field ([adt core_iter_RangeStepInclusive 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeStepInclusive 0 1 [var t_0]]] var self)) state) ([var t_0] var x)) ([adt core_option_Option 0 1 [var t_0]] enum core_option_None 0 0) ([unit] assign ([bool] field ([adt core_iter_RangeStepInclusive 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_iter_RangeStepInclusive 0 1 [var t_0]]] var self)) done) ([bool] simple_literal true))) let __result_0 [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] enum_literal core_option_Some 1 1 ([var t_0] var result)) ([adt core_option_Option 0 1 [var t_0]] var __result_0))) ([adt core_option_Option 0 1 [var t_0]] var __result_1)) 
associated_type 0 0 core_iter_Iterator_Item 0 1 [adt core_ops_Range 0 1 [uint 32]] [uint 32] 
associated_type 0 0 core_iter_Iterator_Item 0 1 [adt core_ops_Range 0 1 [uint 8]] [uint 8] 
associated_type 0 0 core_iter_Iterator_Item 0 1 [adt core_ops_Range 0 1 [uint 16]] [uint 16] 
associated_type 0 0 core_iter_Iterator_Item 0 1 [adt core_ops_Range 0 1 [uint 32]] [uint 32] 
associated_type 0 0 core_iter_Iterator_Item 0 1 [adt core_ops_Range 0 1 [int 32]] [int 32] 
associated_type 0 0 core_iter_Iterator_Item 0 1 [adt core_ops_Range 0 1 [int 8]] [int 8] 
associated_type 0 0 core_iter_Iterator_Item 0 1 [adt core_ops_Range 0 1 [int 16]] [int 16] 
associated_type 0 0 core_iter_Iterator_Item 0 1 [adt core_ops_Range 0 1 [int 32]] [int 32] 
associated_type 0 0 core_iter_Iterator_Item 0 1 [adt core_ops_Range 0 1 [uint 64]] [uint 64] 
associated_type 0 0 core_iter_Iterator_Item 0 1 [adt core_ops_Range 0 1 [int 64]] [int 64] 
associated_type 0 0 core_iter_Iterator_Item 0 1 [adt core_ops_RangeFrom 0 1 [uint 32]] [uint 32] 
associated_type 0 0 core_iter_Iterator_Item 0 1 [adt core_ops_RangeFrom 0 1 [uint 8]] [uint 8] 
associated_type 0 0 core_iter_Iterator_Item 0 1 [adt core_ops_RangeFrom 0 1 [uint 16]] [uint 16] 
associated_type 0 0 core_iter_Iterator_Item 0 1 [adt core_ops_RangeFrom 0 1 [uint 32]] [uint 32] 
associated_type 0 0 core_iter_Iterator_Item 0 1 [adt core_ops_RangeFrom 0 1 [uint 64]] [uint 64] 
associated_type 0 0 core_iter_Iterator_Item 0 1 [adt core_ops_RangeFrom 0 1 [int 32]] [int 32] 
associated_type 0 0 core_iter_Iterator_Item 0 1 [adt core_ops_RangeFrom 0 1 [int 8]] [int 8] 
associated_type 0 0 core_iter_Iterator_Item 0 1 [adt core_ops_RangeFrom 0 1 [int 16]] [int 16] 
associated_type 0 0 core_iter_Iterator_Item 0 1 [adt core_ops_RangeFrom 0 1 [int 32]] [int 32] 
associated_type 0 0 core_iter_Iterator_Item 0 1 [adt core_ops_RangeFrom 0 1 [int 64]] [int 64] 
struct core_iter_Repeat 0 1 t_0 1 element [var t_0] 0 
associated_type 0 1 t_0 core_iter_Iterator_Item 0 1 [adt core_iter_Repeat 0 1 [var t_0]] [var t_0] 
fn core_iter_Repeat__Iterator_next 0 1 t_0 args 1 self [ref_mut r_anon_0 [adt core_iter_Repeat 0 1 [var t_0]]] return [adt core_option_Option 0 1 [var t_0]] 1 core_iter_Iterator_next 0 1 [adt core_iter_Repeat 0 1 [var t_0]] body ([adt core_option_Option 0 1 [var t_0]] block 1 let __result [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] call core_iter_RandomAccessIterator_idx 0 1 [adt core_iter_Repeat 0 1 [var t_0]] 2 ([ref_mut r_anon_0 [adt core_iter_Repeat 0 1 [var t_0]]] var self) ([uint 32] simple_literal 0)) ([adt core_option_Option 0 1 [var t_0]] var __result)) 
fn core_iter_Repeat__Iterator_size_hint 0 1 t_0 args 1 self [ref r_anon_0 [adt core_iter_Repeat 0 1 [var t_0]]] return [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] 1 core_iter_Iterator_size_hint 0 1 [adt core_iter_Repeat 0 1 [var t_0]] body ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] block 1 let __result [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] tuple_literal 2 ([uint 32] binop BiSub ([uint 32] cast ([uint 32] simple_literal 0) [uint 32]) ([uint 32] cast ([uint 32] simple_literal 1) [uint 32])) ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_None 0 0)) ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] var __result)) 
fn core_iter_Repeat__DoubleEndedIterator_next_back 0 1 t_0 args 1 self [ref_mut r_anon_0 [adt core_iter_Repeat 0 1 [var t_0]]] return [adt core_option_Option 0 1 [var t_0]] 1 core_iter_DoubleEndedIterator_next_back 0 1 [adt core_iter_Repeat 0 1 [var t_0]] body ([adt core_option_Option 0 1 [var t_0]] block 1 let __result [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] call core_iter_RandomAccessIterator_idx 0 1 [adt core_iter_Repeat 0 1 [var t_0]] 2 ([ref_mut r_anon_0 [adt core_iter_Repeat 0 1 [var t_0]]] var self) ([uint 32] simple_literal 0)) ([adt core_option_Option 0 1 [var t_0]] var __result)) 
fn core_iter_Repeat__RandomAccessIterator_indexable 0 1 t_0 args 1 self [ref r_anon_0 [adt core_iter_Repeat 0 1 [var t_0]]] return [uint 32] 1 core_iter_RandomAccessIterator_indexable 0 1 [adt core_iter_Repeat 0 1 [var t_0]] body ([uint 32] block 1 let __result [uint 32] ([uint 32] binop BiSub ([uint 32] cast ([uint 32] simple_literal 0) [uint 32]) ([uint 32] cast ([uint 32] simple_literal 1) [uint 32])) ([uint 32] var __result)) 
fn core_iter_repeat 0 1 f_0 args 1 elt [var f_0] return [adt core_iter_Repeat 0 1 [var f_0]] 0 body ([adt core_iter_Repeat 0 1 [var f_0]] block 1 let __result [adt core_iter_Repeat 0 1 [var f_0]] ([adt core_iter_Repeat 0 1 [var f_0]] struct_literal 1 element ([var f_0] var elt)) ([adt core_iter_Repeat 0 1 [var f_0]] var __result)) 
enum core_option_Option 0 1 t_0 2 core_option_None 0 core_option_Some 1 [var t_0] 0 
fn core_option_Option_is_some 0 1 t_0 args 1 self [ref r_anon_0 [adt core_option_Option 0 1 [var t_0]]] return [bool] 0 body ([bool] block 1 let __result [bool] ([bool] match ([adt core_option_Option 0 1 [var t_0]] deref ([ref r_anon_0 [adt core_option_Option 0 1 [var t_0]]] var self)) 2 ([adt core_option_Option 0 1 [var t_0]] enum core_option_Some 1 1 ([var t_0] wild)) ([bool] simple_literal true) ([adt core_option_Option 0 1 [var t_0]] enum core_option_None 0 0) ([bool] simple_literal false)) ([bool] var __result)) 
fn core_option_Option_is_none 0 1 t_0 args 1 self [ref r_anon_0 [adt core_option_Option 0 1 [var t_0]]] return [bool] 0 body ([bool] block 1 let __result [bool] ([bool] unop UnNot ([bool] call core_option_Option_is_some 0 1 [var t_0] 1 ([ref r_anon_0 [adt core_option_Option 0 1 [var t_0]]] var self))) ([bool] var __result)) 
fn core_option_Option_as_ref 1 r_named_0_96760 1 t_0 args 1 self [ref r_named_0_96760 [adt core_option_Option 0 1 [var t_0]]] return [adt core_option_Option 0 1 [ref r_named_0_96760 [var t_0]]] 0 body ([adt core_option_Option 0 1 [ref r_named_0_96760 [var t_0]]] block 1 let __result [adt core_option_Option 0 1 [ref r_named_0_96760 [var t_0]]] ([adt core_option_Option 0 1 [ref r_named_0_96760 [var t_0]]] match ([adt core_option_Option 0 1 [var t_0]] deref ([ref r_named_0_96760 [adt core_option_Option 0 1 [var t_0]]] var self)) 2 ([adt core_option_Option 0 1 [var t_0]] enum core_option_Some 1 1 ([ref r_named_0_96760 [var t_0]] var x)) ([adt core_option_Option 0 1 [ref r_named_0_96760 [var t_0]]] enum_literal core_option_Some 1 1 ([ref r_named_0_96760 [var t_0]] var x)) ([adt core_option_Option 0 1 [var t_0]] enum core_option_None 0 0) ([adt core_option_Option 0 1 [ref r_named_0_96760 [var t_0]]] enum_literal core_option_None 0 0)) ([adt core_option_Option 0 1 [ref r_named_0_96760 [var t_0]]] var __result)) 
fn core_option_Option_as_mut 1 r_named_0_96784 1 t_0 args 1 self [ref_mut r_named_0_96784 [adt core_option_Option 0 1 [var t_0]]] return [adt core_option_Option 0 1 [ref_mut r_named_0_96784 [var t_0]]] 0 body ([adt core_option_Option 0 1 [ref_mut r_named_0_96784 [var t_0]]] block 1 let __result [adt core_option_Option 0 1 [ref_mut r_named_0_96784 [var t_0]]] ([adt core_option_Option 0 1 [ref_mut r_named_0_96784 [var t_0]]] match ([adt core_option_Option 0 1 [var t_0]] deref ([ref_mut r_named_0_96784 [adt core_option_Option 0 1 [var t_0]]] var self)) 2 ([adt core_option_Option 0 1 [var t_0]] enum core_option_Some 1 1 ([ref_mut r_named_0_96784 [var t_0]] var x)) ([adt core_option_Option 0 1 [ref_mut r_named_0_96784 [var t_0]]] enum_literal core_option_Some 1 1 ([ref_mut r_named_0_96784 [var t_0]] var x)) ([adt core_option_Option 0 1 [var t_0]] enum core_option_None 0 0) ([adt core_option_Option 0 1 [ref_mut r_named_0_96784 [var t_0]]] enum_literal core_option_None 0 0)) ([adt core_option_Option 0 1 [ref_mut r_named_0_96784 [var t_0]]] var __result)) 
fn core_option_Option_unwrap_or 0 1 t_0 args 2 self [adt core_option_Option 0 1 [var t_0]] def [var t_0] return [var t_0] 0 body ([var t_0] block 1 let __result [var t_0] ([var t_0] match ([adt core_option_Option 0 1 [var t_0]] var self) 2 ([adt core_option_Option 0 1 [var t_0]] enum core_option_Some 1 1 ([var t_0] var x)) ([var t_0] var x) ([adt core_option_Option 0 1 [var t_0]] enum core_option_None 0 0) ([var t_0] var def)) ([var t_0] var __result)) 
fn core_option_Option_ok_or 0 2 t_0 f_0 args 2 self [adt core_option_Option 0 1 [var t_0]] err [var f_0] return [adt core_result_Result 0 2 [var t_0] [var f_0]] 0 body ([adt core_result_Result 0 2 [var t_0] [var f_0]] block 1 let __result [adt core_result_Result 0 2 [var t_0] [var f_0]] ([adt core_result_Result 0 2 [var t_0] [var f_0]] match ([adt core_option_Option 0 1 [var t_0]] var self) 2 ([adt core_option_Option 0 1 [var t_0]] enum core_option_Some 1 1 ([var t_0] var v)) ([adt core_result_Result 0 2 [var t_0] [var f_0]] enum_literal core_result_Ok 0 1 ([var t_0] var v)) ([adt core_option_Option 0 1 [var t_0]] enum core_option_None 0 0) ([adt core_result_Result 0 2 [var t_0] [var f_0]] enum_literal core_result_Err 1 1 ([var f_0] var err))) ([adt core_result_Result 0 2 [var t_0] [var f_0]] var __result)) 
fn core_option_Option_iter 0 1 t_0 args 1 self [ref r_anon_0 [adt core_option_Option 0 1 [var t_0]]] return [adt core_option_Iter 1 r_anon_0 1 [var t_0]] 0 body ([adt core_option_Iter 1 r_anon_0 1 [var t_0]] block 1 let __result [adt core_option_Iter 1 r_anon_0 1 [var t_0]] ([adt core_option_Iter 1 r_anon_0 1 [var t_0]] struct_literal 1 inner ([adt core_option_Item 0 1 [ref r_anon_0 [var t_0]]] struct_literal 1 opt ([adt core_option_Option 0 1 [ref r_anon_0 [var t_0]]] call core_option_Option_as_ref 0 1 [var t_0] 1 ([ref r_anon_0 [adt core_option_Option 0 1 [var t_0]]] var self)))) ([adt core_option_Iter 1 r_anon_0 1 [var t_0]] var __result)) 
fn core_option_Option_iter_mut 0 1 t_0 args 1 self [ref_mut r_anon_0 [adt core_option_Option 0 1 [var t_0]]] return [adt core_option_IterMut 1 r_anon_0 1 [var t_0]] 0 body ([adt core_option_IterMut 1 r_anon_0 1 [var t_0]] block 1 let __result [adt core_option_IterMut 1 r_anon_0 1 [var t_0]] ([adt core_option_IterMut 1 r_anon_0 1 [var t_0]] struct_literal 1 inner ([adt core_option_Item 0 1 [ref_mut r_anon_0 [var t_0]]] struct_literal 1 opt ([adt core_option_Option 0 1 [ref_mut r_anon_0 [var t_0]]] call core_option_Option_as_mut 0 1 [var t_0] 1 ([ref_mut r_anon_0 [adt core_option_Option 0 1 [var t_0]]] var self)))) ([adt core_option_IterMut 1 r_anon_0 1 [var t_0]] var __result)) 
fn core_option_Option_into_iter 0 1 t_0 args 1 self [adt core_option_Option 0 1 [var t_0]] return [adt core_option_IntoIter 0 1 [var t_0]] 0 body ([adt core_option_IntoIter 0 1 [var t_0]] block 1 let __result [adt core_option_IntoIter 0 1 [var t_0]] ([adt core_option_IntoIter 0 1 [var t_0]] struct_literal 1 inner ([adt core_option_Item 0 1 [var t_0]] struct_literal 1 opt ([adt core_option_Option 0 1 [var t_0]] var self))) ([adt core_option_IntoIter 0 1 [var t_0]] var __result)) 
fn core_option_Option_and 0 2 t_0 f_0 args 2 self [adt core_option_Option 0 1 [var t_0]] optb [adt core_option_Option 0 1 [var f_0]] return [adt core_option_Option 0 1 [var f_0]] 0 body ([adt core_option_Option 0 1 [var f_0]] block 1 let __result [adt core_option_Option 0 1 [var f_0]] ([adt core_option_Option 0 1 [var f_0]] match ([adt core_option_Option 0 1 [var t_0]] var self) 2 ([adt core_option_Option 0 1 [var t_0]] enum core_option_Some 1 1 ([var t_0] wild)) ([adt core_option_Option 0 1 [var f_0]] var optb) ([adt core_option_Option 0 1 [var t_0]] enum core_option_None 0 0) ([adt core_option_Option 0 1 [var f_0]] enum_literal core_option_None 0 0)) ([adt core_option_Option 0 1 [var f_0]] var __result)) 
fn core_option_Option_or 0 1 t_0 args 2 self [adt core_option_Option 0 1 [var t_0]] optb [adt core_option_Option 0 1 [var t_0]] return [adt core_option_Option 0 1 [var t_0]] 0 body ([adt core_option_Option 0 1 [var t_0]] block 1 let __result [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] match ([adt core_option_Option 0 1 [var t_0]] var self) 2 ([adt core_option_Option 0 1 [var t_0]] enum core_option_Some 1 1 ([var t_0] wild)) ([adt core_option_Option 0 1 [var t_0]] var self) ([adt core_option_Option 0 1 [var t_0]] enum core_option_None 0 0) ([adt core_option_Option 0 1 [var t_0]] var optb)) ([adt core_option_Option 0 1 [var t_0]] var __result)) 
fn core_option_Option_unwrap_or_default 0 1 t_0 args 1 self [adt core_option_Option 0 1 [var t_0]] return [var t_0] 0 body ([var t_0] block 1 let __result [var t_0] ([var t_0] match ([adt core_option_Option 0 1 [var t_0]] var self) 2 ([adt core_option_Option 0 1 [var t_0]] enum core_option_Some 1 1 ([var t_0] var x)) ([var t_0] var x) ([adt core_option_Option 0 1 [var t_0]] enum core_option_None 0 0) ([var t_0] call core_default_Default_default 0 1 [var t_0] 0)) ([var t_0] var __result)) 
fn core_option_Option__Default_default 0 1 t_0 args 0 return [adt core_option_Option 0 1 [var t_0]] 1 core_default_Default_default 0 1 [adt core_option_Option 0 1 [var t_0]] body ([adt core_option_Option 0 1 [var t_0]] block 1 let __result [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [var t_0]] var __result)) 
struct core_option_Item 0 1 t_0 1 opt [adt core_option_Option 0 1 [var t_0]] 0 
associated_type 0 1 t_0 core_iter_Iterator_Item 0 1 [adt core_option_Item 0 1 [var t_0]] [var t_0] 
fn core_option_Item__Iterator_size_hint 0 1 t_0 args 1 self [ref r_anon_0 [adt core_option_Item 0 1 [var t_0]]] return [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] 1 core_iter_Iterator_size_hint 0 1 [adt core_option_Item 0 1 [var t_0]] body ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] block 1 let __result [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] match ([adt core_option_Option 0 1 [var t_0]] field ([adt core_option_Item 0 1 [var t_0]] deref ([ref r_anon_0 [adt core_option_Item 0 1 [var t_0]]] var self)) opt) 2 ([adt core_option_Option 0 1 [var t_0]] enum core_option_Some 1 1 ([var t_0] wild)) ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] tuple_literal 2 ([uint 32] simple_literal 1) ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] simple_literal 1))) ([adt core_option_Option 0 1 [var t_0]] enum core_option_None 0 0) ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] tuple_literal 2 ([uint 32] simple_literal 0) ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] simple_literal 0)))) ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] var __result)) 
struct core_option_Iter 1 r_named_0_97575 1 t_0 1 inner [adt core_option_Item 0 1 [ref r_named_0_97575 [var t_0]]] 0 
associated_type 1 r_named_0_97616 1 t_0 core_iter_Iterator_Item 0 1 [adt core_option_Iter 1 r_named_0_97616 1 [var t_0]] [ref r_named_0_97616 [var t_0]] 
fn core_option_Iter__Iterator_next 1 r_named_0_97616 1 t_0 args 1 self [ref_mut r_anon_0 [adt core_option_Iter 1 r_named_0_97616 1 [var t_0]]] return [adt core_option_Option 0 1 [ref r_named_0_97616 [var t_0]]] 1 core_iter_Iterator_next 0 1 [adt core_option_Iter 1 r_named_0_97616 1 [var t_0]] body ([adt core_option_Option 0 1 [ref r_named_0_97616 [var t_0]]] block 1 let __result [adt core_option_Option 0 1 [ref r_named_0_97616 [var t_0]]] ([adt core_option_Option 0 1 [ref r_named_0_97616 [var t_0]]] call core_iter_Iterator_next 0 1 [adt core_option_Item 0 1 [ref r_named_0_97616 [var t_0]]] 1 ([ref_mut r_scope_97595 [adt core_option_Item 0 1 [ref r_named_0_97616 [var t_0]]]] addr_of ([adt core_option_Item 0 1 [ref r_named_0_97616 [var t_0]]] field ([adt core_option_Iter 1 r_named_0_97616 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_option_Iter 1 r_named_0_97616 1 [var t_0]]] var self)) inner))) ([adt core_option_Option 0 1 [ref r_named_0_97616 [var t_0]]] var __result)) 
fn core_option_Iter__Iterator_size_hint 1 r_named_0_97616 1 t_0 args 1 self [ref r_anon_0 [adt core_option_Iter 1 r_named_0_97616 1 [var t_0]]] return [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] 1 core_iter_Iterator_size_hint 0 1 [adt core_option_Iter 1 r_named_0_97616 1 [var t_0]] body ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] block 1 let __result [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] call core_iter_Iterator_size_hint 0 1 [adt core_option_Item 0 1 [ref r_named_0_97616 [var t_0]]] 1 ([ref r_scope_97611 [adt core_option_Item 0 1 [ref r_named_0_97616 [var t_0]]]] addr_of ([adt core_option_Item 0 1 [ref r_named_0_97616 [var t_0]]] field ([adt core_option_Iter 1 r_named_0_97616 1 [var t_0]] deref ([ref r_anon_0 [adt core_option_Iter 1 r_named_0_97616 1 [var t_0]]] var self)) inner))) ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] var __result)) 
fn core_option_Iter__DoubleEndedIterator_next_back 1 r_named_0_97641 1 t_0 args 1 self [ref_mut r_anon_0 [adt core_option_Iter 1 r_named_0_97641 1 [var t_0]]] return [adt core_option_Option 0 1 [ref r_named_0_97641 [var t_0]]] 1 core_iter_DoubleEndedIterator_next_back 0 1 [adt core_option_Iter 1 r_named_0_97641 1 [var t_0]] body ([adt core_option_Option 0 1 [ref r_named_0_97641 [var t_0]]] block 1 let __result [adt core_option_Option 0 1 [ref r_named_0_97641 [var t_0]]] ([adt core_option_Option 0 1 [ref r_named_0_97641 [var t_0]]] call core_iter_DoubleEndedIterator_next_back 0 1 [adt core_option_Item 0 1 [ref r_named_0_97641 [var t_0]]] 1 ([ref_mut r_scope_97636 [adt core_option_Item 0 1 [ref r_named_0_97641 [var t_0]]]] addr_of ([adt core_option_Item 0 1 [ref r_named_0_97641 [var t_0]]] field ([adt core_option_Iter 1 r_named_0_97641 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_option_Iter 1 r_named_0_97641 1 [var t_0]]] var self)) inner))) ([adt core_option_Option 0 1 [ref r_named_0_97641 [var t_0]]] var __result)) 
fn core_option_Iter__Clone_clone 1 r_named_0_97676 1 t_0 args 1 self [ref r_anon_0 [adt core_option_Iter 1 r_named_0_97676 1 [var t_0]]] return [adt core_option_Iter 1 r_named_0_97676 1 [var t_0]] 1 core_clone_Clone_clone 0 1 [adt core_option_Iter 1 r_named_0_97676 1 [var t_0]] body ([adt core_option_Iter 1 r_named_0_97676 1 [var t_0]] block 1 let __result [adt core_option_Iter 1 r_named_0_97676 1 [var t_0]] ([adt core_option_Iter 1 r_named_0_97676 1 [var t_0]] struct_literal 1 inner ([adt core_option_Item 0 1 [ref r_named_0_97676 [var t_0]]] call core_clone_Clone_clone 0 1 [adt core_option_Item 0 1 [ref r_named_0_97676 [var t_0]]] 1 ([ref r_scope_97671 [adt core_option_Item 0 1 [ref r_named_0_97676 [var t_0]]]] addr_of ([adt core_option_Item 0 1 [ref r_named_0_97676 [var t_0]]] field ([adt core_option_Iter 1 r_named_0_97676 1 [var t_0]] deref ([ref r_anon_0 [adt core_option_Iter 1 r_named_0_97676 1 [var t_0]]] var self)) inner)))) ([adt core_option_Iter 1 r_named_0_97676 1 [var t_0]] var __result)) 
struct core_option_IterMut 1 r_named_0_97693 1 t_0 1 inner [adt core_option_Item 0 1 [ref_mut r_named_0_97693 [var t_0]]] 0 
associated_type 1 r_named_0_97734 1 t_0 core_iter_Iterator_Item 0 1 [adt core_option_IterMut 1 r_named_0_97734 1 [var t_0]] [ref_mut r_named_0_97734 [var t_0]] 
fn core_option_IterMut__Iterator_next 1 r_named_0_97734 1 t_0 args 1 self [ref_mut r_anon_0 [adt core_option_IterMut 1 r_named_0_97734 1 [var t_0]]] return [adt core_option_Option 0 1 [ref_mut r_named_0_97734 [var t_0]]] 1 core_iter_Iterator_next 0 1 [adt core_option_IterMut 1 r_named_0_97734 1 [var t_0]] body ([adt core_option_Option 0 1 [ref_mut r_named_0_97734 [var t_0]]] block 1 let __result [adt core_option_Option 0 1 [ref_mut r_named_0_97734 [var t_0]]] ([adt core_option_Option 0 1 [ref_mut r_named_0_97734 [var t_0]]] call core_iter_Iterator_next 0 1 [adt core_option_Item 0 1 [ref_mut r_named_0_97734 [var t_0]]] 1 ([ref_mut r_scope_97713 [adt core_option_Item 0 1 [ref_mut r_named_0_97734 [var t_0]]]] addr_of ([adt core_option_Item 0 1 [ref_mut r_named_0_97734 [var t_0]]] field ([adt core_option_IterMut 1 r_named_0_97734 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_option_IterMut 1 r_named_0_97734 1 [var t_0]]] var self)) inner))) ([adt core_option_Option 0 1 [ref_mut r_named_0_97734 [var t_0]]] var __result)) 
fn core_option_IterMut__Iterator_size_hint 1 r_named_0_97734 1 t_0 args 1 self [ref r_anon_0 [adt core_option_IterMut 1 r_named_0_97734 1 [var t_0]]] return [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] 1 core_iter_Iterator_size_hint 0 1 [adt core_option_IterMut 1 r_named_0_97734 1 [var t_0]] body ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] block 1 let __result [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] call core_iter_Iterator_size_hint 0 1 [adt core_option_Item 0 1 [ref_mut r_named_0_97734 [var t_0]]] 1 ([ref r_scope_97729 [adt core_option_Item 0 1 [ref_mut r_named_0_97734 [var t_0]]]] addr_of ([adt core_option_Item 0 1 [ref_mut r_named_0_97734 [var t_0]]] field ([adt core_option_IterMut 1 r_named_0_97734 1 [var t_0]] deref ([ref r_anon_0 [adt core_option_IterMut 1 r_named_0_97734 1 [var t_0]]] var self)) inner))) ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] var __result)) 
fn core_option_IterMut__DoubleEndedIterator_next_back 1 r_named_0_97759 1 t_0 args 1 self [ref_mut r_anon_0 [adt core_option_IterMut 1 r_named_0_97759 1 [var t_0]]] return [adt core_option_Option 0 1 [ref_mut r_named_0_97759 [var t_0]]] 1 core_iter_DoubleEndedIterator_next_back 0 1 [adt core_option_IterMut 1 r_named_0_97759 1 [var t_0]] body ([adt core_option_Option 0 1 [ref_mut r_named_0_97759 [var t_0]]] block 1 let __result [adt core_option_Option 0 1 [ref_mut r_named_0_97759 [var t_0]]] ([adt core_option_Option 0 1 [ref_mut r_named_0_97759 [var t_0]]] call core_iter_DoubleEndedIterator_next_back 0 1 [adt core_option_Item 0 1 [ref_mut r_named_0_97759 [var t_0]]] 1 ([ref_mut r_scope_97754 [adt core_option_Item 0 1 [ref_mut r_named_0_97759 [var t_0]]]] addr_of ([adt core_option_Item 0 1 [ref_mut r_named_0_97759 [var t_0]]] field ([adt core_option_IterMut 1 r_named_0_97759 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_option_IterMut 1 r_named_0_97759 1 [var t_0]]] var self)) inner))) ([adt core_option_Option 0 1 [ref_mut r_named_0_97759 [var t_0]]] var __result)) 
struct core_option_IntoIter 0 1 t_0 1 inner [adt core_option_Item 0 1 [var t_0]] 0 
associated_type 0 1 t_0 core_iter_Iterator_Item 0 1 [adt core_option_IntoIter 0 1 [var t_0]] [var t_0] 
fn core_option_IntoIter__Iterator_next 0 1 t_0 args 1 self [ref_mut r_anon_0 [adt core_option_IntoIter 0 1 [var t_0]]] return [adt core_option_Option 0 1 [var t_0]] 1 core_iter_Iterator_next 0 1 [adt core_option_IntoIter 0 1 [var t_0]] body ([adt core_option_Option 0 1 [var t_0]] block 1 let __result [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] call core_iter_Iterator_next 0 1 [adt core_option_Item 0 1 [var t_0]] 1 ([ref_mut r_scope_97798 [adt core_option_Item 0 1 [var t_0]]] addr_of ([adt core_option_Item 0 1 [var t_0]] field ([adt core_option_IntoIter 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_option_IntoIter 0 1 [var t_0]]] var self)) inner))) ([adt core_option_Option 0 1 [var t_0]] var __result)) 
fn core_option_IntoIter__Iterator_size_hint 0 1 t_0 args 1 self [ref r_anon_0 [adt core_option_IntoIter 0 1 [var t_0]]] return [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] 1 core_iter_Iterator_size_hint 0 1 [adt core_option_IntoIter 0 1 [var t_0]] body ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] block 1 let __result [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] call core_iter_Iterator_size_hint 0 1 [adt core_option_Item 0 1 [var t_0]] 1 ([ref r_scope_97814 [adt core_option_Item 0 1 [var t_0]]] addr_of ([adt core_option_Item 0 1 [var t_0]] field ([adt core_option_IntoIter 0 1 [var t_0]] deref ([ref r_anon_0 [adt core_option_IntoIter 0 1 [var t_0]]] var self)) inner))) ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] var __result)) 
fn core_option_IntoIter__DoubleEndedIterator_next_back 0 1 t_0 args 1 self [ref_mut r_anon_0 [adt core_option_IntoIter 0 1 [var t_0]]] return [adt core_option_Option 0 1 [var t_0]] 1 core_iter_DoubleEndedIterator_next_back 0 1 [adt core_option_IntoIter 0 1 [var t_0]] body ([adt core_option_Option 0 1 [var t_0]] block 1 let __result [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] call core_iter_DoubleEndedIterator_next_back 0 1 [adt core_option_Item 0 1 [var t_0]] 1 ([ref_mut r_scope_97835 [adt core_option_Item 0 1 [var t_0]]] addr_of ([adt core_option_Item 0 1 [var t_0]] field ([adt core_option_IntoIter 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt core_option_IntoIter 0 1 [var t_0]]] var self)) inner))) ([adt core_option_Option 0 1 [var t_0]] var __result)) 
fn core_option_Option__FromIterator_from_iter 0 3 t_0 t_1 f_0 args 1 iter [var f_0] return [adt core_option_Option 0 1 [var t_1]] 1 core_iter_FromIterator_from_iter 0 2 [adt core_option_Option 0 1 [var t_0]] [adt core_option_Option 0 1 [var t_1]] body ([adt core_option_Option 0 1 [var t_1]] block 7 let __drop_v [bool] ([bool] simple_literal false) expr ([unit] simple_literal _DeclItem) expr ([unit] simple_literal _DeclItem) let adapter [adt core_option_Option__FromIterator_from_iter_Adapter 0 1 [var f_0]] ([adt core_option_Option__FromIterator_from_iter_Adapter 0 1 [var f_0]] struct_literal 2 iter ([var f_0] var iter) found_none ([bool] simple_literal false)) let v [var t_1] ([var t_1] call core_iter_FromIterator_from_iter 0 3 [var t_0] [var t_1] [adt core_iter_ByRef 1 r_scope_97945 1 [adt core_option_Option__FromIterator_from_iter_Adapter 0 1 [var f_0]]] 1 ([adt core_iter_ByRef 1 r_scope_97944 1 [adt core_option_Option__FromIterator_from_iter_Adapter 0 1 [var f_0]]] call core_iter_IteratorExt_by_ref 0 1 [adt core_option_Option__FromIterator_from_iter_Adapter 0 1 [var f_0]] 1 ([ref_mut r_scope_97944 [adt core_option_Option__FromIterator_from_iter_Adapter 0 1 [var f_0]]] addr_of ([adt core_option_Option__FromIterator_from_iter_Adapter 0 1 [var f_0]] var adapter)))) let __result_1 [adt core_option_Option 0 1 [var t_1]] ([adt core_option_Option 0 1 [var t_1]] match ([int 32] cast ([bool] field ([adt core_option_Option__FromIterator_from_iter_Adapter 0 1 [var f_0]] var adapter) found_none) [int 32]) 2 ([int 32] simple_literal 0) ([adt core_option_Option 0 1 [var t_1]] block 1 let __result [adt core_option_Option 0 1 [var t_1]] ([adt core_option_Option 0 1 [var t_1]] enum_literal core_option_Some 1 1 ([var t_1] var v)) ([adt core_option_Option 0 1 [var t_1]] var __result)) ([int 32] wild) ([adt core_option_Option 0 1 [var t_1]] block 1 let __result_0 [adt core_option_Option 0 1 [var t_1]] ([adt core_option_Option 0 1 [var t_1]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [var t_1]] var __result_0))) expr ([unit] match ([bool] var __drop_v) 2 ([bool] simple_literal 0) ([unit] simple_literal _unit) ([bool] wild) ([unit] call drop_glue 0 1 [var t_1] 1 ([ptr_mut [var t_1]] addr_of ([var t_1] var v)))) ([adt core_option_Option 0 1 [var t_1]] var __result_1)) 
struct core_option_Option__FromIterator_from_iter_Adapter 0 1 t_0 2 iter [var t_0] found_none [bool] 0 
associated_type 0 2 t_0 t_1 core_iter_Iterator_Item 0 1 [adt core_option_Option__FromIterator_from_iter_Adapter 0 1 [var t_1]] [var t_0] 
fn core_option_Option__FromIterator_from_iter_Adapter__Iterator_next 0 2 t_0 t_1 args 1 self [ref_mut r_anon_0 [adt core_option_Option__FromIterator_from_iter_Adapter 0 1 [var t_1]]] return [adt core_option_Option 0 1 [var t_0]] 1 core_iter_Iterator_next 0 1 [adt core_option_Option__FromIterator_from_iter_Adapter 0 1 [var t_1]] body ([adt core_option_Option 0 1 [var t_0]] block 1 let __result_0 [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] match ([adt core_option_Option 0 1 [adt core_option_Option 0 1 [var t_0]]] call core_iter_Iterator_next 0 1 [var t_1] 1 ([ref_mut r_scope_97898 [var t_1]] addr_of ([var t_1] field ([adt core_option_Option__FromIterator_from_iter_Adapter 0 1 [var t_1]] deref ([ref_mut r_anon_0 [adt core_option_Option__FromIterator_from_iter_Adapter 0 1 [var t_1]]] var self)) iter))) 3 ([adt core_option_Option 0 1 [adt core_option_Option 0 1 [var t_0]]] enum core_option_Some 1 1 ([adt core_option_Option 0 1 [var t_0]] enum core_option_Some 1 1 ([var t_0] var value))) ([adt core_option_Option 0 1 [var t_0]] enum_literal core_option_Some 1 1 ([var t_0] var value)) ([adt core_option_Option 0 1 [adt core_option_Option 0 1 [var t_0]]] enum core_option_Some 1 1 ([adt core_option_Option 0 1 [var t_0]] enum core_option_None 0 0)) ([adt core_option_Option 0 1 [var t_0]] block 2 expr ([unit] assign ([bool] field ([adt core_option_Option__FromIterator_from_iter_Adapter 0 1 [var t_1]] deref ([ref_mut r_anon_0 [adt core_option_Option__FromIterator_from_iter_Adapter 0 1 [var t_1]]] var self)) found_none) ([bool] simple_literal true)) let __result [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [var t_0]] var __result)) ([adt core_option_Option 0 1 [adt core_option_Option 0 1 [var t_0]]] enum core_option_None 0 0) ([adt core_option_Option 0 1 [var t_0]] enum_literal core_option_None 0 0)) ([adt core_option_Option 0 1 [var t_0]] var __result_0)) 
struct core_raw_Slice 0 1 t_0 2 data [ptr [var t_0]] len [uint 32] 0 
struct core_raw_Closure 0 0 2 code [ptr_mut [unit]] env [ptr_mut [unit]] 0 
struct core_raw_TraitObject 0 0 2 data [ptr_mut [unit]] vtable [ptr_mut [unit]] 0 
enum core_result_Result 0 2 t_0 t_1 2 core_result_Ok 1 [var t_0] core_result_Err 1 [var t_1] 0 
fn core_result_Result_is_ok 0 2 t_0 t_1 args 1 self [ref r_anon_0 [adt core_result_Result 0 2 [var t_0] [var t_1]]] return [bool] 0 body ([bool] block 1 let __result [bool] ([bool] match ([adt core_result_Result 0 2 [var t_0] [var t_1]] deref ([ref r_anon_0 [adt core_result_Result 0 2 [var t_0] [var t_1]]] var self)) 2 ([adt core_result_Result 0 2 [var t_0] [var t_1]] enum core_result_Ok 0 1 ([var t_0] wild)) ([bool] simple_literal true) ([adt core_result_Result 0 2 [var t_0] [var t_1]] enum core_result_Err 1 1 ([var t_1] wild)) ([bool] simple_literal false)) ([bool] var __result)) 
fn core_result_Result_is_err 0 2 t_0 t_1 args 1 self [ref r_anon_0 [adt core_result_Result 0 2 [var t_0] [var t_1]]] return [bool] 0 body ([bool] block 1 let __result [bool] ([bool] unop UnNot ([bool] call core_result_Result_is_ok 0 2 [var t_0] [var t_1] 1 ([ref r_anon_0 [adt core_result_Result 0 2 [var t_0] [var t_1]]] var self))) ([bool] var __result)) 
fn core_result_Result_ok 0 2 t_0 t_1 args 1 self [adt core_result_Result 0 2 [var t_0] [var t_1]] return [adt core_option_Option 0 1 [var t_0]] 0 body ([adt core_option_Option 0 1 [var t_0]] block 1 let __result [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] match ([adt core_result_Result 0 2 [var t_0] [var t_1]] var self) 2 ([adt core_result_Result 0 2 [var t_0] [var t_1]] enum core_result_Ok 0 1 ([var t_0] var x)) ([adt core_option_Option 0 1 [var t_0]] enum_literal core_option_Some 1 1 ([var t_0] var x)) ([adt core_result_Result 0 2 [var t_0] [var t_1]] enum core_result_Err 1 1 ([var t_1] wild)) ([adt core_option_Option 0 1 [var t_0]] enum_literal core_option_None 0 0)) ([adt core_option_Option 0 1 [var t_0]] var __result)) 
fn core_result_Result_err 0 2 t_0 t_1 args 1 self [adt core_result_Result 0 2 [var t_0] [var t_1]] return [adt core_option_Option 0 1 [var t_1]] 0 body ([adt core_option_Option 0 1 [var t_1]] block 1 let __result [adt core_option_Option 0 1 [var t_1]] ([adt core_option_Option 0 1 [var t_1]] match ([adt core_result_Result 0 2 [var t_0] [var t_1]] var self) 2 ([adt core_result_Result 0 2 [var t_0] [var t_1]] enum core_result_Ok 0 1 ([var t_0] wild)) ([adt core_option_Option 0 1 [var t_1]] enum_literal core_option_None 0 0) ([adt core_result_Result 0 2 [var t_0] [var t_1]] enum core_result_Err 1 1 ([var t_1] var x)) ([adt core_option_Option 0 1 [var t_1]] enum_literal core_option_Some 1 1 ([var t_1] var x))) ([adt core_option_Option 0 1 [var t_1]] var __result)) 
fn core_result_Result_as_ref 0 2 t_0 t_1 args 1 self [ref r_anon_0 [adt core_result_Result 0 2 [var t_0] [var t_1]]] return [adt core_result_Result 0 2 [ref r_anon_0 [var t_0]] [ref r_anon_0 [var t_1]]] 0 body ([adt core_result_Result 0 2 [ref r_anon_0 [var t_0]] [ref r_anon_0 [var t_1]]] block 1 let __result [adt core_result_Result 0 2 [ref r_anon_0 [var t_0]] [ref r_anon_0 [var t_1]]] ([adt core_result_Result 0 2 [ref r_anon_0 [var t_0]] [ref r_anon_0 [var t_1]]] match ([adt core_result_Result 0 2 [var t_0] [var t_1]] deref ([ref r_anon_0 [adt core_result_Result 0 2 [var t_0] [var t_1]]] var self)) 2 ([adt core_result_Result 0 2 [var t_0] [var t_1]] enum core_result_Ok 0 1 ([ref r_anon_0 [var t_0]] var x)) ([adt core_result_Result 0 2 [ref r_anon_0 [var t_0]] [ref r_anon_0 [var t_1]]] enum_literal core_result_Ok 0 1 ([ref r_anon_0 [var t_0]] var x)) ([adt core_result_Result 0 2 [var t_0] [var t_1]] enum core_result_Err 1 1 ([ref r_anon_0 [var t_1]] var x_0)) ([adt core_result_Result 0 2 [ref r_anon_0 [var t_0]] [ref r_anon_0 [var t_1]]] enum_literal core_result_Err 1 1 ([ref r_anon_0 [var t_1]] var x_0))) ([adt core_result_Result 0 2 [ref r_anon_0 [var t_0]] [ref r_anon_0 [var t_1]]] var __result)) 
fn core_result_Result_as_mut 0 2 t_0 t_1 args 1 self [ref_mut r_anon_0 [adt core_result_Result 0 2 [var t_0] [var t_1]]] return [adt core_result_Result 0 2 [ref_mut r_anon_0 [var t_0]] [ref_mut r_anon_0 [var t_1]]] 0 body ([adt core_result_Result 0 2 [ref_mut r_anon_0 [var t_0]] [ref_mut r_anon_0 [var t_1]]] block 1 let __result [adt core_result_Result 0 2 [ref_mut r_anon_0 [var t_0]] [ref_mut r_anon_0 [var t_1]]] ([adt core_result_Result 0 2 [ref_mut r_anon_0 [var t_0]] [ref_mut r_anon_0 [var t_1]]] match ([adt core_result_Result 0 2 [var t_0] [var t_1]] deref ([ref_mut r_anon_0 [adt core_result_Result 0 2 [var t_0] [var t_1]]] var self)) 2 ([adt core_result_Result 0 2 [var t_0] [var t_1]] enum core_result_Ok 0 1 ([ref_mut r_anon_0 [var t_0]] var x)) ([adt core_result_Result 0 2 [ref_mut r_anon_0 [var t_0]] [ref_mut r_anon_0 [var t_1]]] enum_literal core_result_Ok 0 1 ([ref_mut r_anon_0 [var t_0]] var x)) ([adt core_result_Result 0 2 [var t_0] [var t_1]] enum core_result_Err 1 1 ([ref_mut r_anon_0 [var t_1]] var x_0)) ([adt core_result_Result 0 2 [ref_mut r_anon_0 [var t_0]] [ref_mut r_anon_0 [var t_1]]] enum_literal core_result_Err 1 1 ([ref_mut r_anon_0 [var t_1]] var x_0))) ([adt core_result_Result 0 2 [ref_mut r_anon_0 [var t_0]] [ref_mut r_anon_0 [var t_1]]] var __result)) 
fn core_result_Result_iter 0 2 t_0 t_1 args 1 self [ref r_anon_0 [adt core_result_Result 0 2 [var t_0] [var t_1]]] return [adt core_result_Iter 1 r_anon_0 1 [var t_0]] 0 body ([adt core_result_Iter 1 r_anon_0 1 [var t_0]] block 1 let __result [adt core_result_Iter 1 r_anon_0 1 [var t_0]] ([adt core_result_Iter 1 r_anon_0 1 [var t_0]] struct_literal 1 inner ([adt core_option_Option 0 1 [ref r_anon_0 [var t_0]]] call core_result_Result_ok 0 2 [ref r_anon_0 [var t_0]] [ref r_anon_0 [var t_1]] 1 ([adt core_result_Result 0 2 [ref r_anon_0 [var t_0]] [ref r_anon_0 [var t_1]]] call core_result_Result_as_ref 0 2 [var t_0] [var t_1] 1 ([ref r_anon_0 [adt core_result_Result 0 2 [var t_0] [var t_1]]] var self)))) ([adt core_result_Iter 1 r_anon_0 1 [var t_0]] var __result)) 
fn core_result_Result_iter_mut 0 2 t_0 t_1 args 1 self [ref_mut r_anon_0 [adt core_result_Result 0 2 [var t_0] [var t_1]]] return [adt core_result_IterMut 1 r_anon_0 1 [var t_0]] 0 body ([adt core_result_IterMut 1 r_anon_0 1 [var t_0]] block 1 let __result [adt core_result_IterMut 1 r_anon_0 1 [var t_0]] ([adt core_result_IterMut 1 r_anon_0 1 [var t_0]] struct_literal 1 inner ([adt core_option_Option 0 1 [ref_mut r_anon_0 [var t_0]]] call core_result_Result_ok 0 2 [ref_mut r_anon_0 [var t_0]] [ref_mut r_anon_0 [var t_1]] 1 ([adt core_result_Result 0 2 [ref_mut r_anon_0 [var t_0]] [ref_mut r_anon_0 [var t_1]]] call core_result_Result_as_mut 0 2 [var t_0] [var t_1] 1 ([ref_mut r_anon_0 [adt core_result_Result 0 2 [var t_0] [var t_1]]] var self)))) ([adt core_result_IterMut 1 r_anon_0 1 [var t_0]] var __result)) 
fn core_result_Result_into_iter 0 2 t_0 t_1 args 1 self [adt core_result_Result 0 2 [var t_0] [var t_1]] return [adt core_result_IntoIter 0 1 [var t_0]] 0 body ([adt core_result_IntoIter 0 1 [var t_0]] block 1 let __result [adt core_result_IntoIter 0 1 [var t_0]] ([adt core_result_IntoIter 0 1 [var t_0]] struct_literal 1 inner ([adt core_option_Option 0 1 [var t_0]] call core_result_Result_ok 0 2 [var t_0] [var t_1] 1 ([adt core_result_Result 0 2 [var t_0] [var t_1]] var self))) ([adt core_result_IntoIter 0 1 [var t_0]] var __result)) 
fn core_result_Result_and 0 3 t_0 t_1 f_0 args 2 self [adt core_result_Result 0 2 [var t_0] [var t_1]] res [adt core_result_Result 0 2 [var f_0] [var t_1]] return [adt core_result_Result 0 2 [var f_0] [var t_1]] 0 body ([adt core_result_Result 0 2 [var f_0] [var t_1]] block 1 let __result [adt core_result_Result 0 2 [var f_0] [var t_1]] ([adt core_result_Result 0 2 [var f_0] [var t_1]] match ([adt core_result_Result 0 2 [var t_0] [var t_1]] var self) 2 ([adt core_result_Result 0 2 [var t_0] [var t_1]] enum core_result_Ok 0 1 ([var t_0] wild)) ([adt core_result_Result 0 2 [var f_0] [var t_1]] var res) ([adt core_result_Result 0 2 [var t_0] [var t_1]] enum core_result_Err 1 1 ([var t_1] var e)) ([adt core_result_Result 0 2 [var f_0] [var t_1]] enum_literal core_result_Err 1 1 ([var t_1] var e))) ([adt core_result_Result 0 2 [var f_0] [var t_1]] var __result)) 
fn core_result_Result_or 0 2 t_0 t_1 args 2 self [adt core_result_Result 0 2 [var t_0] [var t_1]] res [adt core_result_Result 0 2 [var t_0] [var t_1]] return [adt core_result_Result 0 2 [var t_0] [var t_1]] 0 body ([adt core_result_Result 0 2 [var t_0] [var t_1]] block 1 let __result [adt core_result_Result 0 2 [var t_0] [var t_1]] ([adt core_result_Result 0 2 [var t_0] [var t_1]] match ([adt core_result_Result 0 2 [var t_0] [var t_1]] var self) 2 ([adt core_result_Result 0 2 [var t_0] [var t_1]] enum core_result_Ok 0 1 ([var t_0] wild)) ([adt core_result_Result 0 2 [var t_0] [var t_1]] var self) ([adt core_result_Result 0 2 [var t_0] [var t_1]] enum core_result_Err 1 1 ([var t_1] wild)) ([adt core_result_Result 0 2 [var t_0] [var t_1]] var res)) ([adt core_result_Result 0 2 [var t_0] [var t_1]] var __result)) 
fn core_result_Result_unwrap_or 0 2 t_0 t_1 args 2 self [adt core_result_Result 0 2 [var t_0] [var t_1]] optb [var t_0] return [var t_0] 0 body ([var t_0] block 1 let __result [var t_0] ([var t_0] match ([adt core_result_Result 0 2 [var t_0] [var t_1]] var self) 2 ([adt core_result_Result 0 2 [var t_0] [var t_1]] enum core_result_Ok 0 1 ([var t_0] var t)) ([var t_0] var t) ([adt core_result_Result 0 2 [var t_0] [var t_1]] enum core_result_Err 1 1 ([var t_1] wild)) ([var t_0] var optb)) ([var t_0] var __result)) 
struct core_result_Iter 1 r_named_0_99903 1 t_0 1 inner [adt core_option_Option 0 1 [ref r_named_0_99903 [var t_0]]] 0 
associated_type 1 r_named_0_99958 1 t_0 core_iter_Iterator_Item 0 1 [adt core_result_Iter 1 r_named_0_99958 1 [var t_0]] [ref r_named_0_99958 [var t_0]] 
fn core_result_Iter__Iterator_size_hint 1 r_named_0_99958 1 t_0 args 1 self [ref r_anon_0 [adt core_result_Iter 1 r_named_0_99958 1 [var t_0]]] return [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] 1 core_iter_Iterator_size_hint 0 1 [adt core_result_Iter 1 r_named_0_99958 1 [var t_0]] body ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] block 2 let n [uint 32] ([uint 32] match ([int 32] cast ([bool] call core_option_Option_is_some 0 1 [ref r_named_0_99958 [var t_0]] 1 ([ref r_scope_99943 [adt core_option_Option 0 1 [ref r_named_0_99958 [var t_0]]]] addr_of ([adt core_option_Option 0 1 [ref r_named_0_99958 [var t_0]]] field ([adt core_result_Iter 1 r_named_0_99958 1 [var t_0]] deref ([ref r_anon_0 [adt core_result_Iter 1 r_named_0_99958 1 [var t_0]]] var self)) inner))) [int 32]) 2 ([int 32] simple_literal 0) ([uint 32] block 1 let __result [uint 32] ([uint 32] simple_literal 0) ([uint 32] var __result)) ([int 32] wild) ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] simple_literal 1) ([uint 32] var __result_0))) let __result_1 [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] tuple_literal 2 ([uint 32] var n) ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] var n))) ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] var __result_1)) 
fn core_result_Iter__Clone_clone 1 r_named_0_100017 1 t_0 args 1 self [ref r_anon_0 [adt core_result_Iter 1 r_named_0_100017 1 [var t_0]]] return [adt core_result_Iter 1 r_named_0_100017 1 [var t_0]] 1 core_clone_Clone_clone 0 1 [adt core_result_Iter 1 r_named_0_100017 1 [var t_0]] body ([adt core_result_Iter 1 r_named_0_100017 1 [var t_0]] block 1 let __result [adt core_result_Iter 1 r_named_0_100017 1 [var t_0]] ([adt core_result_Iter 1 r_named_0_100017 1 [var t_0]] struct_literal 1 inner ([adt core_option_Option 0 1 [ref r_named_0_100017 [var t_0]]] field ([adt core_result_Iter 1 r_named_0_100017 1 [var t_0]] deref ([ref r_anon_0 [adt core_result_Iter 1 r_named_0_100017 1 [var t_0]]] var self)) inner)) ([adt core_result_Iter 1 r_named_0_100017 1 [var t_0]] var __result)) 
struct core_result_IterMut 1 r_named_0_100034 1 t_0 1 inner [adt core_option_Option 0 1 [ref_mut r_named_0_100034 [var t_0]]] 0 
associated_type 1 r_named_0_100089 1 t_0 core_iter_Iterator_Item 0 1 [adt core_result_IterMut 1 r_named_0_100089 1 [var t_0]] [ref_mut r_named_0_100089 [var t_0]] 
fn core_result_IterMut__Iterator_size_hint 1 r_named_0_100089 1 t_0 args 1 self [ref r_anon_0 [adt core_result_IterMut 1 r_named_0_100089 1 [var t_0]]] return [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] 1 core_iter_Iterator_size_hint 0 1 [adt core_result_IterMut 1 r_named_0_100089 1 [var t_0]] body ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] block 2 let n [uint 32] ([uint 32] match ([int 32] cast ([bool] call core_option_Option_is_some 0 1 [ref_mut r_named_0_100089 [var t_0]] 1 ([ref r_scope_100074 [adt core_option_Option 0 1 [ref_mut r_named_0_100089 [var t_0]]]] addr_of ([adt core_option_Option 0 1 [ref_mut r_named_0_100089 [var t_0]]] field ([adt core_result_IterMut 1 r_named_0_100089 1 [var t_0]] deref ([ref r_anon_0 [adt core_result_IterMut 1 r_named_0_100089 1 [var t_0]]] var self)) inner))) [int 32]) 2 ([int 32] simple_literal 0) ([uint 32] block 1 let __result [uint 32] ([uint 32] simple_literal 0) ([uint 32] var __result)) ([int 32] wild) ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] simple_literal 1) ([uint 32] var __result_0))) let __result_1 [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] tuple_literal 2 ([uint 32] var n) ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] var n))) ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] var __result_1)) 
struct core_result_IntoIter 0 1 t_0 1 inner [adt core_option_Option 0 1 [var t_0]] 0 
associated_type 0 1 t_0 core_iter_Iterator_Item 0 1 [adt core_result_IntoIter 0 1 [var t_0]] [var t_0] 
fn core_result_IntoIter__Iterator_size_hint 0 1 t_0 args 1 self [ref r_anon_0 [adt core_result_IntoIter 0 1 [var t_0]]] return [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] 1 core_iter_Iterator_size_hint 0 1 [adt core_result_IntoIter 0 1 [var t_0]] body ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] block 2 let n [uint 32] ([uint 32] match ([int 32] cast ([bool] call core_option_Option_is_some 0 1 [var t_0] 1 ([ref r_scope_100173 [adt core_option_Option 0 1 [var t_0]]] addr_of ([adt core_option_Option 0 1 [var t_0]] field ([adt core_result_IntoIter 0 1 [var t_0]] deref ([ref r_anon_0 [adt core_result_IntoIter 0 1 [var t_0]]] var self)) inner))) [int 32]) 2 ([int 32] simple_literal 0) ([uint 32] block 1 let __result [uint 32] ([uint 32] simple_literal 0) ([uint 32] var __result)) ([int 32] wild) ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] simple_literal 1) ([uint 32] var __result_0))) let __result_1 [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] tuple_literal 2 ([uint 32] var n) ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] var n))) ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] var __result_1)) 
fn core_result_Result__FromIterator_from_iter 0 4 t_0 t_1 t_2 f_0 args 1 iter [var f_0] return [adt core_result_Result 0 2 [var t_2] [var t_1]] 1 core_iter_FromIterator_from_iter 0 2 [adt core_result_Result 0 2 [var t_0] [var t_1]] [adt core_result_Result 0 2 [var t_2] [var t_1]] body ([adt core_result_Result 0 2 [var t_2] [var t_1]] block 7 let __drop_v [bool] ([bool] simple_literal false) expr ([unit] simple_literal _DeclItem) expr ([unit] simple_literal _DeclItem) let adapter [adt core_result_Result__FromIterator_from_iter_Adapter 0 2 [var f_0] [var t_1]] ([adt core_result_Result__FromIterator_from_iter_Adapter 0 2 [var f_0] [var t_1]] struct_literal 2 iter ([var f_0] var iter) err ([adt core_option_Option 0 1 [var t_1]] enum_literal core_option_None 0 0)) let v [var t_2] ([var t_2] call core_iter_FromIterator_from_iter 0 3 [var t_0] [var t_2] [adt core_iter_ByRef 1 r_scope_100329 1 [adt core_result_Result__FromIterator_from_iter_Adapter 0 2 [var f_0] [var t_1]]] 1 ([adt core_iter_ByRef 1 r_scope_100328 1 [adt core_result_Result__FromIterator_from_iter_Adapter 0 2 [var f_0] [var t_1]]] call core_iter_IteratorExt_by_ref 0 1 [adt core_result_Result__FromIterator_from_iter_Adapter 0 2 [var f_0] [var t_1]] 1 ([ref_mut r_scope_100328 [adt core_result_Result__FromIterator_from_iter_Adapter 0 2 [var f_0] [var t_1]]] addr_of ([adt core_result_Result__FromIterator_from_iter_Adapter 0 2 [var f_0] [var t_1]] var adapter)))) let __result [adt core_result_Result 0 2 [var t_2] [var t_1]] ([adt core_result_Result 0 2 [var t_2] [var t_1]] match ([adt core_option_Option 0 1 [var t_1]] field ([adt core_result_Result__FromIterator_from_iter_Adapter 0 2 [var f_0] [var t_1]] var adapter) err) 2 ([adt core_option_Option 0 1 [var t_1]] enum core_option_Some 1 1 ([var t_1] var err)) ([adt core_result_Result 0 2 [var t_2] [var t_1]] enum_literal core_result_Err 1 1 ([var t_1] var err)) ([adt core_option_Option 0 1 [var t_1]] enum core_option_None 0 0) ([adt core_result_Result 0 2 [var t_2] [var t_1]] enum_literal core_result_Ok 0 1 ([var t_2] var v))) expr ([unit] match ([bool] var __drop_v) 2 ([bool] simple_literal 0) ([unit] simple_literal _unit) ([bool] wild) ([unit] call drop_glue 0 1 [var t_2] 1 ([ptr_mut [var t_2]] addr_of ([var t_2] var v)))) ([adt core_result_Result 0 2 [var t_2] [var t_1]] var __result)) 
struct core_result_Result__FromIterator_from_iter_Adapter 0 2 t_0 t_1 2 iter [var t_0] err [adt core_option_Option 0 1 [var t_1]] 0 
associated_type 0 3 t_0 t_1 t_2 core_iter_Iterator_Item 0 1 [adt core_result_Result__FromIterator_from_iter_Adapter 0 2 [var t_2] [var t_1]] [var t_0] 
fn core_result_Result__FromIterator_from_iter_Adapter__Iterator_next 0 3 t_0 t_1 t_2 args 1 self [ref_mut r_anon_0 [adt core_result_Result__FromIterator_from_iter_Adapter 0 2 [var t_2] [var t_1]]] return [adt core_option_Option 0 1 [var t_0]] 1 core_iter_Iterator_next 0 1 [adt core_result_Result__FromIterator_from_iter_Adapter 0 2 [var t_2] [var t_1]] body ([adt core_option_Option 0 1 [var t_0]] block 1 let __result_0 [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] match ([adt core_option_Option 0 1 [adt core_result_Result 0 2 [var t_0] [var t_1]]] call core_iter_Iterator_next 0 1 [var t_2] 1 ([ref_mut r_scope_100274 [var t_2]] addr_of ([var t_2] field ([adt core_result_Result__FromIterator_from_iter_Adapter 0 2 [var t_2] [var t_1]] deref ([ref_mut r_anon_0 [adt core_result_Result__FromIterator_from_iter_Adapter 0 2 [var t_2] [var t_1]]] var self)) iter))) 3 ([adt core_option_Option 0 1 [adt core_result_Result 0 2 [var t_0] [var t_1]]] enum core_option_Some 1 1 ([adt core_result_Result 0 2 [var t_0] [var t_1]] enum core_result_Ok 0 1 ([var t_0] var value))) ([adt core_option_Option 0 1 [var t_0]] enum_literal core_option_Some 1 1 ([var t_0] var value)) ([adt core_option_Option 0 1 [adt core_result_Result 0 2 [var t_0] [var t_1]]] enum core_option_Some 1 1 ([adt core_result_Result 0 2 [var t_0] [var t_1]] enum core_result_Err 1 1 ([var t_1] var err))) ([adt core_option_Option 0 1 [var t_0]] block 2 expr ([unit] assign ([adt core_option_Option 0 1 [var t_1]] field ([adt core_result_Result__FromIterator_from_iter_Adapter 0 2 [var t_2] [var t_1]] deref ([ref_mut r_anon_0 [adt core_result_Result__FromIterator_from_iter_Adapter 0 2 [var t_2] [var t_1]]] var self)) err) ([adt core_option_Option 0 1 [var t_1]] enum_literal core_option_Some 1 1 ([var t_1] var err))) let __result [adt core_option_Option 0 1 [var t_0]] ([adt core_option_Option 0 1 [var t_0]] enum_literal core_option_None 0 0) ([adt core_option_Option 0 1 [var t_0]] var __result)) ([adt core_option_Option 0 1 [adt core_result_Result 0 2 [var t_0] [var t_1]]] enum core_option_None 0 0) ([adt core_option_Option 0 1 [var t_0]] enum_literal core_option_None 0 0)) ([adt core_option_Option 0 1 [var t_0]] var __result_0)) 
struct core_slice_Iter 1 r_named_0_104880 1 t_0 3 ptr [ptr [var t_0]] end [ptr [var t_0]] marker [adt core_marker_ContravariantLifetime 1 r_named_0_104880 0] 0 
associated_type 1 r_named_0_105250 1 t_0 core_iter_Iterator_Item 0 1 [adt core_slice_Iter 1 r_named_0_105250 1 [var t_0]] [ref r_named_0_105250 [var t_0]] 
fn core_slice_Iter__Iterator_size_hint 1 r_named_0_105250 1 t_0 args 1 self [ref r_anon_0 [adt core_slice_Iter 1 r_named_0_105250 1 [var t_0]]] return [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] 1 core_iter_Iterator_size_hint 0 1 [adt core_slice_Iter 1 r_named_0_105250 1 [var t_0]] body ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] block 4 let diff [uint 32] ([uint 32] binop BiSub ([uint 32] cast ([ptr [var t_0]] field ([adt core_slice_Iter 1 r_named_0_105250 1 [var t_0]] deref ([ref r_anon_0 [adt core_slice_Iter 1 r_named_0_105250 1 [var t_0]]] var self)) end) [uint 32]) ([uint 32] cast ([ptr [var t_0]] field ([adt core_slice_Iter 1 r_named_0_105250 1 [var t_0]] deref ([ref r_anon_0 [adt core_slice_Iter 1 r_named_0_105250 1 [var t_0]]] var self)) ptr) [uint 32])) let size [uint 32] ([uint 32] call core_mem_size_of 0 1 [var t_0] 0) let exact [uint 32] ([uint 32] binop BiDiv ([uint 32] var diff) ([uint 32] match ([int 32] cast ([bool] binop BiEq ([uint 32] var size) ([uint 32] simple_literal 0)) [int 32]) 2 ([int 32] simple_literal 0) ([uint 32] block 1 let __result [uint 32] ([uint 32] var size) ([uint 32] var __result)) ([int 32] wild) ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] simple_literal 1) ([uint 32] var __result_0)))) let __result_1 [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] tuple_literal 2 ([uint 32] var exact) ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] var exact))) ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] var __result_1)) 
fn core_slice_Iter__Clone_clone 1 r_named_0_105364 1 t_0 args 1 self [ref r_anon_0 [adt core_slice_Iter 1 r_named_0_105364 1 [var t_0]]] return [adt core_slice_Iter 1 r_named_0_105364 1 [var t_0]] 1 core_clone_Clone_clone 0 1 [adt core_slice_Iter 1 r_named_0_105364 1 [var t_0]] body ([adt core_slice_Iter 1 r_named_0_105364 1 [var t_0]] block 1 let __result [adt core_slice_Iter 1 r_named_0_105364 1 [var t_0]] ([adt core_slice_Iter 1 r_named_0_105364 1 [var t_0]] deref ([ref r_anon_0 [adt core_slice_Iter 1 r_named_0_105364 1 [var t_0]]] var self)) ([adt core_slice_Iter 1 r_named_0_105364 1 [var t_0]] var __result)) 
struct core_slice_IterMut 1 r_named_0_105469 1 t_0 3 ptr [ptr_mut [var t_0]] end [ptr_mut [var t_0]] marker [adt core_marker_ContravariantLifetime 1 r_named_0_105469 0] 0 
associated_type 1 r_named_0_106085 1 t_0 core_iter_Iterator_Item 0 1 [adt core_slice_IterMut 1 r_named_0_106085 1 [var t_0]] [ref_mut r_named_0_106085 [var t_0]] 
fn core_slice_IterMut__Iterator_size_hint 1 r_named_0_106085 1 t_0 args 1 self [ref r_anon_0 [adt core_slice_IterMut 1 r_named_0_106085 1 [var t_0]]] return [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] 1 core_iter_Iterator_size_hint 0 1 [adt core_slice_IterMut 1 r_named_0_106085 1 [var t_0]] body ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] block 4 let diff [uint 32] ([uint 32] binop BiSub ([uint 32] cast ([ptr_mut [var t_0]] field ([adt core_slice_IterMut 1 r_named_0_106085 1 [var t_0]] deref ([ref r_anon_0 [adt core_slice_IterMut 1 r_named_0_106085 1 [var t_0]]] var self)) end) [uint 32]) ([uint 32] cast ([ptr_mut [var t_0]] field ([adt core_slice_IterMut 1 r_named_0_106085 1 [var t_0]] deref ([ref r_anon_0 [adt core_slice_IterMut 1 r_named_0_106085 1 [var t_0]]] var self)) ptr) [uint 32])) let size [uint 32] ([uint 32] call core_mem_size_of 0 1 [var t_0] 0) let exact [uint 32] ([uint 32] binop BiDiv ([uint 32] var diff) ([uint 32] match ([int 32] cast ([bool] binop BiEq ([uint 32] var size) ([uint 32] simple_literal 0)) [int 32]) 2 ([int 32] simple_literal 0) ([uint 32] block 1 let __result [uint 32] ([uint 32] var size) ([uint 32] var __result)) ([int 32] wild) ([uint 32] block 1 let __result_0 [uint 32] ([uint 32] simple_literal 1) ([uint 32] var __result_0)))) let __result_1 [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] tuple_literal 2 ([uint 32] var exact) ([adt core_option_Option 0 1 [uint 32]] enum_literal core_option_Some 1 1 ([uint 32] var exact))) ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] var __result_1)) 
struct core_slice_GenericSplitN 0 1 t_0 3 iter [var t_0] count [uint 32] invert [bool] 0 
associated_type 0 2 t_0 t_1 core_iter_Iterator_Item 0 1 [adt core_slice_GenericSplitN 0 1 [var t_1]] [var t_0] 
enum core_str_Utf8Error 0 0 2 core_str_InvalidByte 1 [uint 32] core_str_TooShort 0 0 
fn core_str_F__CharEq_only_ascii 0 1 t_0 args 1 self [ref r_anon_0 [var t_0]] return [bool] 1 core_str_CharEq_only_ascii 0 1 [var t_0] body ([bool] block 1 let __result [bool] ([bool] simple_literal false) ([bool] var __result)) 
struct core_str_Chars 1 r_named_0_110046 0 1 iter [adt core_slice_Iter 1 r_named_0_110046 1 [uint 8]] 0 
struct core_str_CharIndices 1 r_named_0_110515 0 2 front_offset [uint 32] iter [adt core_str_Chars 1 r_named_0_110515 0] 0 
fn core_str_CharIndices__Iterator_size_hint 1 r_named_0_110634 0 args 1 self [ref r_anon_0 [adt core_str_CharIndices 1 r_named_0_110634 0]] return [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] 1 core_iter_Iterator_size_hint 0 1 [adt core_str_CharIndices 1 r_named_0_110634 0] body ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] block 1 let __result [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] call core_iter_Iterator_size_hint 0 1 [adt core_str_Chars 1 r_scope_110630 0] 1 ([ref r_scope_110630 [adt core_str_Chars 1 r_named_0_110634 0]] addr_of ([adt core_str_Chars 1 r_named_0_110634 0] field ([adt core_str_CharIndices 1 r_named_0_110634 0] deref ([ref r_anon_0 [adt core_str_CharIndices 1 r_named_0_110634 0]] var self)) iter))) ([tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] var __result)) 
struct core_str_BytesDeref 0 0 0 0 
struct core_str_NaiveSearcher 0 0 1 position [uint 32] 0 
fn core_str_NaiveSearcher_new 0 0 args 0 return [adt core_str_NaiveSearcher 0 0] 0 body ([adt core_str_NaiveSearcher 0 0] block 1 let __result [adt core_str_NaiveSearcher 0 0] ([adt core_str_NaiveSearcher 0 0] struct_literal 1 position ([uint 32] simple_literal 0)) ([adt core_str_NaiveSearcher 0 0] var __result)) 
struct core_str_TwoWaySearcher 0 0 5 crit_pos [uint 32] period [uint 32] byteset [uint 64] position [uint 32] memory [uint 32] 0 
enum core_str_Searcher 0 0 3 core_str_Naive 1 [adt core_str_NaiveSearcher 0 0] core_str_TwoWay 1 [adt core_str_TwoWaySearcher 0 0] core_str_TwoWayLong 1 [adt core_str_TwoWaySearcher 0 0] 0 
struct core_hash_sip_SipHasher 0 0 9 k0 [uint 64] k1 [uint 64] length [uint 32] v0 [uint 64] v1 [uint 64] v2 [uint 64] v3 [uint 64] tail [uint 64] ntail [uint 32] 0 
fn core_hash_sip_SipHasher_new 0 0 args 0 return [adt core_hash_sip_SipHasher 0 0] 0 body ([adt core_hash_sip_SipHasher 0 0] block 1 let __result [adt core_hash_sip_SipHasher 0 0] ([adt core_hash_sip_SipHasher 0 0] call core_hash_sip_SipHasher_new_with_keys 0 0 2 ([uint 64] simple_literal 0) ([uint 64] simple_literal 0)) ([adt core_hash_sip_SipHasher 0 0] var __result)) 
fn core_hash_sip_SipHasher_new_with_keys 0 0 args 2 key0 [uint 64] key1 [uint 64] return [adt core_hash_sip_SipHasher 0 0] 0 body ([adt core_hash_sip_SipHasher 0 0] block 3 let state [adt core_hash_sip_SipHasher 0 0] ([adt core_hash_sip_SipHasher 0 0] struct_literal 9 k0 ([uint 64] var key0) k1 ([uint 64] var key1) length ([uint 32] simple_literal 0) v0 ([uint 64] simple_literal 0) v1 ([uint 64] simple_literal 0) v2 ([uint 64] simple_literal 0) v3 ([uint 64] simple_literal 0) tail ([uint 64] simple_literal 0) ntail ([uint 32] simple_literal 0)) expr ([unit] call core_hash_Hasher_reset 0 1 [adt core_hash_sip_SipHasher 0 0] 1 ([ref_mut r_scope_116533 [adt core_hash_sip_SipHasher 0 0]] addr_of ([adt core_hash_sip_SipHasher 0 0] var state))) let __result [adt core_hash_sip_SipHasher 0 0] ([adt core_hash_sip_SipHasher 0 0] var state) ([adt core_hash_sip_SipHasher 0 0] var __result)) 
fn core_hash_sip_SipHasher_result 0 0 args 1 self [ref r_anon_0 [adt core_hash_sip_SipHasher 0 0]] return [uint 64] 0 body ([uint 64] block 1 let __result [uint 64] ([uint 64] call core_hash_Hasher_finish 0 1 [adt core_hash_sip_SipHasher 0 0] 1 ([ref r_anon_0 [adt core_hash_sip_SipHasher 0 0]] var self)) ([uint 64] var __result)) 
associated_type 0 0 core_hash_Hasher_Output 0 1 [adt core_hash_sip_SipHasher 0 0] [uint 64] 
fn core_hash_sip_SipHasher__Hasher_reset 0 0 args 1 self [ref_mut r_anon_0 [adt core_hash_sip_SipHasher 0 0]] return [unit] 1 core_hash_Hasher_reset 0 1 [adt core_hash_sip_SipHasher 0 0] body ([unit] block 7 expr ([unit] assign ([uint 32] field ([adt core_hash_sip_SipHasher 0 0] deref ([ref_mut r_anon_0 [adt core_hash_sip_SipHasher 0 0]] var self)) length) ([uint 32] simple_literal 0)) expr ([unit] assign ([uint 64] field ([adt core_hash_sip_SipHasher 0 0] deref ([ref_mut r_anon_0 [adt core_hash_sip_SipHasher 0 0]] var self)) v0) ([uint 64] binop BiBitXor ([uint 64] field ([adt core_hash_sip_SipHasher 0 0] deref ([ref_mut r_anon_0 [adt core_hash_sip_SipHasher 0 0]] var self)) k0) ([uint 64] simple_literal 8317987319222330741))) expr ([unit] assign ([uint 64] field ([adt core_hash_sip_SipHasher 0 0] deref ([ref_mut r_anon_0 [adt core_hash_sip_SipHasher 0 0]] var self)) v1) ([uint 64] binop BiBitXor ([uint 64] field ([adt core_hash_sip_SipHasher 0 0] deref ([ref_mut r_anon_0 [adt core_hash_sip_SipHasher 0 0]] var self)) k1) ([uint 64] simple_literal 7237128888997146477))) expr ([unit] assign ([uint 64] field ([adt core_hash_sip_SipHasher 0 0] deref ([ref_mut r_anon_0 [adt core_hash_sip_SipHasher 0 0]] var self)) v2) ([uint 64] binop BiBitXor ([uint 64] field ([adt core_hash_sip_SipHasher 0 0] deref ([ref_mut r_anon_0 [adt core_hash_sip_SipHasher 0 0]] var self)) k0) ([uint 64] simple_literal 7816392313619706465))) expr ([unit] assign ([uint 64] field ([adt core_hash_sip_SipHasher 0 0] deref ([ref_mut r_anon_0 [adt core_hash_sip_SipHasher 0 0]] var self)) v3) ([uint 64] binop BiBitXor ([uint 64] field ([adt core_hash_sip_SipHasher 0 0] deref ([ref_mut r_anon_0 [adt core_hash_sip_SipHasher 0 0]] var self)) k1) ([uint 64] simple_literal 8387220255154660723))) expr ([unit] assign ([uint 32] field ([adt core_hash_sip_SipHasher 0 0] deref ([ref_mut r_anon_0 [adt core_hash_sip_SipHasher 0 0]] var self)) ntail) ([uint 32] simple_literal 0)) let __result [unit] ([unit] simple_literal _method) ([unit] var __result)) 
fn core_hash_sip_SipHasher__Clone_clone 0 0 args 1 self [ref r_anon_0 [adt core_hash_sip_SipHasher 0 0]] return [adt core_hash_sip_SipHasher 0 0] 1 core_clone_Clone_clone 0 1 [adt core_hash_sip_SipHasher 0 0] body ([adt core_hash_sip_SipHasher 0 0] block 1 let __result [adt core_hash_sip_SipHasher 0 0] ([adt core_hash_sip_SipHasher 0 0] struct_literal 9 k0 ([uint 64] field ([adt core_hash_sip_SipHasher 0 0] deref ([ref r_anon_0 [adt core_hash_sip_SipHasher 0 0]] var self)) k0) k1 ([uint 64] field ([adt core_hash_sip_SipHasher 0 0] deref ([ref r_anon_0 [adt core_hash_sip_SipHasher 0 0]] var self)) k1) length ([uint 32] field ([adt core_hash_sip_SipHasher 0 0] deref ([ref r_anon_0 [adt core_hash_sip_SipHasher 0 0]] var self)) length) v0 ([uint 64] field ([adt core_hash_sip_SipHasher 0 0] deref ([ref r_anon_0 [adt core_hash_sip_SipHasher 0 0]] var self)) v0) v1 ([uint 64] field ([adt core_hash_sip_SipHasher 0 0] deref ([ref r_anon_0 [adt core_hash_sip_SipHasher 0 0]] var self)) v1) v2 ([uint 64] field ([adt core_hash_sip_SipHasher 0 0] deref ([ref r_anon_0 [adt core_hash_sip_SipHasher 0 0]] var self)) v2) v3 ([uint 64] field ([adt core_hash_sip_SipHasher 0 0] deref ([ref r_anon_0 [adt core_hash_sip_SipHasher 0 0]] var self)) v3) tail ([uint 64] field ([adt core_hash_sip_SipHasher 0 0] deref ([ref r_anon_0 [adt core_hash_sip_SipHasher 0 0]] var self)) tail) ntail ([uint 32] field ([adt core_hash_sip_SipHasher 0 0] deref ([ref r_anon_0 [adt core_hash_sip_SipHasher 0 0]] var self)) ntail)) ([adt core_hash_sip_SipHasher 0 0] var __result)) 
fn core_hash_sip_SipHasher__Default_default 0 0 args 0 return [adt core_hash_sip_SipHasher 0 0] 1 core_default_Default_default 0 1 [adt core_hash_sip_SipHasher 0 0] body ([adt core_hash_sip_SipHasher 0 0] block 1 let __result [adt core_hash_sip_SipHasher 0 0] ([adt core_hash_sip_SipHasher 0 0] call core_hash_sip_SipHasher_new 0 0 0) ([adt core_hash_sip_SipHasher 0 0] var __result)) 
fn core_hash_hash 0 2 f_0 f_1 args 1 value [ref r_anon_0 [var f_0]] return [abstract core_hash_Hasher_Output 0 1 [var f_1]] 0 body ([abstract core_hash_Hasher_Output 0 1 [var f_1]] block 4 let h [var f_1] ([var f_1] call core_default_Default_default 0 1 [var f_1] 0) expr ([unit] call core_hash_Hash_hash 0 2 [var f_1] [var f_0] 2 ([ref r_anon_0 [var f_0]] var value) ([ref_mut r_scope_118519 [var f_1]] addr_of ([var f_1] var h))) let __result [abstract core_hash_Hasher_Output 0 1 [var f_1]] ([abstract core_hash_Hasher_Output 0 1 [var f_1]] call core_hash_Hasher_finish 0 1 [var f_1] 1 ([ref r_scope_118523 [var f_1]] addr_of ([var f_1] var h))) expr ([unit] call drop_glue 0 1 [var f_1] 1 ([ptr_mut [var f_1]] addr_of ([var f_1] var h))) ([abstract core_hash_Hasher_Output 0 1 [var f_1]] var __result)) 
fn core_hash_bool__Hash_hash 0 1 t_0 args 2 self [ref r_anon_0 [bool]] state [ref_mut r_anon_1 [var t_0]] return [unit] 1 core_hash_Hash_hash 0 2 [var t_0] [bool] body ([unit] block 2 expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [uint 8] 2 ([uint 8] cast ([bool] deref ([ref r_anon_0 [bool]] var self)) [uint 8]) ([ref_mut r_anon_1 [var t_0]] var state)) let __result [unit] ([unit] simple_literal _method) ([unit] var __result)) 
fn core_hash__x28_x29__Hash_hash 0 1 t_0 args 2 self [ref r_anon_0 [unit]] _state [ref_mut r_anon_1 [var t_0]] return [unit] 1 core_hash_Hash_hash 0 2 [var t_0] [unit] body ([unit] block 1 let __result [unit] ([unit] simple_literal _method) ([unit] var __result)) 
fn core_hash__x28A_x2c_x29__Hash_hash 0 2 t_0 t_1 args 2 self [ref r_anon_0 [tuple 1 [var t_1]]] state [ref_mut r_anon_1 [var t_0]] return [unit] 1 core_hash_Hash_hash 0 2 [var t_0] [tuple 1 [var t_1]] body ([unit] block 1 let __result_0 [unit] ([unit] match ([tuple 1 [var t_1]] deref ([ref r_anon_0 [tuple 1 [var t_1]]] var self)) 1 ([tuple 1 [var t_1]] tuple 1 ([ref r_scope_119105 [var t_1]] var A)) ([unit] block 2 expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_1] 2 ([ref r_scope_119105 [var t_1]] var A) ([ref_mut r_anon_1 [var t_0]] var state)) let __result [unit] ([unit] simple_literal _Block) ([unit] var __result))) ([unit] var __result_0)) 
fn core_hash__x28A_x2c_x20B_x29__Hash_hash 0 3 t_0 t_1 t_2 args 2 self [ref r_anon_0 [tuple 2 [var t_1] [var t_2]]] state [ref_mut r_anon_1 [var t_0]] return [unit] 1 core_hash_Hash_hash 0 2 [var t_0] [tuple 2 [var t_1] [var t_2]] body ([unit] block 1 let __result_0 [unit] ([unit] match ([tuple 2 [var t_1] [var t_2]] deref ([ref r_anon_0 [tuple 2 [var t_1] [var t_2]]] var self)) 1 ([tuple 2 [var t_1] [var t_2]] tuple 2 ([ref r_scope_119141 [var t_1]] var A) ([ref r_scope_119141 [var t_2]] var B)) ([unit] block 3 expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_1] 2 ([ref r_scope_119141 [var t_1]] var A) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_2] 2 ([ref r_scope_119141 [var t_2]] var B) ([ref_mut r_anon_1 [var t_0]] var state)) let __result [unit] ([unit] simple_literal _Block) ([unit] var __result))) ([unit] var __result_0)) 
fn core_hash__x28A_x2c_x20B_x2c_x20C_x29__Hash_hash 0 4 t_0 t_1 t_2 t_3 args 2 self [ref r_anon_0 [tuple 3 [var t_1] [var t_2] [var t_3]]] state [ref_mut r_anon_1 [var t_0]] return [unit] 1 core_hash_Hash_hash 0 2 [var t_0] [tuple 3 [var t_1] [var t_2] [var t_3]] body ([unit] block 1 let __result_0 [unit] ([unit] match ([tuple 3 [var t_1] [var t_2] [var t_3]] deref ([ref r_anon_0 [tuple 3 [var t_1] [var t_2] [var t_3]]] var self)) 1 ([tuple 3 [var t_1] [var t_2] [var t_3]] tuple 3 ([ref r_scope_119188 [var t_1]] var A) ([ref r_scope_119188 [var t_2]] var B) ([ref r_scope_119188 [var t_3]] var C)) ([unit] block 4 expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_1] 2 ([ref r_scope_119188 [var t_1]] var A) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_2] 2 ([ref r_scope_119188 [var t_2]] var B) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_3] 2 ([ref r_scope_119188 [var t_3]] var C) ([ref_mut r_anon_1 [var t_0]] var state)) let __result [unit] ([unit] simple_literal _Block) ([unit] var __result))) ([unit] var __result_0)) 
fn core_hash__x28A_x2c_x20B_x2c_x20C_x2c_x20D_x29__Hash_hash 0 5 t_0 t_1 t_2 t_3 t_4 args 2 self [ref r_anon_0 [tuple 4 [var t_1] [var t_2] [var t_3] [var t_4]]] state [ref_mut r_anon_1 [var t_0]] return [unit] 1 core_hash_Hash_hash 0 2 [var t_0] [tuple 4 [var t_1] [var t_2] [var t_3] [var t_4]] body ([unit] block 1 let __result_0 [unit] ([unit] match ([tuple 4 [var t_1] [var t_2] [var t_3] [var t_4]] deref ([ref r_anon_0 [tuple 4 [var t_1] [var t_2] [var t_3] [var t_4]]] var self)) 1 ([tuple 4 [var t_1] [var t_2] [var t_3] [var t_4]] tuple 4 ([ref r_scope_119246 [var t_1]] var A) ([ref r_scope_119246 [var t_2]] var B) ([ref r_scope_119246 [var t_3]] var C) ([ref r_scope_119246 [var t_4]] var D)) ([unit] block 5 expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_1] 2 ([ref r_scope_119246 [var t_1]] var A) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_2] 2 ([ref r_scope_119246 [var t_2]] var B) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_3] 2 ([ref r_scope_119246 [var t_3]] var C) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_4] 2 ([ref r_scope_119246 [var t_4]] var D) ([ref_mut r_anon_1 [var t_0]] var state)) let __result [unit] ([unit] simple_literal _Block) ([unit] var __result))) ([unit] var __result_0)) 
fn core_hash__x28A_x2c_x20B_x2c_x20C_x2c_x20D_x2c_x20E_x29__Hash_hash 0 6 t_0 t_1 t_2 t_3 t_4 t_5 args 2 self [ref r_anon_0 [tuple 5 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5]]] state [ref_mut r_anon_1 [var t_0]] return [unit] 1 core_hash_Hash_hash 0 2 [var t_0] [tuple 5 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5]] body ([unit] block 1 let __result_0 [unit] ([unit] match ([tuple 5 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5]] deref ([ref r_anon_0 [tuple 5 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5]]] var self)) 1 ([tuple 5 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5]] tuple 5 ([ref r_scope_119315 [var t_1]] var A) ([ref r_scope_119315 [var t_2]] var B) ([ref r_scope_119315 [var t_3]] var C) ([ref r_scope_119315 [var t_4]] var D) ([ref r_scope_119315 [var t_5]] var E)) ([unit] block 6 expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_1] 2 ([ref r_scope_119315 [var t_1]] var A) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_2] 2 ([ref r_scope_119315 [var t_2]] var B) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_3] 2 ([ref r_scope_119315 [var t_3]] var C) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_4] 2 ([ref r_scope_119315 [var t_4]] var D) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_5] 2 ([ref r_scope_119315 [var t_5]] var E) ([ref_mut r_anon_1 [var t_0]] var state)) let __result [unit] ([unit] simple_literal _Block) ([unit] var __result))) ([unit] var __result_0)) 
fn core_hash__x28A_x2c_x20B_x2c_x20C_x2c_x20D_x2c_x20E_x2c_x20F_x29__Hash_hash 0 7 t_0 t_1 t_2 t_3 t_4 t_5 t_6 args 2 self [ref r_anon_0 [tuple 6 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6]]] state [ref_mut r_anon_1 [var t_0]] return [unit] 1 core_hash_Hash_hash 0 2 [var t_0] [tuple 6 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6]] body ([unit] block 1 let __result_0 [unit] ([unit] match ([tuple 6 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6]] deref ([ref r_anon_0 [tuple 6 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6]]] var self)) 1 ([tuple 6 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6]] tuple 6 ([ref r_scope_119395 [var t_1]] var A) ([ref r_scope_119395 [var t_2]] var B) ([ref r_scope_119395 [var t_3]] var C) ([ref r_scope_119395 [var t_4]] var D) ([ref r_scope_119395 [var t_5]] var E) ([ref r_scope_119395 [var t_6]] var F)) ([unit] block 7 expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_1] 2 ([ref r_scope_119395 [var t_1]] var A) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_2] 2 ([ref r_scope_119395 [var t_2]] var B) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_3] 2 ([ref r_scope_119395 [var t_3]] var C) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_4] 2 ([ref r_scope_119395 [var t_4]] var D) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_5] 2 ([ref r_scope_119395 [var t_5]] var E) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_6] 2 ([ref r_scope_119395 [var t_6]] var F) ([ref_mut r_anon_1 [var t_0]] var state)) let __result [unit] ([unit] simple_literal _Block) ([unit] var __result))) ([unit] var __result_0)) 
fn core_hash__x28A_x2c_x20B_x2c_x20C_x2c_x20D_x2c_x20E_x2c_x20F_x2c_x20G_x29__Hash_hash 0 8 t_0 t_1 t_2 t_3 t_4 t_5 t_6 t_7 args 2 self [ref r_anon_0 [tuple 7 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7]]] state [ref_mut r_anon_1 [var t_0]] return [unit] 1 core_hash_Hash_hash 0 2 [var t_0] [tuple 7 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7]] body ([unit] block 1 let __result_0 [unit] ([unit] match ([tuple 7 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7]] deref ([ref r_anon_0 [tuple 7 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7]]] var self)) 1 ([tuple 7 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7]] tuple 7 ([ref r_scope_119486 [var t_1]] var A) ([ref r_scope_119486 [var t_2]] var B) ([ref r_scope_119486 [var t_3]] var C) ([ref r_scope_119486 [var t_4]] var D) ([ref r_scope_119486 [var t_5]] var E) ([ref r_scope_119486 [var t_6]] var F) ([ref r_scope_119486 [var t_7]] var G)) ([unit] block 8 expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_1] 2 ([ref r_scope_119486 [var t_1]] var A) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_2] 2 ([ref r_scope_119486 [var t_2]] var B) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_3] 2 ([ref r_scope_119486 [var t_3]] var C) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_4] 2 ([ref r_scope_119486 [var t_4]] var D) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_5] 2 ([ref r_scope_119486 [var t_5]] var E) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_6] 2 ([ref r_scope_119486 [var t_6]] var F) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_7] 2 ([ref r_scope_119486 [var t_7]] var G) ([ref_mut r_anon_1 [var t_0]] var state)) let __result [unit] ([unit] simple_literal _Block) ([unit] var __result))) ([unit] var __result_0)) 
fn core_hash__x28A_x2c_x20B_x2c_x20C_x2c_x20D_x2c_x20E_x2c_x20F_x2c_x20G_x2c_x20H_x29__Hash_hash 0 9 t_0 t_1 t_2 t_3 t_4 t_5 t_6 t_7 t_8 args 2 self [ref r_anon_0 [tuple 8 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8]]] state [ref_mut r_anon_1 [var t_0]] return [unit] 1 core_hash_Hash_hash 0 2 [var t_0] [tuple 8 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8]] body ([unit] block 1 let __result_0 [unit] ([unit] match ([tuple 8 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8]] deref ([ref r_anon_0 [tuple 8 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8]]] var self)) 1 ([tuple 8 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8]] tuple 8 ([ref r_scope_119588 [var t_1]] var A) ([ref r_scope_119588 [var t_2]] var B) ([ref r_scope_119588 [var t_3]] var C) ([ref r_scope_119588 [var t_4]] var D) ([ref r_scope_119588 [var t_5]] var E) ([ref r_scope_119588 [var t_6]] var F) ([ref r_scope_119588 [var t_7]] var G) ([ref r_scope_119588 [var t_8]] var H)) ([unit] block 9 expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_1] 2 ([ref r_scope_119588 [var t_1]] var A) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_2] 2 ([ref r_scope_119588 [var t_2]] var B) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_3] 2 ([ref r_scope_119588 [var t_3]] var C) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_4] 2 ([ref r_scope_119588 [var t_4]] var D) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_5] 2 ([ref r_scope_119588 [var t_5]] var E) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_6] 2 ([ref r_scope_119588 [var t_6]] var F) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_7] 2 ([ref r_scope_119588 [var t_7]] var G) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_8] 2 ([ref r_scope_119588 [var t_8]] var H) ([ref_mut r_anon_1 [var t_0]] var state)) let __result [unit] ([unit] simple_literal _Block) ([unit] var __result))) ([unit] var __result_0)) 
fn core_hash__x28A_x2c_x20B_x2c_x20C_x2c_x20D_x2c_x20E_x2c_x20F_x2c_x20G_x2c_x20H_x2c_x20I_x29__Hash_hash 0 10 t_0 t_1 t_2 t_3 t_4 t_5 t_6 t_7 t_8 t_9 args 2 self [ref r_anon_0 [tuple 9 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9]]] state [ref_mut r_anon_1 [var t_0]] return [unit] 1 core_hash_Hash_hash 0 2 [var t_0] [tuple 9 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9]] body ([unit] block 1 let __result_0 [unit] ([unit] match ([tuple 9 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9]] deref ([ref r_anon_0 [tuple 9 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9]]] var self)) 1 ([tuple 9 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9]] tuple 9 ([ref r_scope_119701 [var t_1]] var A) ([ref r_scope_119701 [var t_2]] var B) ([ref r_scope_119701 [var t_3]] var C) ([ref r_scope_119701 [var t_4]] var D) ([ref r_scope_119701 [var t_5]] var E) ([ref r_scope_119701 [var t_6]] var F) ([ref r_scope_119701 [var t_7]] var G) ([ref r_scope_119701 [var t_8]] var H) ([ref r_scope_119701 [var t_9]] var I)) ([unit] block 10 expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_1] 2 ([ref r_scope_119701 [var t_1]] var A) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_2] 2 ([ref r_scope_119701 [var t_2]] var B) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_3] 2 ([ref r_scope_119701 [var t_3]] var C) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_4] 2 ([ref r_scope_119701 [var t_4]] var D) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_5] 2 ([ref r_scope_119701 [var t_5]] var E) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_6] 2 ([ref r_scope_119701 [var t_6]] var F) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_7] 2 ([ref r_scope_119701 [var t_7]] var G) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_8] 2 ([ref r_scope_119701 [var t_8]] var H) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_9] 2 ([ref r_scope_119701 [var t_9]] var I) ([ref_mut r_anon_1 [var t_0]] var state)) let __result [unit] ([unit] simple_literal _Block) ([unit] var __result))) ([unit] var __result_0)) 
fn core_hash__x28A_x2c_x20B_x2c_x20C_x2c_x20D_x2c_x20E_x2c_x20F_x2c_x20G_x2c_x20H_x2c_x20I_x2c_x20J_x29__Hash_hash 0 11 t_0 t_1 t_2 t_3 t_4 t_5 t_6 t_7 t_8 t_9 t_10 args 2 self [ref r_anon_0 [tuple 10 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9] [var t_10]]] state [ref_mut r_anon_1 [var t_0]] return [unit] 1 core_hash_Hash_hash 0 2 [var t_0] [tuple 10 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9] [var t_10]] body ([unit] block 1 let __result_0 [unit] ([unit] match ([tuple 10 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9] [var t_10]] deref ([ref r_anon_0 [tuple 10 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9] [var t_10]]] var self)) 1 ([tuple 10 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9] [var t_10]] tuple 10 ([ref r_scope_119825 [var t_1]] var A) ([ref r_scope_119825 [var t_2]] var B) ([ref r_scope_119825 [var t_3]] var C) ([ref r_scope_119825 [var t_4]] var D) ([ref r_scope_119825 [var t_5]] var E) ([ref r_scope_119825 [var t_6]] var F) ([ref r_scope_119825 [var t_7]] var G) ([ref r_scope_119825 [var t_8]] var H) ([ref r_scope_119825 [var t_9]] var I) ([ref r_scope_119825 [var t_10]] var J)) ([unit] block 11 expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_1] 2 ([ref r_scope_119825 [var t_1]] var A) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_2] 2 ([ref r_scope_119825 [var t_2]] var B) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_3] 2 ([ref r_scope_119825 [var t_3]] var C) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_4] 2 ([ref r_scope_119825 [var t_4]] var D) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_5] 2 ([ref r_scope_119825 [var t_5]] var E) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_6] 2 ([ref r_scope_119825 [var t_6]] var F) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_7] 2 ([ref r_scope_119825 [var t_7]] var G) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_8] 2 ([ref r_scope_119825 [var t_8]] var H) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_9] 2 ([ref r_scope_119825 [var t_9]] var I) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_10] 2 ([ref r_scope_119825 [var t_10]] var J) ([ref_mut r_anon_1 [var t_0]] var state)) let __result [unit] ([unit] simple_literal _Block) ([unit] var __result))) ([unit] var __result_0)) 
fn core_hash__x28A_x2c_x20B_x2c_x20C_x2c_x20D_x2c_x20E_x2c_x20F_x2c_x20G_x2c_x20H_x2c_x20I_x2c_x20J_x2c_x20K_x29__Hash_hash 0 12 t_0 t_1 t_2 t_3 t_4 t_5 t_6 t_7 t_8 t_9 t_10 t_11 args 2 self [ref r_anon_0 [tuple 11 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9] [var t_10] [var t_11]]] state [ref_mut r_anon_1 [var t_0]] return [unit] 1 core_hash_Hash_hash 0 2 [var t_0] [tuple 11 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9] [var t_10] [var t_11]] body ([unit] block 1 let __result_0 [unit] ([unit] match ([tuple 11 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9] [var t_10] [var t_11]] deref ([ref r_anon_0 [tuple 11 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9] [var t_10] [var t_11]]] var self)) 1 ([tuple 11 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9] [var t_10] [var t_11]] tuple 11 ([ref r_scope_119960 [var t_1]] var A) ([ref r_scope_119960 [var t_2]] var B) ([ref r_scope_119960 [var t_3]] var C) ([ref r_scope_119960 [var t_4]] var D) ([ref r_scope_119960 [var t_5]] var E) ([ref r_scope_119960 [var t_6]] var F) ([ref r_scope_119960 [var t_7]] var G) ([ref r_scope_119960 [var t_8]] var H) ([ref r_scope_119960 [var t_9]] var I) ([ref r_scope_119960 [var t_10]] var J) ([ref r_scope_119960 [var t_11]] var K)) ([unit] block 12 expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_1] 2 ([ref r_scope_119960 [var t_1]] var A) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_2] 2 ([ref r_scope_119960 [var t_2]] var B) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_3] 2 ([ref r_scope_119960 [var t_3]] var C) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_4] 2 ([ref r_scope_119960 [var t_4]] var D) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_5] 2 ([ref r_scope_119960 [var t_5]] var E) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_6] 2 ([ref r_scope_119960 [var t_6]] var F) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_7] 2 ([ref r_scope_119960 [var t_7]] var G) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_8] 2 ([ref r_scope_119960 [var t_8]] var H) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_9] 2 ([ref r_scope_119960 [var t_9]] var I) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_10] 2 ([ref r_scope_119960 [var t_10]] var J) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_11] 2 ([ref r_scope_119960 [var t_11]] var K) ([ref_mut r_anon_1 [var t_0]] var state)) let __result [unit] ([unit] simple_literal _Block) ([unit] var __result))) ([unit] var __result_0)) 
fn core_hash__x28A_x2c_x20B_x2c_x20C_x2c_x20D_x2c_x20E_x2c_x20F_x2c_x20G_x2c_x20H_x2c_x20I_x2c_x20J_x2c_x20K_x2c_x20L_x29__Hash_hash 0 13 t_0 t_1 t_2 t_3 t_4 t_5 t_6 t_7 t_8 t_9 t_10 t_11 t_12 args 2 self [ref r_anon_0 [tuple 12 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9] [var t_10] [var t_11] [var t_12]]] state [ref_mut r_anon_1 [var t_0]] return [unit] 1 core_hash_Hash_hash 0 2 [var t_0] [tuple 12 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9] [var t_10] [var t_11] [var t_12]] body ([unit] block 1 let __result_0 [unit] ([unit] match ([tuple 12 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9] [var t_10] [var t_11] [var t_12]] deref ([ref r_anon_0 [tuple 12 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9] [var t_10] [var t_11] [var t_12]]] var self)) 1 ([tuple 12 [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9] [var t_10] [var t_11] [var t_12]] tuple 12 ([ref r_scope_120106 [var t_1]] var A) ([ref r_scope_120106 [var t_2]] var B) ([ref r_scope_120106 [var t_3]] var C) ([ref r_scope_120106 [var t_4]] var D) ([ref r_scope_120106 [var t_5]] var E) ([ref r_scope_120106 [var t_6]] var F) ([ref r_scope_120106 [var t_7]] var G) ([ref r_scope_120106 [var t_8]] var H) ([ref r_scope_120106 [var t_9]] var I) ([ref r_scope_120106 [var t_10]] var J) ([ref r_scope_120106 [var t_11]] var K) ([ref r_scope_120106 [var t_12]] var L)) ([unit] block 13 expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_1] 2 ([ref r_scope_120106 [var t_1]] var A) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_2] 2 ([ref r_scope_120106 [var t_2]] var B) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_3] 2 ([ref r_scope_120106 [var t_3]] var C) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_4] 2 ([ref r_scope_120106 [var t_4]] var D) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_5] 2 ([ref r_scope_120106 [var t_5]] var E) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_6] 2 ([ref r_scope_120106 [var t_6]] var F) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_7] 2 ([ref r_scope_120106 [var t_7]] var G) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_8] 2 ([ref r_scope_120106 [var t_8]] var H) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_9] 2 ([ref r_scope_120106 [var t_9]] var I) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_10] 2 ([ref r_scope_120106 [var t_10]] var J) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_11] 2 ([ref r_scope_120106 [var t_11]] var K) ([ref_mut r_anon_1 [var t_0]] var state)) expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_12] 2 ([ref r_scope_120106 [var t_12]] var L) ([ref_mut r_anon_1 [var t_0]] var state)) let __result [unit] ([unit] simple_literal _Block) ([unit] var __result))) ([unit] var __result_0)) 
fn core_hash__x26_x27a_x20T__Hash_hash 1 r_named_0_120320 2 t_0 t_1 args 2 self [ref r_anon_0 [ref r_named_0_120320 [var t_1]]] state [ref_mut r_anon_1 [var t_0]] return [unit] 1 core_hash_Hash_hash 0 2 [var t_0] [ref r_named_0_120320 [var t_1]] body ([unit] block 2 expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_1] 2 ([ref r_named_0_120320 [var t_1]] deref ([ref r_anon_0 [ref r_named_0_120320 [var t_1]]] var self)) ([ref_mut r_anon_1 [var t_0]] var state)) let __result [unit] ([unit] simple_literal _method) ([unit] var __result)) 
fn core_hash__x26_x27a_x20mut_x20T__Hash_hash 1 r_named_0_120355 2 t_0 t_1 args 2 self [ref r_anon_0 [ref_mut r_named_0_120355 [var t_1]]] state [ref_mut r_anon_1 [var t_0]] return [unit] 1 core_hash_Hash_hash 0 2 [var t_0] [ref_mut r_named_0_120355 [var t_1]] body ([unit] block 2 expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [var t_1] 2 ([ref_mut r_named_0_120355 [var t_1]] deref ([ref r_anon_0 [ref_mut r_named_0_120355 [var t_1]]] var self)) ([ref_mut r_anon_1 [var t_0]] var state)) let __result [unit] ([unit] simple_literal _method) ([unit] var __result)) 
fn core_hash__x2aconst_x20T__Hash_hash 0 2 t_0 t_1 args 2 self [ref r_anon_0 [ptr [var t_1]]] state [ref_mut r_anon_1 [var t_0]] return [unit] 1 core_hash_Hash_hash 0 2 [var t_0] [ptr [var t_1]] body ([unit] block 2 expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [uint 32] 2 ([uint 32] cast ([ptr [var t_1]] deref ([ref r_anon_0 [ptr [var t_1]]] var self)) [uint 32]) ([ref_mut r_anon_1 [var t_0]] var state)) let __result [unit] ([unit] simple_literal _method) ([unit] var __result)) 
fn core_hash__x2amut_x20T__Hash_hash 0 2 t_0 t_1 args 2 self [ref r_anon_0 [ptr_mut [var t_1]]] state [ref_mut r_anon_1 [var t_0]] return [unit] 1 core_hash_Hash_hash 0 2 [var t_0] [ptr_mut [var t_1]] body ([unit] block 2 expr ([unit] call core_hash_Hash_hash 0 2 [var t_0] [uint 32] 2 ([uint 32] cast ([ptr_mut [var t_1]] deref ([ref r_anon_0 [ptr_mut [var t_1]]] var self)) [uint 32]) ([ref_mut r_anon_1 [var t_0]] var state)) let __result [unit] ([unit] simple_literal _method) ([unit] var __result)) 
fn core_hash_Cow__Hash_hash 1 r_named_0_120452 3 t_0 t_1 t_2 args 2 self [ref r_anon_0 [adt core_borrow_Cow 1 r_named_0_120452 2 [var t_0] [var t_1]]] state [ref_mut r_anon_1 [var t_2]] return [unit] 1 core_hash_Hash_hash 0 2 [var t_2] [adt core_borrow_Cow 1 r_named_0_120452 2 [var t_0] [var t_1]] body ([unit] block 1 let __result_0 [unit] ([unit] block 3 let lifttemp_8 [var t_1] ([var t_1] call core_ops_Deref_deref 0 1 [adt core_borrow_Cow 1 r_named_0_120452 2 [var t_0] [var t_1]] 1 ([ref r_anon_0 [adt core_borrow_Cow 1 r_named_0_120452 2 [var t_0] [var t_1]]] var self)) let __result [unit] ([unit] call core_hash_Hash_hash 0 2 [var t_2] [var t_1] 2 ([ref r_scope_120437 [var t_1]] addr_of ([var t_1] var lifttemp_8)) ([ref_mut r_anon_1 [var t_2]] var state)) expr ([unit] call drop_glue 0 1 [var t_1] 1 ([ptr_mut [var t_1]] addr_of ([var t_1] var lifttemp_8))) ([unit] var __result)) ([unit] var __result_0)) 
struct core_fmt_num_Binary 0 0 0 0 
struct core_fmt_num_Octal 0 0 0 0 
struct core_fmt_num_Decimal 0 0 0 0 
struct core_fmt_num_LowerHex 0 0 0 0 
struct core_fmt_num_UpperHex 0 0 0 0 
fn core_fmt_num_Binary__GenericRadix_base 0 0 args 1 self [ref r_anon_0 [adt core_fmt_num_Binary 0 0]] return [uint 8] 1 core_fmt_num_GenericRadix_base 0 1 [adt core_fmt_num_Binary 0 0] body ([uint 8] block 1 let __result [uint 8] ([uint 8] simple_literal 2) ([uint 8] var __result)) 
fn core_fmt_num_Octal__GenericRadix_base 0 0 args 1 self [ref r_anon_0 [adt core_fmt_num_Octal 0 0]] return [uint 8] 1 core_fmt_num_GenericRadix_base 0 1 [adt core_fmt_num_Octal 0 0] body ([uint 8] block 1 let __result [uint 8] ([uint 8] simple_literal 8) ([uint 8] var __result)) 
fn core_fmt_num_Decimal__GenericRadix_base 0 0 args 1 self [ref r_anon_0 [adt core_fmt_num_Decimal 0 0]] return [uint 8] 1 core_fmt_num_GenericRadix_base 0 1 [adt core_fmt_num_Decimal 0 0] body ([uint 8] block 1 let __result [uint 8] ([uint 8] simple_literal 10) ([uint 8] var __result)) 
fn core_fmt_num_LowerHex__GenericRadix_base 0 0 args 1 self [ref r_anon_0 [adt core_fmt_num_LowerHex 0 0]] return [uint 8] 1 core_fmt_num_GenericRadix_base 0 1 [adt core_fmt_num_LowerHex 0 0] body ([uint 8] block 1 let __result [uint 8] ([uint 8] simple_literal 16) ([uint 8] var __result)) 
fn core_fmt_num_UpperHex__GenericRadix_base 0 0 args 1 self [ref r_anon_0 [adt core_fmt_num_UpperHex 0 0]] return [uint 8] 1 core_fmt_num_GenericRadix_base 0 1 [adt core_fmt_num_UpperHex 0 0] body ([uint 8] block 1 let __result [uint 8] ([uint 8] simple_literal 16) ([uint 8] var __result)) 
struct core_fmt_num_Radix 0 0 1 base [uint 8] 0 
fn core_fmt_num_Radix__GenericRadix_base 0 0 args 1 self [ref r_anon_0 [adt core_fmt_num_Radix 0 0]] return [uint 8] 1 core_fmt_num_GenericRadix_base 0 1 [adt core_fmt_num_Radix 0 0] body ([uint 8] block 1 let __result [uint 8] ([uint 8] field ([adt core_fmt_num_Radix 0 0] deref ([ref r_anon_0 [adt core_fmt_num_Radix 0 0]] var self)) base) ([uint 8] var __result)) 
enum core_fmt_float_ExponentFormat 0 0 2 core_fmt_float_ExpNone 0 core_fmt_float_ExpDec 0 0 
enum core_fmt_float_SignificantDigits 0 0 2 core_fmt_float_DigMax 1 [uint 32] core_fmt_float_DigExact 1 [uint 32] 0 
enum core_fmt_float_SignFormat 0 0 1 core_fmt_float_SignNeg 0 0 
enum core_fmt_rt_Alignment 0 0 4 core_fmt_rt_AlignLeft 0 core_fmt_rt_AlignRight 0 core_fmt_rt_AlignCenter 0 core_fmt_rt_AlignUnknown 0 0 
enum core_fmt_rt_Count 0 0 4 core_fmt_rt_CountIs 1 [uint 32] core_fmt_rt_CountIsParam 1 [uint 32] core_fmt_rt_CountIsNextParam 0 core_fmt_rt_CountImplied 0 0 
enum core_fmt_rt_Position 0 0 2 core_fmt_rt_ArgumentNext 0 core_fmt_rt_ArgumentIs 1 [uint 32] 0 
enum core_fmt_rt_Flag 0 0 4 core_fmt_rt_FlagSignPlus 0 core_fmt_rt_FlagSignMinus 0 core_fmt_rt_FlagAlternate 0 core_fmt_rt_FlagSignAwareZeroPad 0 0 
struct core_fmt_Error 0 0 0 0 
enum core_fmt_Void 0 0 0 0 
fn core_error_E__FromError_from_error 0 1 t_0 args 1 err [var t_0] return [var t_0] 1 core_error_FromError_from_error 0 2 [var t_0] [var t_0] body ([var t_0] block 1 let __result [var t_0] ([var t_0] var err) ([var t_0] var __result)) 
fn core_tuple__x28A_x2c_x29__Default_default 0 1 t_0 args 0 return [tuple 1 [var t_0]] 1 core_default_Default_default 0 1 [tuple 1 [var t_0]] body ([tuple 1 [var t_0]] block 1 let __result_0 [tuple 1 [var t_0]] ([tuple 1 [var t_0]] tuple_literal 1 ([var t_0] block 2 let x [var t_0] ([var t_0] call core_default_Default_default 0 1 [var t_0] 0) let __result [var t_0] ([var t_0] var x) ([var t_0] var __result))) ([tuple 1 [var t_0]] var __result_0)) 
fn core_tuple__x28A_x2c_x20B_x29__Default_default 0 2 t_0 t_1 args 0 return [tuple 2 [var t_0] [var t_1]] 1 core_default_Default_default 0 1 [tuple 2 [var t_0] [var t_1]] body ([tuple 2 [var t_0] [var t_1]] block 1 let __result_1 [tuple 2 [var t_0] [var t_1]] ([tuple 2 [var t_0] [var t_1]] tuple_literal 2 ([var t_0] block 2 let x [var t_0] ([var t_0] call core_default_Default_default 0 1 [var t_0] 0) let __result [var t_0] ([var t_0] var x) ([var t_0] var __result)) ([var t_1] block 2 let x_0 [var t_1] ([var t_1] call core_default_Default_default 0 1 [var t_1] 0) let __result_0 [var t_1] ([var t_1] var x_0) ([var t_1] var __result_0))) ([tuple 2 [var t_0] [var t_1]] var __result_1)) 
fn core_tuple__x28A_x2c_x20B_x2c_x20C_x29__Default_default 0 3 t_0 t_1 t_2 args 0 return [tuple 3 [var t_0] [var t_1] [var t_2]] 1 core_default_Default_default 0 1 [tuple 3 [var t_0] [var t_1] [var t_2]] body ([tuple 3 [var t_0] [var t_1] [var t_2]] block 1 let __result_2 [tuple 3 [var t_0] [var t_1] [var t_2]] ([tuple 3 [var t_0] [var t_1] [var t_2]] tuple_literal 3 ([var t_0] block 2 let x [var t_0] ([var t_0] call core_default_Default_default 0 1 [var t_0] 0) let __result [var t_0] ([var t_0] var x) ([var t_0] var __result)) ([var t_1] block 2 let x_0 [var t_1] ([var t_1] call core_default_Default_default 0 1 [var t_1] 0) let __result_0 [var t_1] ([var t_1] var x_0) ([var t_1] var __result_0)) ([var t_2] block 2 let x_1 [var t_2] ([var t_2] call core_default_Default_default 0 1 [var t_2] 0) let __result_1 [var t_2] ([var t_2] var x_1) ([var t_2] var __result_1))) ([tuple 3 [var t_0] [var t_1] [var t_2]] var __result_2)) 
fn core_tuple__x28A_x2c_x20B_x2c_x20C_x2c_x20D_x29__Default_default 0 4 t_0 t_1 t_2 t_3 args 0 return [tuple 4 [var t_0] [var t_1] [var t_2] [var t_3]] 1 core_default_Default_default 0 1 [tuple 4 [var t_0] [var t_1] [var t_2] [var t_3]] body ([tuple 4 [var t_0] [var t_1] [var t_2] [var t_3]] block 1 let __result_3 [tuple 4 [var t_0] [var t_1] [var t_2] [var t_3]] ([tuple 4 [var t_0] [var t_1] [var t_2] [var t_3]] tuple_literal 4 ([var t_0] block 2 let x [var t_0] ([var t_0] call core_default_Default_default 0 1 [var t_0] 0) let __result [var t_0] ([var t_0] var x) ([var t_0] var __result)) ([var t_1] block 2 let x_0 [var t_1] ([var t_1] call core_default_Default_default 0 1 [var t_1] 0) let __result_0 [var t_1] ([var t_1] var x_0) ([var t_1] var __result_0)) ([var t_2] block 2 let x_1 [var t_2] ([var t_2] call core_default_Default_default 0 1 [var t_2] 0) let __result_1 [var t_2] ([var t_2] var x_1) ([var t_2] var __result_1)) ([var t_3] block 2 let x_2 [var t_3] ([var t_3] call core_default_Default_default 0 1 [var t_3] 0) let __result_2 [var t_3] ([var t_3] var x_2) ([var t_3] var __result_2))) ([tuple 4 [var t_0] [var t_1] [var t_2] [var t_3]] var __result_3)) 
fn core_tuple__x28A_x2c_x20B_x2c_x20C_x2c_x20D_x2c_x20E_x29__Default_default 0 5 t_0 t_1 t_2 t_3 t_4 args 0 return [tuple 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]] 1 core_default_Default_default 0 1 [tuple 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]] body ([tuple 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]] block 1 let __result_4 [tuple 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]] ([tuple 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]] tuple_literal 5 ([var t_0] block 2 let x [var t_0] ([var t_0] call core_default_Default_default 0 1 [var t_0] 0) let __result [var t_0] ([var t_0] var x) ([var t_0] var __result)) ([var t_1] block 2 let x_0 [var t_1] ([var t_1] call core_default_Default_default 0 1 [var t_1] 0) let __result_0 [var t_1] ([var t_1] var x_0) ([var t_1] var __result_0)) ([var t_2] block 2 let x_1 [var t_2] ([var t_2] call core_default_Default_default 0 1 [var t_2] 0) let __result_1 [var t_2] ([var t_2] var x_1) ([var t_2] var __result_1)) ([var t_3] block 2 let x_2 [var t_3] ([var t_3] call core_default_Default_default 0 1 [var t_3] 0) let __result_2 [var t_3] ([var t_3] var x_2) ([var t_3] var __result_2)) ([var t_4] block 2 let x_3 [var t_4] ([var t_4] call core_default_Default_default 0 1 [var t_4] 0) let __result_3 [var t_4] ([var t_4] var x_3) ([var t_4] var __result_3))) ([tuple 5 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4]] var __result_4)) 
fn core_tuple__x28A_x2c_x20B_x2c_x20C_x2c_x20D_x2c_x20E_x2c_x20F_x29__Default_default 0 6 t_0 t_1 t_2 t_3 t_4 t_5 args 0 return [tuple 6 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5]] 1 core_default_Default_default 0 1 [tuple 6 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5]] body ([tuple 6 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5]] block 1 let __result_5 [tuple 6 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5]] ([tuple 6 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5]] tuple_literal 6 ([var t_0] block 2 let x [var t_0] ([var t_0] call core_default_Default_default 0 1 [var t_0] 0) let __result [var t_0] ([var t_0] var x) ([var t_0] var __result)) ([var t_1] block 2 let x_0 [var t_1] ([var t_1] call core_default_Default_default 0 1 [var t_1] 0) let __result_0 [var t_1] ([var t_1] var x_0) ([var t_1] var __result_0)) ([var t_2] block 2 let x_1 [var t_2] ([var t_2] call core_default_Default_default 0 1 [var t_2] 0) let __result_1 [var t_2] ([var t_2] var x_1) ([var t_2] var __result_1)) ([var t_3] block 2 let x_2 [var t_3] ([var t_3] call core_default_Default_default 0 1 [var t_3] 0) let __result_2 [var t_3] ([var t_3] var x_2) ([var t_3] var __result_2)) ([var t_4] block 2 let x_3 [var t_4] ([var t_4] call core_default_Default_default 0 1 [var t_4] 0) let __result_3 [var t_4] ([var t_4] var x_3) ([var t_4] var __result_3)) ([var t_5] block 2 let x_4 [var t_5] ([var t_5] call core_default_Default_default 0 1 [var t_5] 0) let __result_4 [var t_5] ([var t_5] var x_4) ([var t_5] var __result_4))) ([tuple 6 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5]] var __result_5)) 
fn core_tuple__x28A_x2c_x20B_x2c_x20C_x2c_x20D_x2c_x20E_x2c_x20F_x2c_x20G_x29__Default_default 0 7 t_0 t_1 t_2 t_3 t_4 t_5 t_6 args 0 return [tuple 7 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6]] 1 core_default_Default_default 0 1 [tuple 7 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6]] body ([tuple 7 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6]] block 1 let __result_6 [tuple 7 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6]] ([tuple 7 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6]] tuple_literal 7 ([var t_0] block 2 let x [var t_0] ([var t_0] call core_default_Default_default 0 1 [var t_0] 0) let __result [var t_0] ([var t_0] var x) ([var t_0] var __result)) ([var t_1] block 2 let x_0 [var t_1] ([var t_1] call core_default_Default_default 0 1 [var t_1] 0) let __result_0 [var t_1] ([var t_1] var x_0) ([var t_1] var __result_0)) ([var t_2] block 2 let x_1 [var t_2] ([var t_2] call core_default_Default_default 0 1 [var t_2] 0) let __result_1 [var t_2] ([var t_2] var x_1) ([var t_2] var __result_1)) ([var t_3] block 2 let x_2 [var t_3] ([var t_3] call core_default_Default_default 0 1 [var t_3] 0) let __result_2 [var t_3] ([var t_3] var x_2) ([var t_3] var __result_2)) ([var t_4] block 2 let x_3 [var t_4] ([var t_4] call core_default_Default_default 0 1 [var t_4] 0) let __result_3 [var t_4] ([var t_4] var x_3) ([var t_4] var __result_3)) ([var t_5] block 2 let x_4 [var t_5] ([var t_5] call core_default_Default_default 0 1 [var t_5] 0) let __result_4 [var t_5] ([var t_5] var x_4) ([var t_5] var __result_4)) ([var t_6] block 2 let x_5 [var t_6] ([var t_6] call core_default_Default_default 0 1 [var t_6] 0) let __result_5 [var t_6] ([var t_6] var x_5) ([var t_6] var __result_5))) ([tuple 7 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6]] var __result_6)) 
fn core_tuple__x28A_x2c_x20B_x2c_x20C_x2c_x20D_x2c_x20E_x2c_x20F_x2c_x20G_x2c_x20H_x29__Default_default 0 8 t_0 t_1 t_2 t_3 t_4 t_5 t_6 t_7 args 0 return [tuple 8 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7]] 1 core_default_Default_default 0 1 [tuple 8 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7]] body ([tuple 8 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7]] block 1 let __result_7 [tuple 8 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7]] ([tuple 8 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7]] tuple_literal 8 ([var t_0] block 2 let x [var t_0] ([var t_0] call core_default_Default_default 0 1 [var t_0] 0) let __result [var t_0] ([var t_0] var x) ([var t_0] var __result)) ([var t_1] block 2 let x_0 [var t_1] ([var t_1] call core_default_Default_default 0 1 [var t_1] 0) let __result_0 [var t_1] ([var t_1] var x_0) ([var t_1] var __result_0)) ([var t_2] block 2 let x_1 [var t_2] ([var t_2] call core_default_Default_default 0 1 [var t_2] 0) let __result_1 [var t_2] ([var t_2] var x_1) ([var t_2] var __result_1)) ([var t_3] block 2 let x_2 [var t_3] ([var t_3] call core_default_Default_default 0 1 [var t_3] 0) let __result_2 [var t_3] ([var t_3] var x_2) ([var t_3] var __result_2)) ([var t_4] block 2 let x_3 [var t_4] ([var t_4] call core_default_Default_default 0 1 [var t_4] 0) let __result_3 [var t_4] ([var t_4] var x_3) ([var t_4] var __result_3)) ([var t_5] block 2 let x_4 [var t_5] ([var t_5] call core_default_Default_default 0 1 [var t_5] 0) let __result_4 [var t_5] ([var t_5] var x_4) ([var t_5] var __result_4)) ([var t_6] block 2 let x_5 [var t_6] ([var t_6] call core_default_Default_default 0 1 [var t_6] 0) let __result_5 [var t_6] ([var t_6] var x_5) ([var t_6] var __result_5)) ([var t_7] block 2 let x_6 [var t_7] ([var t_7] call core_default_Default_default 0 1 [var t_7] 0) let __result_6 [var t_7] ([var t_7] var x_6) ([var t_7] var __result_6))) ([tuple 8 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7]] var __result_7)) 
fn core_tuple__x28A_x2c_x20B_x2c_x20C_x2c_x20D_x2c_x20E_x2c_x20F_x2c_x20G_x2c_x20H_x2c_x20I_x29__Default_default 0 9 t_0 t_1 t_2 t_3 t_4 t_5 t_6 t_7 t_8 args 0 return [tuple 9 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8]] 1 core_default_Default_default 0 1 [tuple 9 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8]] body ([tuple 9 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8]] block 1 let __result_8 [tuple 9 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8]] ([tuple 9 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8]] tuple_literal 9 ([var t_0] block 2 let x [var t_0] ([var t_0] call core_default_Default_default 0 1 [var t_0] 0) let __result [var t_0] ([var t_0] var x) ([var t_0] var __result)) ([var t_1] block 2 let x_0 [var t_1] ([var t_1] call core_default_Default_default 0 1 [var t_1] 0) let __result_0 [var t_1] ([var t_1] var x_0) ([var t_1] var __result_0)) ([var t_2] block 2 let x_1 [var t_2] ([var t_2] call core_default_Default_default 0 1 [var t_2] 0) let __result_1 [var t_2] ([var t_2] var x_1) ([var t_2] var __result_1)) ([var t_3] block 2 let x_2 [var t_3] ([var t_3] call core_default_Default_default 0 1 [var t_3] 0) let __result_2 [var t_3] ([var t_3] var x_2) ([var t_3] var __result_2)) ([var t_4] block 2 let x_3 [var t_4] ([var t_4] call core_default_Default_default 0 1 [var t_4] 0) let __result_3 [var t_4] ([var t_4] var x_3) ([var t_4] var __result_3)) ([var t_5] block 2 let x_4 [var t_5] ([var t_5] call core_default_Default_default 0 1 [var t_5] 0) let __result_4 [var t_5] ([var t_5] var x_4) ([var t_5] var __result_4)) ([var t_6] block 2 let x_5 [var t_6] ([var t_6] call core_default_Default_default 0 1 [var t_6] 0) let __result_5 [var t_6] ([var t_6] var x_5) ([var t_6] var __result_5)) ([var t_7] block 2 let x_6 [var t_7] ([var t_7] call core_default_Default_default 0 1 [var t_7] 0) let __result_6 [var t_7] ([var t_7] var x_6) ([var t_7] var __result_6)) ([var t_8] block 2 let x_7 [var t_8] ([var t_8] call core_default_Default_default 0 1 [var t_8] 0) let __result_7 [var t_8] ([var t_8] var x_7) ([var t_8] var __result_7))) ([tuple 9 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8]] var __result_8)) 
fn core_tuple__x28A_x2c_x20B_x2c_x20C_x2c_x20D_x2c_x20E_x2c_x20F_x2c_x20G_x2c_x20H_x2c_x20I_x2c_x20J_x29__Default_default 0 10 t_0 t_1 t_2 t_3 t_4 t_5 t_6 t_7 t_8 t_9 args 0 return [tuple 10 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9]] 1 core_default_Default_default 0 1 [tuple 10 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9]] body ([tuple 10 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9]] block 1 let __result_9 [tuple 10 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9]] ([tuple 10 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9]] tuple_literal 10 ([var t_0] block 2 let x [var t_0] ([var t_0] call core_default_Default_default 0 1 [var t_0] 0) let __result [var t_0] ([var t_0] var x) ([var t_0] var __result)) ([var t_1] block 2 let x_0 [var t_1] ([var t_1] call core_default_Default_default 0 1 [var t_1] 0) let __result_0 [var t_1] ([var t_1] var x_0) ([var t_1] var __result_0)) ([var t_2] block 2 let x_1 [var t_2] ([var t_2] call core_default_Default_default 0 1 [var t_2] 0) let __result_1 [var t_2] ([var t_2] var x_1) ([var t_2] var __result_1)) ([var t_3] block 2 let x_2 [var t_3] ([var t_3] call core_default_Default_default 0 1 [var t_3] 0) let __result_2 [var t_3] ([var t_3] var x_2) ([var t_3] var __result_2)) ([var t_4] block 2 let x_3 [var t_4] ([var t_4] call core_default_Default_default 0 1 [var t_4] 0) let __result_3 [var t_4] ([var t_4] var x_3) ([var t_4] var __result_3)) ([var t_5] block 2 let x_4 [var t_5] ([var t_5] call core_default_Default_default 0 1 [var t_5] 0) let __result_4 [var t_5] ([var t_5] var x_4) ([var t_5] var __result_4)) ([var t_6] block 2 let x_5 [var t_6] ([var t_6] call core_default_Default_default 0 1 [var t_6] 0) let __result_5 [var t_6] ([var t_6] var x_5) ([var t_6] var __result_5)) ([var t_7] block 2 let x_6 [var t_7] ([var t_7] call core_default_Default_default 0 1 [var t_7] 0) let __result_6 [var t_7] ([var t_7] var x_6) ([var t_7] var __result_6)) ([var t_8] block 2 let x_7 [var t_8] ([var t_8] call core_default_Default_default 0 1 [var t_8] 0) let __result_7 [var t_8] ([var t_8] var x_7) ([var t_8] var __result_7)) ([var t_9] block 2 let x_8 [var t_9] ([var t_9] call core_default_Default_default 0 1 [var t_9] 0) let __result_8 [var t_9] ([var t_9] var x_8) ([var t_9] var __result_8))) ([tuple 10 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9]] var __result_9)) 
fn core_tuple__x28A_x2c_x20B_x2c_x20C_x2c_x20D_x2c_x20E_x2c_x20F_x2c_x20G_x2c_x20H_x2c_x20I_x2c_x20J_x2c_x20K_x29__Default_default 0 11 t_0 t_1 t_2 t_3 t_4 t_5 t_6 t_7 t_8 t_9 t_10 args 0 return [tuple 11 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9] [var t_10]] 1 core_default_Default_default 0 1 [tuple 11 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9] [var t_10]] body ([tuple 11 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9] [var t_10]] block 1 let __result_10 [tuple 11 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9] [var t_10]] ([tuple 11 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9] [var t_10]] tuple_literal 11 ([var t_0] block 2 let x [var t_0] ([var t_0] call core_default_Default_default 0 1 [var t_0] 0) let __result [var t_0] ([var t_0] var x) ([var t_0] var __result)) ([var t_1] block 2 let x_0 [var t_1] ([var t_1] call core_default_Default_default 0 1 [var t_1] 0) let __result_0 [var t_1] ([var t_1] var x_0) ([var t_1] var __result_0)) ([var t_2] block 2 let x_1 [var t_2] ([var t_2] call core_default_Default_default 0 1 [var t_2] 0) let __result_1 [var t_2] ([var t_2] var x_1) ([var t_2] var __result_1)) ([var t_3] block 2 let x_2 [var t_3] ([var t_3] call core_default_Default_default 0 1 [var t_3] 0) let __result_2 [var t_3] ([var t_3] var x_2) ([var t_3] var __result_2)) ([var t_4] block 2 let x_3 [var t_4] ([var t_4] call core_default_Default_default 0 1 [var t_4] 0) let __result_3 [var t_4] ([var t_4] var x_3) ([var t_4] var __result_3)) ([var t_5] block 2 let x_4 [var t_5] ([var t_5] call core_default_Default_default 0 1 [var t_5] 0) let __result_4 [var t_5] ([var t_5] var x_4) ([var t_5] var __result_4)) ([var t_6] block 2 let x_5 [var t_6] ([var t_6] call core_default_Default_default 0 1 [var t_6] 0) let __result_5 [var t_6] ([var t_6] var x_5) ([var t_6] var __result_5)) ([var t_7] block 2 let x_6 [var t_7] ([var t_7] call core_default_Default_default 0 1 [var t_7] 0) let __result_6 [var t_7] ([var t_7] var x_6) ([var t_7] var __result_6)) ([var t_8] block 2 let x_7 [var t_8] ([var t_8] call core_default_Default_default 0 1 [var t_8] 0) let __result_7 [var t_8] ([var t_8] var x_7) ([var t_8] var __result_7)) ([var t_9] block 2 let x_8 [var t_9] ([var t_9] call core_default_Default_default 0 1 [var t_9] 0) let __result_8 [var t_9] ([var t_9] var x_8) ([var t_9] var __result_8)) ([var t_10] block 2 let x_9 [var t_10] ([var t_10] call core_default_Default_default 0 1 [var t_10] 0) let __result_9 [var t_10] ([var t_10] var x_9) ([var t_10] var __result_9))) ([tuple 11 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9] [var t_10]] var __result_10)) 
fn core_tuple__x28A_x2c_x20B_x2c_x20C_x2c_x20D_x2c_x20E_x2c_x20F_x2c_x20G_x2c_x20H_x2c_x20I_x2c_x20J_x2c_x20K_x2c_x20L_x29__Default_default 0 12 t_0 t_1 t_2 t_3 t_4 t_5 t_6 t_7 t_8 t_9 t_10 t_11 args 0 return [tuple 12 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9] [var t_10] [var t_11]] 1 core_default_Default_default 0 1 [tuple 12 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9] [var t_10] [var t_11]] body ([tuple 12 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9] [var t_10] [var t_11]] block 1 let __result_11 [tuple 12 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9] [var t_10] [var t_11]] ([tuple 12 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9] [var t_10] [var t_11]] tuple_literal 12 ([var t_0] block 2 let x [var t_0] ([var t_0] call core_default_Default_default 0 1 [var t_0] 0) let __result [var t_0] ([var t_0] var x) ([var t_0] var __result)) ([var t_1] block 2 let x_0 [var t_1] ([var t_1] call core_default_Default_default 0 1 [var t_1] 0) let __result_0 [var t_1] ([var t_1] var x_0) ([var t_1] var __result_0)) ([var t_2] block 2 let x_1 [var t_2] ([var t_2] call core_default_Default_default 0 1 [var t_2] 0) let __result_1 [var t_2] ([var t_2] var x_1) ([var t_2] var __result_1)) ([var t_3] block 2 let x_2 [var t_3] ([var t_3] call core_default_Default_default 0 1 [var t_3] 0) let __result_2 [var t_3] ([var t_3] var x_2) ([var t_3] var __result_2)) ([var t_4] block 2 let x_3 [var t_4] ([var t_4] call core_default_Default_default 0 1 [var t_4] 0) let __result_3 [var t_4] ([var t_4] var x_3) ([var t_4] var __result_3)) ([var t_5] block 2 let x_4 [var t_5] ([var t_5] call core_default_Default_default 0 1 [var t_5] 0) let __result_4 [var t_5] ([var t_5] var x_4) ([var t_5] var __result_4)) ([var t_6] block 2 let x_5 [var t_6] ([var t_6] call core_default_Default_default 0 1 [var t_6] 0) let __result_5 [var t_6] ([var t_6] var x_5) ([var t_6] var __result_5)) ([var t_7] block 2 let x_6 [var t_7] ([var t_7] call core_default_Default_default 0 1 [var t_7] 0) let __result_6 [var t_7] ([var t_7] var x_6) ([var t_7] var __result_6)) ([var t_8] block 2 let x_7 [var t_8] ([var t_8] call core_default_Default_default 0 1 [var t_8] 0) let __result_7 [var t_8] ([var t_8] var x_7) ([var t_8] var __result_7)) ([var t_9] block 2 let x_8 [var t_9] ([var t_9] call core_default_Default_default 0 1 [var t_9] 0) let __result_8 [var t_9] ([var t_9] var x_8) ([var t_9] var __result_8)) ([var t_10] block 2 let x_9 [var t_10] ([var t_10] call core_default_Default_default 0 1 [var t_10] 0) let __result_9 [var t_10] ([var t_10] var x_9) ([var t_10] var __result_9)) ([var t_11] block 2 let x_10 [var t_11] ([var t_11] call core_default_Default_default 0 1 [var t_11] 0) let __result_10 [var t_11] ([var t_11] var x_10) ([var t_11] var __result_10))) ([tuple 12 [var t_0] [var t_1] [var t_2] [var t_3] [var t_4] [var t_5] [var t_6] [var t_7] [var t_8] [var t_9] [var t_10] [var t_11]] var __result_11)) 
abstract_fn core_borrow_BorrowFrom_borrow_from 0 2 t_0 s_0 args 1 arg0 [ref r_anon_0 [var t_0]] return [ref r_anon_0 [var s_0]] 
abstract_fn core_borrow_ToOwned_to_owned 0 2 t_0 s_0 args 1 arg0 [ref r_anon_0 [var s_0]] return [var t_0] 
abstract_fn core_char_CharExt_to_digit 0 1 s_0 args 2 arg0 [var s_0] arg1 [uint 32] return [adt core_option_Option 0 1 [uint 32]] 
abstract_fn core_clone_Clone_clone 0 1 s_0 args 1 arg0 [ref r_anon_0 [var s_0]] return [var s_0] 
abstract_fn core_cmp_Ord_cmp 0 1 s_0 args 2 arg0 [ref r_anon_0 [var s_0]] arg1 [ref r_anon_1 [var s_0]] return [adt core_cmp_Ordering 0 0] 
abstract_fn core_cmp_PartialEq_eq 0 2 t_0 s_0 args 2 arg0 [ref r_anon_0 [var s_0]] arg1 [ref r_anon_1 [var t_0]] return [bool] 
abstract_fn core_cmp_PartialOrd_ge 0 2 t_0 s_0 args 2 arg0 [ref r_anon_0 [var s_0]] arg1 [ref r_anon_1 [var t_0]] return [bool] 
abstract_fn core_cmp_PartialOrd_gt 0 2 t_0 s_0 args 2 arg0 [ref r_anon_0 [var s_0]] arg1 [ref r_anon_1 [var t_0]] return [bool] 
abstract_fn core_cmp_PartialOrd_le 0 2 t_0 s_0 args 2 arg0 [ref r_anon_0 [var s_0]] arg1 [ref r_anon_1 [var t_0]] return [bool] 
abstract_fn core_cmp_PartialOrd_lt 0 2 t_0 s_0 args 2 arg0 [ref r_anon_0 [var s_0]] arg1 [ref r_anon_1 [var t_0]] return [bool] 
abstract_fn core_cmp_PartialOrd_partial_cmp 0 2 t_0 s_0 args 2 arg0 [ref r_anon_0 [var s_0]] arg1 [ref r_anon_1 [var t_0]] return [adt core_option_Option 0 1 [adt core_cmp_Ordering 0 0]] 
abstract_fn core_default_Default_default 0 1 s_0 args 0 return [var s_0] 
abstract_fn core_hash_Hash_hash 0 2 t_0 s_0 args 2 arg0 [ref r_anon_0 [var s_0]] arg1 [ref_mut r_anon_1 [var t_0]] return [unit] 
abstract_fn core_hash_Hasher_finish 0 1 s_0 args 1 arg0 [ref r_anon_0 [var s_0]] return [abstract core_hash_Hasher_Output 0 1 [var s_0]] 
abstract_fn core_hash_Hasher_reset 0 1 s_0 args 1 arg0 [ref_mut r_anon_0 [var s_0]] return [unit] 
abstract_fn core_iter_DoubleEndedIterator_next_back 0 1 s_0 args 1 arg0 [ref_mut r_anon_0 [var s_0]] return [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var s_0]]] 
abstract_fn core_iter_ExactSizeIterator_len 0 1 s_0 args 1 arg0 [ref r_anon_0 [var s_0]] return [uint 32] 
abstract_fn core_iter_FromIterator_from_iter 0 3 t_0 s_0 f_0 args 1 arg0 [var f_0] return [var s_0] 
abstract_fn core_iter_IteratorExt_by_ref 0 1 s_0 args 1 arg0 [ref_mut r_named_0_84217 [var s_0]] return [adt core_iter_ByRef 1 r_named_0_84217 1 [var s_0]] 
abstract_fn core_iter_Iterator_next 0 1 s_0 args 1 arg0 [ref_mut r_anon_0 [var s_0]] return [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var s_0]]] 
abstract_fn core_iter_Iterator_size_hint 0 1 s_0 args 1 arg0 [ref r_anon_0 [var s_0]] return [tuple 2 [uint 32] [adt core_option_Option 0 1 [uint 32]]] 
abstract_fn core_iter_RandomAccessIterator_idx 0 1 s_0 args 2 arg0 [ref_mut r_anon_0 [var s_0]] arg1 [uint 32] return [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var s_0]]] 
abstract_fn core_iter_RandomAccessIterator_indexable 0 1 s_0 args 1 arg0 [ref r_anon_0 [var s_0]] return [uint 32] 
abstract_fn core_num_Float_classify 0 1 s_0 args 1 arg0 [var s_0] return [adt core_num_FpCategory 0 0] 
abstract_fn core_num_Float_infinity 0 1 s_0 args 0 return [var s_0] 
abstract_fn core_num_Float_is_infinite 0 1 s_0 args 1 arg0 [var s_0] return [bool] 
abstract_fn core_num_Float_is_nan 0 1 s_0 args 1 arg0 [var s_0] return [bool] 
abstract_fn core_num_Float_ln 0 1 s_0 args 1 arg0 [var s_0] return [var s_0] 
abstract_fn core_num_Float_nan 0 1 s_0 args 0 return [var s_0] 
abstract_fn core_num_Float_neg_infinity 0 1 s_0 args 0 return [var s_0] 
abstract_fn core_num_Float_recip 0 1 s_0 args 1 arg0 [var s_0] return [var s_0] 
abstract_fn core_num_Float_sqrt 0 1 s_0 args 1 arg0 [var s_0] return [var s_0] 
abstract_fn core_num_Float_trunc 0 1 s_0 args 1 arg0 [var s_0] return [var s_0] 
abstract_fn core_num_FromPrimitive_from_i16 0 1 s_0 args 1 arg0 [int 16] return [adt core_option_Option 0 1 [var s_0]] 
abstract_fn core_num_FromPrimitive_from_i32 0 1 s_0 args 1 arg0 [int 32] return [adt core_option_Option 0 1 [var s_0]] 
abstract_fn core_num_FromPrimitive_from_i64 0 1 s_0 args 1 arg0 [int 64] return [adt core_option_Option 0 1 [var s_0]] 
abstract_fn core_num_FromPrimitive_from_i8 0 1 s_0 args 1 arg0 [int 8] return [adt core_option_Option 0 1 [var s_0]] 
abstract_fn core_num_FromPrimitive_from_int 0 1 s_0 args 1 arg0 [int 32] return [adt core_option_Option 0 1 [var s_0]] 
abstract_fn core_num_FromPrimitive_from_u16 0 1 s_0 args 1 arg0 [uint 16] return [adt core_option_Option 0 1 [var s_0]] 
abstract_fn core_num_FromPrimitive_from_u32 0 1 s_0 args 1 arg0 [uint 32] return [adt core_option_Option 0 1 [var s_0]] 
abstract_fn core_num_FromPrimitive_from_u64 0 1 s_0 args 1 arg0 [uint 64] return [adt core_option_Option 0 1 [var s_0]] 
abstract_fn core_num_FromPrimitive_from_u8 0 1 s_0 args 1 arg0 [uint 8] return [adt core_option_Option 0 1 [var s_0]] 
abstract_fn core_num_FromPrimitive_from_uint 0 1 s_0 args 1 arg0 [uint 32] return [adt core_option_Option 0 1 [var s_0]] 
abstract_fn core_num_Int_checked_add 0 1 s_0 args 2 arg0 [var s_0] arg1 [var s_0] return [adt core_option_Option 0 1 [var s_0]] 
abstract_fn core_num_Int_count_ones 0 1 s_0 args 1 arg0 [var s_0] return [uint 32] 
abstract_fn core_num_Int_leading_zeros 0 1 s_0 args 1 arg0 [var s_0] return [uint 32] 
abstract_fn core_num_Int_max_value 0 1 s_0 args 0 return [var s_0] 
abstract_fn core_num_Int_min_value 0 1 s_0 args 0 return [var s_0] 
abstract_fn core_num_Int_one 0 1 s_0 args 0 return [var s_0] 
abstract_fn core_num_Int_rotate_left 0 1 s_0 args 2 arg0 [var s_0] arg1 [uint 32] return [var s_0] 
abstract_fn core_num_Int_rotate_right 0 1 s_0 args 2 arg0 [var s_0] arg1 [uint 32] return [var s_0] 
abstract_fn core_num_Int_saturating_sub 0 1 s_0 args 2 arg0 [var s_0] arg1 [var s_0] return [var s_0] 
abstract_fn core_num_Int_swap_bytes 0 1 s_0 args 1 arg0 [var s_0] return [var s_0] 
abstract_fn core_num_Int_trailing_zeros 0 1 s_0 args 1 arg0 [var s_0] return [uint 32] 
abstract_fn core_num_Int_zero 0 1 s_0 args 0 return [var s_0] 
abstract_fn core_num_NumCast_from 0 2 s_0 f_0 args 1 arg0 [var f_0] return [adt core_option_Option 0 1 [var s_0]] 
abstract_fn core_num_SignedInt_is_negative 0 1 s_0 args 1 arg0 [var s_0] return [bool] 
abstract_fn core_num_ToPrimitive_to_i16 0 1 s_0 args 1 arg0 [ref r_anon_0 [var s_0]] return [adt core_option_Option 0 1 [int 16]] 
abstract_fn core_num_ToPrimitive_to_i32 0 1 s_0 args 1 arg0 [ref r_anon_0 [var s_0]] return [adt core_option_Option 0 1 [int 32]] 
abstract_fn core_num_ToPrimitive_to_i64 0 1 s_0 args 1 arg0 [ref r_anon_0 [var s_0]] return [adt core_option_Option 0 1 [int 64]] 
abstract_fn core_num_ToPrimitive_to_i8 0 1 s_0 args 1 arg0 [ref r_anon_0 [var s_0]] return [adt core_option_Option 0 1 [int 8]] 
abstract_fn core_num_ToPrimitive_to_int 0 1 s_0 args 1 arg0 [ref r_anon_0 [var s_0]] return [adt core_option_Option 0 1 [int 32]] 
abstract_fn core_num_ToPrimitive_to_u16 0 1 s_0 args 1 arg0 [ref r_anon_0 [var s_0]] return [adt core_option_Option 0 1 [uint 16]] 
abstract_fn core_num_ToPrimitive_to_u32 0 1 s_0 args 1 arg0 [ref r_anon_0 [var s_0]] return [adt core_option_Option 0 1 [uint 32]] 
abstract_fn core_num_ToPrimitive_to_u64 0 1 s_0 args 1 arg0 [ref r_anon_0 [var s_0]] return [adt core_option_Option 0 1 [uint 64]] 
abstract_fn core_num_ToPrimitive_to_u8 0 1 s_0 args 1 arg0 [ref r_anon_0 [var s_0]] return [adt core_option_Option 0 1 [uint 8]] 
abstract_fn core_num_ToPrimitive_to_uint 0 1 s_0 args 1 arg0 [ref r_anon_0 [var s_0]] return [adt core_option_Option 0 1 [uint 32]] 
abstract_fn core_ops_Add_add 0 2 t_0 s_0 args 2 arg0 [var s_0] arg1 [var t_0] return [abstract core_ops_Add_Output 0 2 [var t_0] [var s_0]] 
abstract_fn core_ops_Deref_deref 0 1 s_0 args 1 arg0 [ref r_named_0_72110 [var s_0]] return [ref r_named_0_72110 [abstract core_ops_Deref_Target 0 1 [var s_0]]] 
abstract_fn core_ops_FnMut_call_mut 0 3 t_0 t_1 s_0 args 2 arg0 [ref_mut r_anon_0 [var s_0]] arg1 [var t_0] return [var t_1] 
abstract_fn core_ops_Fn_call 0 3 t_0 t_1 s_0 args 2 arg0 [ref r_anon_0 [var s_0]] arg1 [var t_0] return [var t_1] 
abstract_fn core_ops_Sub_sub 0 2 t_0 s_0 args 2 arg0 [var s_0] arg1 [var t_0] return [abstract core_ops_Sub_Output 0 2 [var t_0] [var s_0]] 
abstract_fn core_ptr_PtrExt_is_null 0 1 s_0 args 1 arg0 [var s_0] return [bool] 
abstract_fn core_slice_SplitIter_finish 0 1 s_0 args 1 arg0 [ref_mut r_anon_0 [var s_0]] return [adt core_option_Option 0 1 [abstract core_iter_Iterator_Item 0 1 [var s_0]]] 
abstract_type core_hash_Hasher_Output 0 1 s_0 
abstract_type core_iter_Iterator_Item 0 1 s_0 
abstract_type core_ops_Add_Output 0 2 t_0 s_0 
abstract_type core_ops_BitAnd_Output 0 2 t_0 s_0 
abstract_type core_ops_BitOr_Output 0 2 t_0 s_0 
abstract_type core_ops_BitXor_Output 0 2 t_0 s_0 
abstract_type core_ops_Deref_Target 0 1 s_0 
abstract_type core_ops_Div_Output 0 2 t_0 s_0 
abstract_type core_ops_Mul_Output 0 2 t_0 s_0 
abstract_type core_ops_Neg_Output 0 1 s_0 
abstract_type core_ops_Not_Output 0 1 s_0 
abstract_type core_ops_Rem_Output 0 2 t_0 s_0 
abstract_type core_ops_Shl_Output 0 2 t_0 s_0 
abstract_type core_ops_Shr_Output 0 2 t_0 s_0 
abstract_type core_ops_Sub_Output 0 2 t_0 s_0 

fn alloc_heap_allocate 0 0 args 2 size [uint 32] align [uint 32] return [ptr_mut [uint 8]] 0 body ([ptr_mut [uint 8]] unsafe 1 let __result [ptr_mut [uint 8]] ([ptr_mut [uint 8]] deref ([ptr_mut [ptr_mut [uint 8]]] cast ([uint 32] simple_literal 0) [ptr_mut [ptr_mut [uint 8]]])) ([ptr_mut [uint 8]] var __result)) 
fn alloc_heap_deallocate 0 0 args 3 ptr [ptr_mut [uint 8]] size [uint 32] align [uint 32] return [unit] 0 body ([unit] unsafe 1 let __result [unit] ([unit] deref ([ptr_mut [unit]] cast ([uint 32] simple_literal 0) [ptr_mut [unit]])) ([unit] var __result)) 
fn array1_panic 0 0 args 0 return [unit] 0 body ([unit] block 2 expr ([unit] unsafe 1 let __result [unit] ([unit] simple_literal _) ([unit] var __result)) let __result_0 [unit] ([unit] simple_literal _ItemFn) ([unit] var __result_0)) 
struct array1_Array 0 1 t_0 2 ptr [ptr_mut [var t_0]] len [uint 32] 1 array1_Array__Drop_drop 
fn array1_Array_new 0 1 t_0 args 1 len [uint 32] return [adt array1_Array 0 1 [var t_0]] 0 body ([adt array1_Array 0 1 [var t_0]] block 5 let size [uint 32] ([uint 32] binop BiMul ([uint 32] var len) ([uint 32] call core_mem_size_of 0 1 [var t_0] 0)) let align [uint 32] ([uint 32] call core_mem_align_of 0 1 [var t_0] 0) let ptr [ptr_mut [var t_0]] ([ptr_mut [var t_0]] unsafe 1 let __result [ptr_mut [var t_0]] ([ptr_mut [var t_0]] cast ([ptr_mut [uint 8]] call alloc_heap_allocate 0 0 2 ([uint 32] var size) ([uint 32] var align)) [ptr_mut [var t_0]]) ([ptr_mut [var t_0]] var __result)) expr ([unit] unsafe 1 let __result_0 [unit] ([unit] call core_ptr_zero_memory 0 1 [var t_0] 2 ([ptr_mut [var t_0]] var ptr) ([uint 32] var len)) ([unit] var __result_0)) let __result_1 [adt array1_Array 0 1 [var t_0]] ([adt array1_Array 0 1 [var t_0]] struct_literal 2 ptr ([ptr_mut [var t_0]] var ptr) len ([uint 32] var len)) ([adt array1_Array 0 1 [var t_0]] var __result_1)) 
fn array1_Array_get 1 r_named_0_129 1 t_0 args 2 self [ref r_named_0_129 [adt array1_Array 0 1 [var t_0]]] index [uint 32] return [ref r_named_0_129 [var t_0]] 0 body ([ptr_mut [var t_0]] block 2 expr ([unit] match ([int 32] cast ([bool] binop BiGe ([uint 32] var index) ([uint 32] field ([adt array1_Array 0 1 [var t_0]] deref ([ref r_named_0_129 [adt array1_Array 0 1 [var t_0]]] var self)) len)) [int 32]) 2 ([int 32] simple_literal 0) ([unit] simple_literal _ExprIf) ([int 32] wild) ([unit] block 2 expr ([unit] call array1_panic 0 0 0) let __result [unit] ([unit] simple_literal _Block) ([unit] var __result))) let __result_1 [ptr_mut [var t_0]] ([ptr_mut [var t_0]] unsafe 1 let __result_0 [ptr_mut [var t_0]] ([ptr_mut [var t_0]] call core_ptr_PtrExt_offset 0 1 [ptr_mut [var t_0]] 2 ([ptr_mut [var t_0]] field ([adt array1_Array 0 1 [var t_0]] deref ([ref r_named_0_129 [adt array1_Array 0 1 [var t_0]]] var self)) ptr) ([int 32] cast ([uint 32] var index) [int 32])) ([ptr_mut [var t_0]] var __result_0)) ([ptr_mut [var t_0]] var __result_1)) 
fn array1_Array_get_mut 1 r_named_0_166 1 t_0 args 2 self [ref_mut r_named_0_166 [adt array1_Array 0 1 [var t_0]]] index [uint 32] return [ref_mut r_named_0_166 [var t_0]] 0 body ([ptr_mut [var t_0]] block 2 expr ([unit] match ([int 32] cast ([bool] binop BiGe ([uint 32] var index) ([uint 32] field ([adt array1_Array 0 1 [var t_0]] deref ([ref_mut r_named_0_166 [adt array1_Array 0 1 [var t_0]]] var self)) len)) [int 32]) 2 ([int 32] simple_literal 0) ([unit] simple_literal _ExprIf) ([int 32] wild) ([unit] block 2 expr ([unit] call array1_panic 0 0 0) let __result [unit] ([unit] simple_literal _Block) ([unit] var __result))) let __result_1 [ptr_mut [var t_0]] ([ptr_mut [var t_0]] unsafe 1 let __result_0 [ptr_mut [var t_0]] ([ptr_mut [var t_0]] call core_ptr_PtrExt_offset 0 1 [ptr_mut [var t_0]] 2 ([ptr_mut [var t_0]] field ([adt array1_Array 0 1 [var t_0]] deref ([ref_mut r_named_0_166 [adt array1_Array 0 1 [var t_0]]] var self)) ptr) ([int 32] cast ([uint 32] var index) [int 32])) ([ptr_mut [var t_0]] var __result_0)) ([ptr_mut [var t_0]] var __result_1)) 
fn array1_Array__Drop_drop 0 1 t_0 args 1 self [ref_mut r_anon_0 [adt array1_Array 0 1 [var t_0]]] return [unit] 1 core_ops_Drop_drop 0 1 [adt array1_Array 0 1 [var t_0]] body ([unit] block 4 let size [uint 32] ([uint 32] binop BiMul ([uint 32] field ([adt array1_Array 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt array1_Array 0 1 [var t_0]]] var self)) len) ([uint 32] call core_mem_size_of 0 1 [var t_0] 0)) let align [uint 32] ([uint 32] call core_mem_align_of 0 1 [var t_0] 0) expr ([unit] unsafe 1 let __result [unit] ([unit] call alloc_heap_deallocate 0 0 3 ([ptr_mut [uint 8]] cast ([ptr_mut [var t_0]] field ([adt array1_Array 0 1 [var t_0]] deref ([ref_mut r_anon_0 [adt array1_Array 0 1 [var t_0]]] var self)) ptr) [ptr_mut [uint 8]]) ([uint 32] var size) ([uint 32] var align)) ([unit] var __result)) let __result_0 [unit] ([unit] simple_literal _method) ([unit] var __result_0)) 
fn crust_init 0 0 args 0 return [tuple 1 [adt array1_Array 0 1 [uint 32]]] 0 body ([tuple 1 [adt array1_Array 0 1 [uint 32]]] block 1 let __result [tuple 1 [adt array1_Array 0 1 [uint 32]]] ([tuple 1 [adt array1_Array 0 1 [uint 32]]] tuple_literal 1 ([adt array1_Array 0 1 [uint 32]] call array1_Array_new 0 1 [uint 32] 1 ([uint 32] simple_literal 10))) ([tuple 1 [adt array1_Array 0 1 [uint 32]]] var __result)) 
abstract_fn core_ptr_PtrExt_offset 0 1 s_0 args 2 arg0 [var s_0] arg1 [int 32] return [var s_0] 

