diff --git a/src/liballoc/heap.rs b/src/liballoc/heap.rs
index 57baa81..41b8928 100644
--- a/src/liballoc/heap.rs
+++ b/src/liballoc/heap.rs
@@ -279,7 +279,9 @@ mod imp {
 
     #[inline]
     pub unsafe fn allocate(size: usize, align: usize) -> *mut u8 {
-        if align <= MIN_ALIGN {
+        if size == 0 {
+            ptr::null_mut()
+        } else if align <= MIN_ALIGN {
             libc::malloc(size as libc::size_t) as *mut u8
         } else {
             let mut out = ptr::null_mut();
@@ -296,7 +298,10 @@ mod imp {
 
     #[inline]
     pub unsafe fn reallocate(ptr: *mut u8, old_size: usize, size: usize, align: usize) -> *mut u8 {
-        if align <= MIN_ALIGN {
+        if size == 0 {
+            deallocate(ptr, old_size, align);
+            ptr::null_mut()
+        } else if align <= MIN_ALIGN {
             libc::realloc(ptr as *mut libc::c_void, size as libc::size_t) as *mut u8
         } else {
             let new_ptr = allocate(size, align);
@@ -314,7 +319,9 @@ mod imp {
 
     #[inline]
     pub unsafe fn deallocate(ptr: *mut u8, _old_size: usize, _align: usize) {
-        libc::free(ptr as *mut libc::c_void)
+        if !ptr.is_null() {
+            libc::free(ptr as *mut libc::c_void)
+        }
     }
 
     #[inline]
diff --git a/src/libcollections/vec.rs b/src/libcollections/vec.rs
index 087b065..1ec7ec2 100644
--- a/src/libcollections/vec.rs
+++ b/src/libcollections/vec.rs
@@ -141,7 +141,7 @@ use borrow::{Cow, IntoCow};
 #[unsafe_no_drop_flag]
 #[stable(feature = "rust1", since = "1.0.0")]
 pub struct Vec<T> {
-    ptr: Unique<T>,
+    ptr: *mut T,
     len: usize,
     cap: usize,
 }
@@ -170,7 +170,7 @@ impl<T> Vec<T> {
         // non-null value which is fine since we never call deallocate on the ptr
         // if cap is 0. The reason for this is because the pointer of a slice
         // being NULL would break the null pointer optimization for enums.
-        unsafe { Vec::from_raw_parts(EMPTY as *mut T, 0, 0) }
+        unsafe { Vec::from_raw_parts(ptr::null_mut(), 0, 0) }
     }
 
     /// Constructs a new, empty `Vec<T>` with the specified capacity.
@@ -201,15 +201,12 @@ impl<T> Vec<T> {
     #[inline]
     #[stable(feature = "rust1", since = "1.0.0")]
     pub fn with_capacity(capacity: usize) -> Vec<T> {
-        if mem::size_of::<T>() == 0 {
-            unsafe { Vec::from_raw_parts(EMPTY as *mut T, 0, usize::MAX) }
-        } else if capacity == 0 {
+        if capacity == 0 {
             Vec::new()
         } else {
             let size = capacity.checked_mul(mem::size_of::<T>())
                                .expect("capacity overflow");
             let ptr = unsafe { allocate(size, mem::min_align_of::<T>()) };
-            if ptr.is_null() { ::alloc::oom() }
             unsafe { Vec::from_raw_parts(ptr as *mut T, 0, capacity) }
         }
     }
@@ -252,7 +249,7 @@ impl<T> Vec<T> {
     pub unsafe fn from_raw_parts(ptr: *mut T, length: usize,
                                  capacity: usize) -> Vec<T> {
         Vec {
-            ptr: Unique::new(ptr),
+            ptr: ptr,
             len: length,
             cap: capacity,
         }
@@ -360,12 +357,10 @@ impl<T> Vec<T> {
     /// ```
     #[stable(feature = "rust1", since = "1.0.0")]
     pub fn shrink_to_fit(&mut self) {
-        if mem::size_of::<T>() == 0 { return }
-
         if self.len == 0 {
             if self.cap != 0 {
                 unsafe {
-                    dealloc(*self.ptr, self.cap)
+                    dealloc(self.ptr, self.cap)
                 }
                 self.cap = 0;
             }
@@ -373,12 +368,11 @@ impl<T> Vec<T> {
             unsafe {
                 // Overflow check is unnecessary as the vector is already at
                 // least this large.
-                let ptr = reallocate(*self.ptr as *mut u8,
+                let ptr = reallocate(self.ptr as *mut u8,
                                      self.cap * mem::size_of::<T>(),
                                      self.len * mem::size_of::<T>(),
                                      mem::min_align_of::<T>()) as *mut T;
-                if ptr.is_null() { ::alloc::oom() }
-                self.ptr = Unique::new(ptr);
+                self.ptr = ptr;
             }
             self.cap = self.len;
         }
@@ -458,15 +452,11 @@ impl<T> Vec<T> {
     #[stable(feature = "rust1", since = "1.0.0")]
     pub fn into_iter(self) -> IntoIter<T> {
         unsafe {
-            let ptr = *self.ptr;
+            let ptr = self.ptr;
             assume(!ptr.is_null());
             let cap = self.cap;
             let begin = ptr as *const T;
-            let end = if mem::size_of::<T>() == 0 {
-                (ptr as usize + self.len()) as *const T
-            } else {
-                ptr.offset(self.len() as isize) as *const T
-            };
+            let end = ptr.offset(self.len() as isize) as *const T;
             mem::forget(self);
             IntoIter { allocation: ptr, cap: cap, ptr: begin, end: end }
         }
@@ -651,27 +641,18 @@ impl<T> Vec<T> {
             let size = max(old_size, 2 * mem::size_of::<T>()) * 2;
             if old_size > size { panic!("capacity overflow") }
             unsafe {
-                let ptr = alloc_or_realloc(*vec.ptr, old_size, size);
-                if ptr.is_null() { ::alloc::oom() }
-                vec.ptr = Unique::new(ptr);
+                let ptr = alloc_or_realloc(vec.ptr, old_size, size);
+                vec.ptr = ptr;
             }
             vec.cap = max(vec.cap, 2) * 2;
         }
 
-        if mem::size_of::<T>() == 0 {
-            // zero-size types consume no memory, so we can't rely on the
-            // address space running out
-            self.len = self.len.checked_add(1).expect("length overflow");
-            unsafe { mem::forget(value); }
-            return
-        }
-
         if self.len == self.cap {
             resize(self);
         }
 
         unsafe {
-            let end = (*self.ptr).offset(self.len as isize);
+            let end = self.ptr.offset(self.len as isize);
             ptr::write(&mut *end, value);
             self.len += 1;
         }
@@ -719,13 +700,6 @@ impl<T> Vec<T> {
     #[unstable(feature = "collections",
                reason = "new API, waiting for dust to settle")]
     pub fn append(&mut self, other: &mut Self) {
-        if mem::size_of::<T>() == 0 {
-            // zero-size types consume no memory, so we can't rely on the
-            // address space running out
-            self.len = self.len.checked_add(other.len()).expect("length overflow");
-            unsafe { other.set_len(0) }
-            return;
-        }
         self.reserve(other.len());
         let len = self.len();
         unsafe {
@@ -758,12 +732,8 @@ impl<T> Vec<T> {
                reason = "matches collection reform specification, waiting for dust to settle")]
     pub fn drain(&mut self) -> Drain<T> {
         unsafe {
-            let begin = *self.ptr as *const T;
-            let end = if mem::size_of::<T>() == 0 {
-                (*self.ptr as usize + self.len()) as *const T
-            } else {
-                (*self.ptr).offset(self.len() as isize) as *const T
-            };
+            let begin = self.ptr as *const T;
+            let end = self.ptr.offset(self.len() as isize) as *const T;
             self.set_len(0);
             Drain {
                 ptr: begin,
@@ -816,6 +786,7 @@ impl<T> Vec<T> {
     #[stable(feature = "rust1", since = "1.0.0")]
     pub fn is_empty(&self) -> bool { self.len() == 0 }
 
+    /*
     /// Converts a `Vec<T>` to a `Vec<U>` where `T` and `U` have the same
     /// size and in case they are not zero-sized the same minimal alignment.
     ///
@@ -1015,6 +986,7 @@ impl<T> Vec<T> {
             result
         }
     }
+    */
 
     /// Splits the collection into two at the given index.
     ///
@@ -1235,15 +1207,12 @@ impl<T> Vec<T> {
     /// If the capacity for `self` is already equal to or greater than the
     /// requested capacity, then no action is taken.
     fn grow_capacity(&mut self, capacity: usize) {
-        if mem::size_of::<T>() == 0 { return }
-
         if capacity > self.cap {
             let size = capacity.checked_mul(mem::size_of::<T>())
                                .expect("capacity overflow");
             unsafe {
-                let ptr = alloc_or_realloc(*self.ptr, self.cap * mem::size_of::<T>(), size);
-                if ptr.is_null() { ::alloc::oom() }
-                self.ptr = Unique::new(ptr);
+                let ptr = alloc_or_realloc(self.ptr, self.cap * mem::size_of::<T>(), size);
+                self.ptr = ptr;
             }
             self.cap = capacity;
         }
@@ -1262,11 +1231,9 @@ unsafe fn alloc_or_realloc<T>(ptr: *mut T, old_size: usize, size: usize) -> *mut
 
 #[inline]
 unsafe fn dealloc<T>(ptr: *mut T, len: usize) {
-    if mem::size_of::<T>() != 0 {
-        deallocate(ptr as *mut u8,
-                   len * mem::size_of::<T>(),
-                   mem::min_align_of::<T>())
-    }
+    deallocate(ptr as *mut u8,
+               len * mem::size_of::<T>(),
+               mem::min_align_of::<T>())
 }
 
 #[doc(hidden)]
@@ -1434,7 +1401,7 @@ impl<T> ops::Deref for Vec<T> {
 
     fn deref(&self) -> &[T] {
         unsafe {
-            let p = *self.ptr;
+            let p = self.ptr;
             assume(p != 0 as *mut T);
             slice::from_raw_parts(p, self.len)
         }
@@ -1445,7 +1412,7 @@ impl<T> ops::Deref for Vec<T> {
 impl<T> ops::DerefMut for Vec<T> {
     fn deref_mut(&mut self) -> &mut [T] {
         unsafe {
-            let ptr = *self.ptr;
+            let ptr = self.ptr;
             assume(!ptr.is_null());
             slice::from_raw_parts_mut(ptr, self.len)
         }
@@ -1621,7 +1588,7 @@ impl<T> Drop for Vec<T> {
                 for x in &*self {
                     ptr::read(x);
                 }
-                dealloc(*self.ptr, self.cap)
+                dealloc(self.ptr, self.cap)
             }
         }
     }
@@ -1738,20 +1705,10 @@ impl<T> Iterator for IntoIter<T> {
             if self.ptr == self.end {
                 None
             } else {
-                if mem::size_of::<T>() == 0 {
-                    // purposefully don't use 'ptr.offset' because for
-                    // vectors with 0-size elements this would return the
-                    // same pointer.
-                    self.ptr = mem::transmute(self.ptr as usize + 1);
-
-                    // Use a non-null pointer value
-                    Some(ptr::read(EMPTY as *mut T))
-                } else {
-                    let old = self.ptr;
-                    self.ptr = self.ptr.offset(1);
-
-                    Some(ptr::read(old))
-                }
+                let old = self.ptr;
+                self.ptr = self.ptr.offset(1);
+
+                Some(ptr::read(old))
             }
         }
     }
@@ -1773,17 +1730,9 @@ impl<T> DoubleEndedIterator for IntoIter<T> {
             if self.end == self.ptr {
                 None
             } else {
-                if mem::size_of::<T>() == 0 {
-                    // See above for why 'ptr.offset' isn't used
-                    self.end = mem::transmute(self.end as usize - 1);
+                self.end = self.end.offset(-1);
 
-                    // Use a non-null pointer value
-                    Some(ptr::read(EMPTY as *mut T))
-                } else {
-                    self.end = self.end.offset(-1);
-
-                    Some(ptr::read(mem::transmute(self.end)))
-                }
+                Some(ptr::read(mem::transmute(self.end)))
             }
         }
     }
@@ -1829,20 +1778,10 @@ impl<'a, T> Iterator for Drain<'a, T> {
             if self.ptr == self.end {
                 None
             } else {
-                if mem::size_of::<T>() == 0 {
-                    // purposefully don't use 'ptr.offset' because for
-                    // vectors with 0-size elements this would return the
-                    // same pointer.
-                    self.ptr = mem::transmute(self.ptr as usize + 1);
-
-                    // Use a non-null pointer value
-                    Some(ptr::read(EMPTY as *mut T))
-                } else {
-                    let old = self.ptr;
-                    self.ptr = self.ptr.offset(1);
-
-                    Some(ptr::read(old))
-                }
+                let old = self.ptr;
+                self.ptr = self.ptr.offset(1);
+
+                Some(ptr::read(old))
             }
         }
     }
@@ -1864,17 +1803,9 @@ impl<'a, T> DoubleEndedIterator for Drain<'a, T> {
             if self.end == self.ptr {
                 None
             } else {
-                if mem::size_of::<T>() == 0 {
-                    // See above for why 'ptr.offset' isn't used
-                    self.end = mem::transmute(self.end as usize - 1);
+                self.end = self.end.offset(-1);
 
-                    // Use a non-null pointer value
-                    Some(ptr::read(EMPTY as *mut T))
-                } else {
-                    self.end = self.end.offset(-1);
-
-                    Some(ptr::read(self.end))
-                }
+                Some(ptr::read(self.end))
             }
         }
     }
diff --git a/src/libcore/macros.rs b/src/libcore/macros.rs
index 751bd73..2623e81 100644
--- a/src/libcore/macros.rs
+++ b/src/libcore/macros.rs
@@ -12,19 +12,26 @@
 #[macro_export]
 macro_rules! panic {
     () => (
-        panic!("explicit panic")
+        ::core::panicking::panic_()
+        //panic!("explicit panic")
     );
     ($msg:expr) => ({
+        ::core::panicking::panic_()
+        /*
         static _MSG_FILE_LINE: (&'static str, &'static str, u32) = ($msg, file!(), line!());
         ::core::panicking::panic(&_MSG_FILE_LINE)
+        */
     });
     ($fmt:expr, $($arg:tt)*) => ({
+        ::core::panicking::panic_()
+        /*
         // The leading _'s are to avoid dead code warnings if this is
         // used inside a dead function. Just `#[allow(dead_code)]` is
         // insufficient, since the user may have
         // `#[forbid(dead_code)]` and which cannot be overridden.
         static _FILE_LINE: (&'static str, u32) = (file!(), line!());
         ::core::panicking::panic_fmt(format_args!($fmt, $($arg)*), &_FILE_LINE)
+        */
     });
 }
 
diff --git a/src/libcore/panicking.rs b/src/libcore/panicking.rs
index d6e00df..0b2a78d 100644
--- a/src/libcore/panicking.rs
+++ b/src/libcore/panicking.rs
@@ -32,6 +32,10 @@
 
 use fmt;
 
+pub fn panic_() -> ! {
+    unsafe { ::intrinsics::abort() }
+}
+
 #[cold] #[inline(never)] // this is the slow path, always
 #[lang="panic"]
 pub fn panic(expr_file_line: &(&'static str, &'static str, u32)) -> ! {
diff --git a/src/libcore/slice.rs b/src/libcore/slice.rs
index d885613..b7c50dc 100644
--- a/src/libcore/slice.rs
+++ b/src/libcore/slice.rs
@@ -51,7 +51,7 @@ use result::Result::{Ok, Err};
 use ptr;
 use mem;
 use mem::size_of;
-use marker::{Send, Sized, Sync, self};
+use marker::{Send, Sized, Sync, Copy, self};
 use raw::Repr;
 // Avoid conflicts with *both* the Slice trait (buggy) and the `slice::raw` module.
 use raw::Slice as RawSlice;
@@ -857,11 +857,12 @@ impl<'a, T> RandomAccessIterator for Iter<'a, T> {
 pub struct IterMut<'a, T: 'a> {
     ptr: *mut T,
     end: *mut T,
-    _marker: marker::PhantomData<&'a mut T>,
+    _marker: marker::PhantomData<&'a T>,
 }
 
 unsafe impl<'a, T: Sync> Sync for IterMut<'a, T> {}
 unsafe impl<'a, T: Send> Send for IterMut<'a, T> {}
+impl<'a, T> Copy for IterMut<'a, T> {}
 
 #[unstable(feature = "core")]
 impl<'a, T> ops::Index<ops::Range<usize>> for IterMut<'a, T> {
