diff --git a/src/liballoc/heap.rs b/src/liballoc/heap.rs
index a2643f4..e693504 100644
--- a/src/liballoc/heap.rs
+++ b/src/liballoc/heap.rs
@@ -294,9 +294,9 @@ mod imp {
 
     #[inline]
     pub unsafe fn reallocate(ptr: *mut u8, old_size: uint, size: uint, align: uint) -> *mut u8 {
-        if align <= MIN_ALIGN {
+/*        if align <= MIN_ALIGN {
             libc::realloc(ptr as *mut libc::c_void, size as libc::size_t) as *mut u8
-        } else {
+        } else */{
             let new_ptr = allocate(size, align);
             ptr::copy_memory(new_ptr, ptr, cmp::min(size, old_size));
             deallocate(ptr, old_size, align);
diff --git a/src/libcollections/dlist.rs b/src/libcollections/dlist.rs
index 73fd806..7400af0 100644
--- a/src/libcollections/dlist.rs
+++ b/src/libcollections/dlist.rs
@@ -24,6 +24,7 @@
 use core::prelude::*;
 
 use alloc::boxed::Box;
+use alloc::heap::{allocate, deallocate};
 use core::cmp::Ordering;
 use core::default::Default;
 use core::fmt;
@@ -31,6 +32,7 @@ use core::hash::{Writer, Hasher, Hash};
 use core::iter::{self, FromIterator};
 use core::mem;
 use core::ptr;
+use core::ops::{Deref, DerefMut};
 
 /// A doubly-linked list.
 #[stable]
@@ -40,7 +42,7 @@ pub struct DList<T> {
     list_tail: Rawlink<Node<T>>,
 }
 
-type Link<T> = Option<Box<Node<T>>>;
+type Link<T> = Option<Box_<Node<T>>>;
 
 struct Rawlink<T> {
     p: *mut T,
@@ -140,7 +142,7 @@ impl<T> Node<T> {
 }
 
 /// Set the .prev field on `next`, then return `Some(next)`
-fn link_with_prev<T>(mut next: Box<Node<T>>, prev: Rawlink<Node<T>>)
+fn link_with_prev<T>(mut next: Box_<Node<T>>, prev: Rawlink<Node<T>>)
                   -> Link<T> {
     next.prev = prev;
     Some(next)
@@ -150,7 +152,7 @@ fn link_with_prev<T>(mut next: Box<Node<T>>, prev: Rawlink<Node<T>>)
 impl<T> DList<T> {
     /// Add a Node first in the list
     #[inline]
-    fn push_front_node(&mut self, mut new_head: Box<Node<T>>) {
+    fn push_front_node(&mut self, mut new_head: Box_<Node<T>>) {
         match self.list_head {
             None => {
                 self.list_tail = Rawlink::some(&mut *new_head);
@@ -168,20 +170,24 @@ impl<T> DList<T> {
 
     /// Remove the first Node and return it, or None if the list is empty
     #[inline]
-    fn pop_front_node(&mut self) -> Option<Box<Node<T>>> {
-        self.list_head.take().map(|mut front_node| {
-            self.length -= 1;
-            match front_node.next.take() {
-                Some(node) => self.list_head = link_with_prev(node, Rawlink::none()),
-                None => self.list_tail = Rawlink::none()
+    fn pop_front_node(&mut self) -> Option<Box_<Node<T>>> {
+        match self.list_head.take() {
+            None => None,
+            Some(mut front_node) => {
+                self.length -= 1;
+                match front_node.next.take() {
+                    Some(node) => self.list_head = link_with_prev(node, Rawlink::none()),
+                    None => self.list_tail = Rawlink::none()
+                }
+                Some(front_node)
             }
-            front_node
-        })
+        }
+    // .map(|mut front_node| {
     }
 
     /// Add a Node last in the list
     #[inline]
-    fn push_back_node(&mut self, mut new_tail: Box<Node<T>>) {
+    fn push_back_node(&mut self, mut new_tail: Box_<Node<T>>) {
         match self.list_tail.resolve() {
             None => return self.push_front_node(new_tail),
             Some(tail) => {
@@ -194,15 +200,19 @@ impl<T> DList<T> {
 
     /// Remove the last Node and return it, or None if the list is empty
     #[inline]
-    fn pop_back_node(&mut self) -> Option<Box<Node<T>>> {
-        self.list_tail.resolve().map_or(None, |tail| {
-            self.length -= 1;
-            self.list_tail = tail.prev;
-            match tail.prev.resolve() {
-                None => self.list_head.take(),
-                Some(tail_prev) => tail_prev.next.take()
+    fn pop_back_node(&mut self) -> Option<Box_<Node<T>>> {
+        match self.list_tail.resolve() {
+            None => None,
+            Some(tail) => {
+                self.length -= 1;
+                self.list_tail = tail.prev;
+                match tail.prev.resolve() {
+                    None => self.list_head.take(),
+                    Some(tail_prev) => tail_prev.next.take()
+                }
             }
-        })
+        }
+        // .map_or(None, |tail| {
     }
 }
 
@@ -492,7 +502,7 @@ impl<T> DList<T> {
     /// ```
     #[stable]
     pub fn push_front(&mut self, elt: T) {
-        self.push_front_node(box Node::new(elt))
+        self.push_front_node(Box_::new(Node::new(elt)))
     }
 
     /// Removes the first element and returns it, or `None` if the list is
@@ -518,7 +528,12 @@ impl<T> DList<T> {
     ///
     #[stable]
     pub fn pop_front(&mut self) -> Option<T> {
-        self.pop_front_node().map(|box Node{value, ..}| value)
+        match self.pop_front_node() {
+            None => None,
+            Some(x) => Some(x.move_out().value)
+        }
+
+// .map(|box Node{value, ..}| value)
     }
 
     /// Appends an element to the back of a list
@@ -535,7 +550,7 @@ impl<T> DList<T> {
     /// ```
     #[stable]
     pub fn push_back(&mut self, elt: T) {
-        self.push_back_node(box Node::new(elt))
+        self.push_back_node(Box_::new(Node::new(elt)))
     }
 
     /// Removes the last element from a list and returns it, or `None` if
@@ -554,7 +569,11 @@ impl<T> DList<T> {
     /// ```
     #[stable]
     pub fn pop_back(&mut self) -> Option<T> {
-        self.pop_back_node().map(|box Node{value, ..}| value)
+        match self.pop_back_node() {
+            None => None,
+            Some(x) => Some(x.move_out().value)
+        }
+        //.map(|box Node{value, ..}| value)
     }
 
     /// Splits the list into two at the given index. Returns everything after the given index,
@@ -627,9 +646,10 @@ impl<T> Drop for DList<T> {
         // Just dropping the list_head can lead to stack exhaustion
         // when length is >> 1_000_000
         let mut tail = self.list_tail;
-        loop {
+        let mut keep_going = true;
+        while keep_going {
             match tail.resolve() {
-                None => break,
+                None => keep_going = false,
                 Some(prev) => {
                     prev.next.take(); // release Box<Node<T>>
                     tail = prev.prev;
@@ -642,6 +662,14 @@ impl<T> Drop for DList<T> {
     }
 }
 
+pub fn crust_init() -> (DList<u8>,DList<u8>) {
+    let mut d1 = DList::new();
+    let mut d2 = DList::new();
+    d1.push_back(1);
+    d2.push_back(1);
+    (d1,d2)
+}
+
 #[stable]
 impl<'a, A> Iterator for Iter<'a, A> {
     type Item = &'a A;
@@ -726,7 +754,7 @@ impl<'a, A> ExactSizeIterator for IterMut<'a, A> {}
 
 // private methods for IterMut
 impl<'a, A> IterMut<'a, A> {
-    fn insert_next_node(&mut self, mut ins_node: Box<Node<A>>) {
+    fn insert_next_node(&mut self, mut ins_node: Box_<Node<A>>) {
         // Insert before `self.head` so that it is between the
         // previously yielded element and self.head.
         //
@@ -772,7 +800,7 @@ impl<'a, A> IterMut<'a, A> {
     #[inline]
     #[unstable = "this is probably better handled by a cursor type -- we'll see"]
     pub fn insert_next(&mut self, elt: A) {
-        self.insert_next_node(box Node::new(elt))
+        self.insert_next_node(Box_::new(Node::new(elt)))
     }
 
     /// Provides a reference to the next element, without changing the iterator.
@@ -872,7 +900,7 @@ impl<A: Clone> Clone for DList<A> {
         self.iter().map(|x| x.clone()).collect()
     }
 }
-
+/*
 #[stable]
 impl<A: fmt::Debug> fmt::Debug for DList<A> {
     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
@@ -896,562 +924,4 @@ impl<S: Writer + Hasher, A: Hash<S>> Hash<S> for DList<A> {
         }
     }
 }
-
-#[cfg(test)]
-mod tests {
-    use prelude::*;
-    use std::rand;
-    use std::hash::{self, SipHasher};
-    use std::thread::Thread;
-    use test::Bencher;
-    use test;
-
-    use super::{DList, Node};
-
-    pub fn check_links<T>(list: &DList<T>) {
-        let mut len = 0u;
-        let mut last_ptr: Option<&Node<T>> = None;
-        let mut node_ptr: &Node<T>;
-        match list.list_head {
-            None => { assert_eq!(0u, list.length); return }
-            Some(ref node) => node_ptr = &**node,
-        }
-        loop {
-            match (last_ptr, node_ptr.prev.resolve_immut()) {
-                (None   , None      ) => {}
-                (None   , _         ) => panic!("prev link for list_head"),
-                (Some(p), Some(pptr)) => {
-                    assert_eq!(p as *const Node<T>, pptr as *const Node<T>);
-                }
-                _ => panic!("prev link is none, not good"),
-            }
-            match node_ptr.next {
-                Some(ref next) => {
-                    last_ptr = Some(node_ptr);
-                    node_ptr = &**next;
-                    len += 1;
-                }
-                None => {
-                    len += 1;
-                    break;
-                }
-            }
-        }
-        assert_eq!(len, list.length);
-    }
-
-    #[test]
-    fn test_basic() {
-        let mut m: DList<Box<int>> = DList::new();
-        assert_eq!(m.pop_front(), None);
-        assert_eq!(m.pop_back(), None);
-        assert_eq!(m.pop_front(), None);
-        m.push_front(box 1);
-        assert_eq!(m.pop_front(), Some(box 1));
-        m.push_back(box 2);
-        m.push_back(box 3);
-        assert_eq!(m.len(), 2);
-        assert_eq!(m.pop_front(), Some(box 2));
-        assert_eq!(m.pop_front(), Some(box 3));
-        assert_eq!(m.len(), 0);
-        assert_eq!(m.pop_front(), None);
-        m.push_back(box 1);
-        m.push_back(box 3);
-        m.push_back(box 5);
-        m.push_back(box 7);
-        assert_eq!(m.pop_front(), Some(box 1));
-
-        let mut n = DList::new();
-        n.push_front(2i);
-        n.push_front(3);
-        {
-            assert_eq!(n.front().unwrap(), &3);
-            let x = n.front_mut().unwrap();
-            assert_eq!(*x, 3);
-            *x = 0;
-        }
-        {
-            assert_eq!(n.back().unwrap(), &2);
-            let y = n.back_mut().unwrap();
-            assert_eq!(*y, 2);
-            *y = 1;
-        }
-        assert_eq!(n.pop_front(), Some(0));
-        assert_eq!(n.pop_front(), Some(1));
-    }
-
-    #[cfg(test)]
-    fn generate_test() -> DList<int> {
-        list_from(&[0i,1,2,3,4,5,6])
-    }
-
-    #[cfg(test)]
-    fn list_from<T: Clone>(v: &[T]) -> DList<T> {
-        v.iter().map(|x| (*x).clone()).collect()
-    }
-
-    #[test]
-    fn test_append() {
-        // Empty to empty
-        {
-            let mut m: DList<int> = DList::new();
-            let mut n = DList::new();
-            m.append(&mut n);
-            check_links(&m);
-            assert_eq!(m.len(), 0);
-            assert_eq!(n.len(), 0);
-        }
-        // Non-empty to empty
-        {
-            let mut m = DList::new();
-            let mut n = DList::new();
-            n.push_back(2i);
-            m.append(&mut n);
-            check_links(&m);
-            assert_eq!(m.len(), 1);
-            assert_eq!(m.pop_back(), Some(2));
-            assert_eq!(n.len(), 0);
-            check_links(&m);
-        }
-        // Empty to non-empty
-        {
-            let mut m = DList::new();
-            let mut n = DList::new();
-            m.push_back(2i);
-            m.append(&mut n);
-            check_links(&m);
-            assert_eq!(m.len(), 1);
-            assert_eq!(m.pop_back(), Some(2));
-            check_links(&m);
-        }
-
-        // Non-empty to non-empty
-        let v = vec![1i,2,3,4,5];
-        let u = vec![9i,8,1,2,3,4,5];
-        let mut m = list_from(v.as_slice());
-        let mut n = list_from(u.as_slice());
-        m.append(&mut n);
-        check_links(&m);
-        let mut sum = v;
-        sum.push_all(u.as_slice());
-        assert_eq!(sum.len(), m.len());
-        for elt in sum.into_iter() {
-            assert_eq!(m.pop_front(), Some(elt))
-        }
-        assert_eq!(n.len(), 0);
-        // let's make sure it's working properly, since we
-        // did some direct changes to private members
-        n.push_back(3);
-        assert_eq!(n.len(), 1);
-        assert_eq!(n.pop_front(), Some(3));
-        check_links(&n);
-    }
-
-    #[test]
-    fn test_split_off() {
-        // singleton
-        {
-            let mut m = DList::new();
-            m.push_back(1i);
-
-            let p = m.split_off(0);
-            assert_eq!(m.len(), 0);
-            assert_eq!(p.len(), 1);
-            assert_eq!(p.back(), Some(&1));
-            assert_eq!(p.front(), Some(&1));
-        }
-
-        // not singleton, forwards
-        {
-            let u = vec![1i,2,3,4,5];
-            let mut m = list_from(u.as_slice());
-            let mut n = m.split_off(2);
-            assert_eq!(m.len(), 2);
-            assert_eq!(n.len(), 3);
-            for elt in range(1i, 3) {
-                assert_eq!(m.pop_front(), Some(elt));
-            }
-            for elt in range(3i, 6) {
-                assert_eq!(n.pop_front(), Some(elt));
-            }
-        }
-        // not singleton, backwards
-        {
-            let u = vec![1i,2,3,4,5];
-            let mut m = list_from(u.as_slice());
-            let mut n = m.split_off(4);
-            assert_eq!(m.len(), 4);
-            assert_eq!(n.len(), 1);
-            for elt in range(1i, 5) {
-                assert_eq!(m.pop_front(), Some(elt));
-            }
-            for elt in range(5i, 6) {
-                assert_eq!(n.pop_front(), Some(elt));
-            }
-        }
-
-    }
-
-    #[test]
-    fn test_iterator() {
-        let m = generate_test();
-        for (i, elt) in m.iter().enumerate() {
-            assert_eq!(i as int, *elt);
-        }
-        let mut n = DList::new();
-        assert_eq!(n.iter().next(), None);
-        n.push_front(4i);
-        let mut it = n.iter();
-        assert_eq!(it.size_hint(), (1, Some(1)));
-        assert_eq!(it.next().unwrap(), &4);
-        assert_eq!(it.size_hint(), (0, Some(0)));
-        assert_eq!(it.next(), None);
-    }
-
-    #[test]
-    fn test_iterator_clone() {
-        let mut n = DList::new();
-        n.push_back(2i);
-        n.push_back(3);
-        n.push_back(4);
-        let mut it = n.iter();
-        it.next();
-        let mut jt = it.clone();
-        assert_eq!(it.next(), jt.next());
-        assert_eq!(it.next_back(), jt.next_back());
-        assert_eq!(it.next(), jt.next());
-    }
-
-    #[test]
-    fn test_iterator_double_end() {
-        let mut n = DList::new();
-        assert_eq!(n.iter().next(), None);
-        n.push_front(4i);
-        n.push_front(5);
-        n.push_front(6);
-        let mut it = n.iter();
-        assert_eq!(it.size_hint(), (3, Some(3)));
-        assert_eq!(it.next().unwrap(), &6);
-        assert_eq!(it.size_hint(), (2, Some(2)));
-        assert_eq!(it.next_back().unwrap(), &4);
-        assert_eq!(it.size_hint(), (1, Some(1)));
-        assert_eq!(it.next_back().unwrap(), &5);
-        assert_eq!(it.next_back(), None);
-        assert_eq!(it.next(), None);
-    }
-
-    #[test]
-    fn test_rev_iter() {
-        let m = generate_test();
-        for (i, elt) in m.iter().rev().enumerate() {
-            assert_eq!((6 - i) as int, *elt);
-        }
-        let mut n = DList::new();
-        assert_eq!(n.iter().rev().next(), None);
-        n.push_front(4i);
-        let mut it = n.iter().rev();
-        assert_eq!(it.size_hint(), (1, Some(1)));
-        assert_eq!(it.next().unwrap(), &4);
-        assert_eq!(it.size_hint(), (0, Some(0)));
-        assert_eq!(it.next(), None);
-    }
-
-    #[test]
-    fn test_mut_iter() {
-        let mut m = generate_test();
-        let mut len = m.len();
-        for (i, elt) in m.iter_mut().enumerate() {
-            assert_eq!(i as int, *elt);
-            len -= 1;
-        }
-        assert_eq!(len, 0);
-        let mut n = DList::new();
-        assert!(n.iter_mut().next().is_none());
-        n.push_front(4i);
-        n.push_back(5);
-        let mut it = n.iter_mut();
-        assert_eq!(it.size_hint(), (2, Some(2)));
-        assert!(it.next().is_some());
-        assert!(it.next().is_some());
-        assert_eq!(it.size_hint(), (0, Some(0)));
-        assert!(it.next().is_none());
-    }
-
-    #[test]
-    fn test_iterator_mut_double_end() {
-        let mut n = DList::new();
-        assert!(n.iter_mut().next_back().is_none());
-        n.push_front(4i);
-        n.push_front(5);
-        n.push_front(6);
-        let mut it = n.iter_mut();
-        assert_eq!(it.size_hint(), (3, Some(3)));
-        assert_eq!(*it.next().unwrap(), 6);
-        assert_eq!(it.size_hint(), (2, Some(2)));
-        assert_eq!(*it.next_back().unwrap(), 4);
-        assert_eq!(it.size_hint(), (1, Some(1)));
-        assert_eq!(*it.next_back().unwrap(), 5);
-        assert!(it.next_back().is_none());
-        assert!(it.next().is_none());
-    }
-
-    #[test]
-    fn test_insert_prev() {
-        let mut m = list_from(&[0i,2,4,6,8]);
-        let len = m.len();
-        {
-            let mut it = m.iter_mut();
-            it.insert_next(-2);
-            loop {
-                match it.next() {
-                    None => break,
-                    Some(elt) => {
-                        it.insert_next(*elt + 1);
-                        match it.peek_next() {
-                            Some(x) => assert_eq!(*x, *elt + 2),
-                            None => assert_eq!(8, *elt),
-                        }
-                    }
-                }
-            }
-            it.insert_next(0);
-            it.insert_next(1);
-        }
-        check_links(&m);
-        assert_eq!(m.len(), 3 + len * 2);
-        assert_eq!(m.into_iter().collect::<Vec<int>>(), vec![-2,0,1,2,3,4,5,6,7,8,9,0,1]);
-    }
-
-    #[test]
-    fn test_mut_rev_iter() {
-        let mut m = generate_test();
-        for (i, elt) in m.iter_mut().rev().enumerate() {
-            assert_eq!((6-i) as int, *elt);
-        }
-        let mut n = DList::new();
-        assert!(n.iter_mut().rev().next().is_none());
-        n.push_front(4i);
-        let mut it = n.iter_mut().rev();
-        assert!(it.next().is_some());
-        assert!(it.next().is_none());
-    }
-
-    #[test]
-    fn test_send() {
-        let n = list_from(&[1i,2,3]);
-        Thread::scoped(move || {
-            check_links(&n);
-            let a: &[_] = &[&1,&2,&3];
-            assert_eq!(a, n.iter().collect::<Vec<&int>>());
-        }).join().ok().unwrap();
-    }
-
-    #[test]
-    fn test_eq() {
-        let mut n: DList<u8> = list_from(&[]);
-        let mut m = list_from(&[]);
-        assert!(n == m);
-        n.push_front(1);
-        assert!(n != m);
-        m.push_back(1);
-        assert!(n == m);
-
-        let n = list_from(&[2i,3,4]);
-        let m = list_from(&[1i,2,3]);
-        assert!(n != m);
-    }
-
-    #[test]
-    fn test_hash() {
-      let mut x = DList::new();
-      let mut y = DList::new();
-
-      assert!(hash::hash::<_, SipHasher>(&x) == hash::hash::<_, SipHasher>(&y));
-
-      x.push_back(1i);
-      x.push_back(2);
-      x.push_back(3);
-
-      y.push_front(3i);
-      y.push_front(2);
-      y.push_front(1);
-
-      assert!(hash::hash::<_, SipHasher>(&x) == hash::hash::<_, SipHasher>(&y));
-    }
-
-    #[test]
-    fn test_ord() {
-        let n: DList<int> = list_from(&[]);
-        let m = list_from(&[1i,2,3]);
-        assert!(n < m);
-        assert!(m > n);
-        assert!(n <= n);
-        assert!(n >= n);
-    }
-
-    #[test]
-    fn test_ord_nan() {
-        let nan = 0.0f64/0.0;
-        let n = list_from(&[nan]);
-        let m = list_from(&[nan]);
-        assert!(!(n < m));
-        assert!(!(n > m));
-        assert!(!(n <= m));
-        assert!(!(n >= m));
-
-        let n = list_from(&[nan]);
-        let one = list_from(&[1.0f64]);
-        assert!(!(n < one));
-        assert!(!(n > one));
-        assert!(!(n <= one));
-        assert!(!(n >= one));
-
-        let u = list_from(&[1.0f64,2.0,nan]);
-        let v = list_from(&[1.0f64,2.0,3.0]);
-        assert!(!(u < v));
-        assert!(!(u > v));
-        assert!(!(u <= v));
-        assert!(!(u >= v));
-
-        let s = list_from(&[1.0f64,2.0,4.0,2.0]);
-        let t = list_from(&[1.0f64,2.0,3.0,2.0]);
-        assert!(!(s < t));
-        assert!(s > one);
-        assert!(!(s <= one));
-        assert!(s >= one);
-    }
-
-    #[test]
-    fn test_fuzz() {
-        for _ in range(0u, 25) {
-            fuzz_test(3);
-            fuzz_test(16);
-            fuzz_test(189);
-        }
-    }
-
-    #[test]
-    fn test_show() {
-        let list: DList<int> = range(0i, 10).collect();
-        assert_eq!(format!("{:?}", list), "DList [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]");
-
-        let list: DList<&str> = vec!["just", "one", "test", "more"].iter()
-                                                                   .map(|&s| s)
-                                                                   .collect();
-        assert_eq!(format!("{:?}", list), "DList [\"just\", \"one\", \"test\", \"more\"]");
-    }
-
-    #[cfg(test)]
-    fn fuzz_test(sz: int) {
-        let mut m: DList<int> = DList::new();
-        let mut v = vec![];
-        for i in range(0, sz) {
-            check_links(&m);
-            let r: u8 = rand::random();
-            match r % 6 {
-                0 => {
-                    m.pop_back();
-                    v.pop();
-                }
-                1 => {
-                    if !v.is_empty() {
-                        m.pop_front();
-                        v.remove(0);
-                    }
-                }
-                2 | 4 =>  {
-                    m.push_front(-i);
-                    v.insert(0, -i);
-                }
-                3 | 5 | _ => {
-                    m.push_back(i);
-                    v.push(i);
-                }
-            }
-        }
-
-        check_links(&m);
-
-        let mut i = 0u;
-        for (a, &b) in m.into_iter().zip(v.iter()) {
-            i += 1;
-            assert_eq!(a, b);
-        }
-        assert_eq!(i, v.len());
-    }
-
-    #[bench]
-    fn bench_collect_into(b: &mut test::Bencher) {
-        let v = &[0i; 64];
-        b.iter(|| {
-            let _: DList<int> = v.iter().map(|x| *x).collect();
-        })
-    }
-
-    #[bench]
-    fn bench_push_front(b: &mut test::Bencher) {
-        let mut m: DList<int> = DList::new();
-        b.iter(|| {
-            m.push_front(0);
-        })
-    }
-
-    #[bench]
-    fn bench_push_back(b: &mut test::Bencher) {
-        let mut m: DList<int> = DList::new();
-        b.iter(|| {
-            m.push_back(0);
-        })
-    }
-
-    #[bench]
-    fn bench_push_back_pop_back(b: &mut test::Bencher) {
-        let mut m: DList<int> = DList::new();
-        b.iter(|| {
-            m.push_back(0);
-            m.pop_back();
-        })
-    }
-
-    #[bench]
-    fn bench_push_front_pop_front(b: &mut test::Bencher) {
-        let mut m: DList<int> = DList::new();
-        b.iter(|| {
-            m.push_front(0);
-            m.pop_front();
-        })
-    }
-
-    #[bench]
-    fn bench_iter(b: &mut test::Bencher) {
-        let v = &[0i; 128];
-        let m: DList<int> = v.iter().map(|&x|x).collect();
-        b.iter(|| {
-            assert!(m.iter().count() == 128);
-        })
-    }
-    #[bench]
-    fn bench_iter_mut(b: &mut test::Bencher) {
-        let v = &[0i; 128];
-        let mut m: DList<int> = v.iter().map(|&x|x).collect();
-        b.iter(|| {
-            assert!(m.iter_mut().count() == 128);
-        })
-    }
-    #[bench]
-    fn bench_iter_rev(b: &mut test::Bencher) {
-        let v = &[0i; 128];
-        let m: DList<int> = v.iter().map(|&x|x).collect();
-        b.iter(|| {
-            assert!(m.iter().rev().count() == 128);
-        })
-    }
-    #[bench]
-    fn bench_iter_mut_rev(b: &mut test::Bencher) {
-        let v = &[0i; 128];
-        let mut m: DList<int> = v.iter().map(|&x|x).collect();
-        b.iter(|| {
-            assert!(m.iter_mut().rev().count() == 128);
-        })
-    }
-}
+*/
diff --git a/src/libcollections/ring_buf.rs b/src/libcollections/ring_buf.rs
index 338166c..951858e 100644
--- a/src/libcollections/ring_buf.rs
+++ b/src/libcollections/ring_buf.rs
@@ -1281,7 +1281,7 @@ impl<T> RingBuf<T> {
             }
         }
 
-        return elem;
+        return elem
     }
 }
 
@@ -1316,6 +1316,16 @@ impl<T: Clone> RingBuf<T> {
     }
 }
 
+/*pub fn crust_init(elem: u8, cap: usize, n_elem: usize) -> (RingBuf<u8>,) {
+    assert!(n_elem <= cap);
+    assert!(cap < 3);
+    let mut to_ret = RingBuf::with_capacity(cap);
+    for i in 0..n_elem {
+        to_ret.push_back(elem);
+    }
+    (to_ret,)
+}*/
+
 /// Returns the index in the underlying buffer for a given logical element index.
 #[inline]
 fn wrap_index(index: uint, size: uint) -> uint {
diff --git a/src/libcore/cell.rs b/src/libcore/cell.rs
index 9430716..84a2fb1 100644
--- a/src/libcore/cell.rs
+++ b/src/libcore/cell.rs
@@ -559,3 +559,7 @@ impl<T> UnsafeCell<T> {
     #[stable]
     pub unsafe fn into_inner(self) -> T { self.value }
 }
+//
+/*pub fn crust_init() -> (RefCell<u8>,) {
+    (RefCell::new(4),)
+}*/
diff --git a/src/libcore/iter.rs b/src/libcore/iter.rs
index 4910c03..75cb957 100644
--- a/src/libcore/iter.rs
+++ b/src/libcore/iter.rs
@@ -2773,7 +2773,7 @@ macro_rules! range_impl {
                     return Some(result);
                 }
 
-                return None;
+                return None
             }
 
             #[inline]
diff --git a/src/libcore/macros.rs b/src/libcore/macros.rs
index d44eaae..b2bb415 100644
--- a/src/libcore/macros.rs
+++ b/src/libcore/macros.rs
@@ -8,23 +8,24 @@
 // option. This file may not be copied, modified, or distributed
 // except according to those terms.
 
-/// Entry point of task panic, for details, see std::macros
 #[macro_export]
 macro_rules! panic {
     () => (
-        panic!("explicit panic")
+        unsafe { $crate::intrinsics::abort() }
     );
     ($msg:expr) => ({
-        static _MSG_FILE_LINE: (&'static str, &'static str, usize) = ($msg, file!(), line!());
-        ::core::panicking::panic(&_MSG_FILE_LINE)
+        /*static _MSG_FILE_LINE: (&'static str, &'static str, usize) = ($msg, file!(), line!());
+        ::core::panicking::panic(&_MSG_FILE_LINE)*/
+        unsafe { $crate::intrinsics::abort() }
     });
     ($fmt:expr, $($arg:tt)*) => ({
+        panic!("trans_panic");
         // The leading _'s are to avoid dead code warnings if this is
         // used inside a dead function. Just `#[allow(dead_code)]` is
         // insufficient, since the user may have
         // `#[forbid(dead_code)]` and which cannot be overridden.
-        static _FILE_LINE: (&'static str, usize) = (file!(), line!());
-        ::core::panicking::panic_fmt(format_args!($fmt, $($arg)*), &_FILE_LINE)
+        //static _FILE_LINE: (&'static str, usize) = (file!(), line!());
+        //::core::panicking::panic_fmt(format_args!($fmt, $($arg)*), &_FILE_LINE)
     });
 }
 
@@ -56,12 +57,12 @@ macro_rules! panic {
 macro_rules! assert {
     ($cond:expr) => (
         if !$cond {
-            panic!(concat!("assertion failed: ", stringify!($cond)))
+            panic!(/*concat!("assertion failed: ", stringify!($cond))*/)
         }
     );
     ($cond:expr, $($arg:tt)+) => (
         if !$cond {
-            panic!($($arg)+)
+            panic!(/*$($arg)+*/)
         }
     );
 }
