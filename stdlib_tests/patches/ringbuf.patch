diff --git a/src/liballoc/heap.rs b/src/liballoc/heap.rs
index a2643f4..4de86d1 100644
--- a/src/liballoc/heap.rs
+++ b/src/liballoc/heap.rs
@@ -294,11 +294,11 @@ mod imp {
 
     #[inline]
     pub unsafe fn reallocate(ptr: *mut u8, old_size: uint, size: uint, align: uint) -> *mut u8 {
-        if align <= MIN_ALIGN {
+/*        if align <= MIN_ALIGN {
             libc::realloc(ptr as *mut libc::c_void, size as libc::size_t) as *mut u8
-        } else {
+        } else */{
             let new_ptr = allocate(size, align);
-            ptr::copy_memory(new_ptr, ptr, cmp::min(size, old_size));
+            ptr::copy_nonoverlapping_memory(new_ptr, ptr, cmp::min(size, old_size));
             deallocate(ptr, old_size, align);
             new_ptr
         }
diff --git a/src/libcollections/ring_buf.rs b/src/libcollections/ring_buf.rs
index 338166c..7dcfed7 100644
--- a/src/libcollections/ring_buf.rs
+++ b/src/libcollections/ring_buf.rs
@@ -970,7 +970,8 @@ impl<T> RingBuf<T> {
         let contiguous = self.is_contiguous();
 
         match (contiguous, distance_to_tail <= distance_to_head, idx >= self.tail) {
-            (true, true, _) if i == 0 => {
+            (true, true, _) => {
+                if i == 0 {
                 // push_front
                 //
                 //       T
@@ -982,34 +983,36 @@ impl<T> RingBuf<T> {
                 //
 
                 self.tail = self.wrap_index(self.tail - 1);
-            },
-            (true, true, _) => unsafe {
-                // contiguous, insert closer to tail:
-                //
-                //             T   I         H
-                //      [. . . o o A o o o o . . . . . .]
-                //
-                //           T               H
-                //      [. . o o I A o o o o . . . . . .]
-                //           M M
-                //
-                // contiguous, insert closer to tail and tail is 0:
-                //
-                //
-                //       T   I         H
-                //      [o o A o o o o . . . . . . . . .]
-                //
-                //                       H             T
-                //      [o I A o o o o o . . . . . . . o]
-                //       M                             M
-
-                let new_tail = self.wrap_index(self.tail - 1);
-
-                self.copy(new_tail, self.tail, 1);
-                // Already moved the tail, so we only copy `i - 1` elements.
-                self.copy(self.tail, self.tail + 1, i - 1);
-
-                self.tail = new_tail;
+                } else {
+                    unsafe {
+                        // contiguous, insert closer to tail:
+                        //
+                        //             T   I         H
+                        //      [. . . o o A o o o o . . . . . .]
+                        //
+                        //           T               H
+                        //      [. . o o I A o o o o . . . . . .]
+                        //           M M
+                        //
+                        // contiguous, insert closer to tail and tail is 0:
+                        //
+                        //
+                        //       T   I         H
+                        //      [o o A o o o o . . . . . . . . .]
+                        //
+                        //                       H             T
+                        //      [o I A o o o o o . . . . . . . o]
+                        //       M                             M
+                        
+                        let new_tail = self.wrap_index(self.tail - 1);
+                        
+                        self.copy(new_tail, self.tail, 1);
+                        // Already moved the tail, so we only copy `i - 1` elements.
+                        self.copy(self.tail, self.tail + 1, i - 1);
+                        
+                        self.tail = new_tail;
+                    }
+                }
             },
             (true, false, _) => unsafe {
                 //  contiguous, insert closer to head:
@@ -1058,45 +1061,50 @@ impl<T> RingBuf<T> {
 
                 self.head += 1;
             },
-            (false, true, false) if idx == 0 => unsafe {
-                // discontiguous, insert is closer to tail, head section,
-                // and is at index zero in the internal buffer:
-                //
-                //       I                   H     T
-                //      [A o o o o o o o o o . . . o o o]
-                //
-                //                           H   T
-                //      [A o o o o o o o o o . . o o o I]
-                //                               M M M
-
-                // copy elements up to new tail
-                self.copy(self.tail - 1, self.tail, self.cap - self.tail);
-
-                // copy last element into empty spot at bottom of buffer
-                self.copy(self.cap - 1, 0, 1);
-
-                self.tail -= 1;
-            },
-            (false, true, false) => unsafe {
-                // discontiguous, insert closer to tail, head section:
-                //
-                //             I             H     T
-                //      [o o o A o o o o o o . . . o o o]
-                //
-                //                           H   T
-                //      [o o I A o o o o o o . . o o o o]
-                //       M M                     M M M M
-
-                // copy elements up to new tail
-                self.copy(self.tail - 1, self.tail, self.cap - self.tail);
-
-                // copy last element into empty spot at bottom of buffer
-                self.copy(self.cap - 1, 0, 1);
-
-                // move elements from idx-1 to end forward not including ^ element
-                self.copy(0, 1, idx - 1);
-
-                self.tail -= 1;
+            (false, true, false) => {
+                if idx == 0 {
+                    unsafe {
+                        // discontiguous, insert is closer to tail, head section,
+                        // and is at index zero in the internal buffer:
+                        //
+                        //       I                   H     T
+                        //      [A o o o o o o o o o . . . o o o]
+                        //
+                        //                           H   T
+                        //      [A o o o o o o o o o . . o o o I]
+                        //                               M M M
+
+                        // copy elements up to new tail
+                        self.copy(self.tail - 1, self.tail, self.cap - self.tail);
+
+                        // copy last element into empty spot at bottom of buffer
+                        self.copy(self.cap - 1, 0, 1);
+
+                        self.tail -= 1;
+                    }
+                } else {
+                    unsafe {
+                        // discontiguous, insert closer to tail, head section:
+                        //
+                        //             I             H     T
+                        //      [o o o A o o o o o o . . . o o o]
+                        //
+                        //                           H   T
+                        //      [o o I A o o o o o o . . o o o o]
+                        //       M M                     M M M M
+
+                        // copy elements up to new tail
+                        self.copy(self.tail - 1, self.tail, self.cap - self.tail);
+
+                        // copy last element into empty spot at bottom of buffer
+                        self.copy(self.cap - 1, 0, 1);
+
+                        // move elements from idx-1 to end forward not including ^ element
+                        self.copy(0, 1, idx - 1);
+
+                        self.tail -= 1;
+                    }
+                }
             },
             (false, false, false) => unsafe {
                 // discontiguous, insert closer to head, head section:
@@ -1316,6 +1324,19 @@ impl<T: Clone> RingBuf<T> {
     }
 }
 
+///
+pub fn crust_init(elem: u8, cap: usize, n_elem: usize) -> (RingBuf<u8>,RingBuf<u8>) {
+    assert!(n_elem <= cap);
+    assert!(cap < 4);
+    let mut to_ret = RingBuf::with_capacity(cap);
+    let mut to_ret2 = RingBuf::with_capacity(cap);
+    for i in 0..n_elem {
+        to_ret.push_back(elem);
+        to_ret2.push_back(elem);
+    }
+    (to_ret,to_ret2)
+}
+
 /// Returns the index in the underlying buffer for a given logical element index.
 #[inline]
 fn wrap_index(index: uint, size: uint) -> uint {
@@ -1502,7 +1523,14 @@ pub struct Drain<'a, T: 'a> {
 #[stable]
 impl<'a, T: 'a> Drop for Drain<'a, T> {
     fn drop(&mut self) {
-        for _ in *self {}
+        let mut keep_going = true;
+        while keep_going {
+            match self.next() {
+                Some(x) => (),
+                None => keep_going = false
+            }
+        }
+        //for _ in *self {}
         self.inner.head = 0;
         self.inner.tail = 0;
     }
diff --git a/src/libcore/cell.rs b/src/libcore/cell.rs
index 9430716..84a2fb1 100644
--- a/src/libcore/cell.rs
+++ b/src/libcore/cell.rs
@@ -559,3 +559,7 @@ impl<T> UnsafeCell<T> {
     #[stable]
     pub unsafe fn into_inner(self) -> T { self.value }
 }
+//
+/*pub fn crust_init() -> (RefCell<u8>,) {
+    (RefCell::new(4),)
+}*/
diff --git a/src/libcore/macros.rs b/src/libcore/macros.rs
index d44eaae..b2bb415 100644
--- a/src/libcore/macros.rs
+++ b/src/libcore/macros.rs
@@ -8,23 +8,24 @@
 // option. This file may not be copied, modified, or distributed
 // except according to those terms.
 
-/// Entry point of task panic, for details, see std::macros
 #[macro_export]
 macro_rules! panic {
     () => (
-        panic!("explicit panic")
+        unsafe { $crate::intrinsics::abort() }
     );
     ($msg:expr) => ({
-        static _MSG_FILE_LINE: (&'static str, &'static str, usize) = ($msg, file!(), line!());
-        ::core::panicking::panic(&_MSG_FILE_LINE)
+        /*static _MSG_FILE_LINE: (&'static str, &'static str, usize) = ($msg, file!(), line!());
+        ::core::panicking::panic(&_MSG_FILE_LINE)*/
+        unsafe { $crate::intrinsics::abort() }
     });
     ($fmt:expr, $($arg:tt)*) => ({
+        panic!("trans_panic");
         // The leading _'s are to avoid dead code warnings if this is
         // used inside a dead function. Just `#[allow(dead_code)]` is
         // insufficient, since the user may have
         // `#[forbid(dead_code)]` and which cannot be overridden.
-        static _FILE_LINE: (&'static str, usize) = (file!(), line!());
-        ::core::panicking::panic_fmt(format_args!($fmt, $($arg)*), &_FILE_LINE)
+        //static _FILE_LINE: (&'static str, usize) = (file!(), line!());
+        //::core::panicking::panic_fmt(format_args!($fmt, $($arg)*), &_FILE_LINE)
     });
 }
 
@@ -56,12 +57,12 @@ macro_rules! panic {
 macro_rules! assert {
     ($cond:expr) => (
         if !$cond {
-            panic!(concat!("assertion failed: ", stringify!($cond)))
+            panic!(/*concat!("assertion failed: ", stringify!($cond))*/)
         }
     );
     ($cond:expr, $($arg:tt)+) => (
         if !$cond {
-            panic!($($arg)+)
+            panic!(/*$($arg)+*/)
         }
     );
 }
