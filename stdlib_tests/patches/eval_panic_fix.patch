diff --git a/src/libcore/macros.rs b/src/libcore/macros.rs
index 751bd73..2623e81 100644
--- a/src/libcore/macros.rs
+++ b/src/libcore/macros.rs
@@ -12,19 +12,26 @@
 #[macro_export]
 macro_rules! panic {
     () => (
-        panic!("explicit panic")
+        ::core::panicking::panic_()
+        //panic!("explicit panic")
     );
     ($msg:expr) => ({
+        ::core::panicking::panic_()
+        /*
         static _MSG_FILE_LINE: (&'static str, &'static str, u32) = ($msg, file!(), line!());
         ::core::panicking::panic(&_MSG_FILE_LINE)
+        */
     });
     ($fmt:expr, $($arg:tt)*) => ({
+        ::core::panicking::panic_()
+        /*
         // The leading _'s are to avoid dead code warnings if this is
         // used inside a dead function. Just `#[allow(dead_code)]` is
         // insufficient, since the user may have
         // `#[forbid(dead_code)]` and which cannot be overridden.
         static _FILE_LINE: (&'static str, u32) = (file!(), line!());
         ::core::panicking::panic_fmt(format_args!($fmt, $($arg)*), &_FILE_LINE)
+        */
     });
 }
 
diff --git a/src/libcore/panicking.rs b/src/libcore/panicking.rs
index d6e00df..0b2a78d 100644
--- a/src/libcore/panicking.rs
+++ b/src/libcore/panicking.rs
@@ -32,6 +32,10 @@
 
 use fmt;
 
+pub fn panic_() -> ! {
+    unsafe { ::intrinsics::abort() }
+}
+
 #[cold] #[inline(never)] // this is the slow path, always
 #[lang="panic"]
 pub fn panic(expr_file_line: &(&'static str, &'static str, u32)) -> ! {
