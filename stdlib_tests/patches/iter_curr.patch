diff --git a/src/libcore/macros.rs b/src/libcore/macros.rs
index d44eaae..c061f6a 100644
--- a/src/libcore/macros.rs
+++ b/src/libcore/macros.rs
@@ -12,19 +12,21 @@
 #[macro_export]
 macro_rules! panic {
     () => (
-        panic!("explicit panic")
+        unsafe { $crate::intrinsics::abort() }
     );
     ($msg:expr) => ({
-        static _MSG_FILE_LINE: (&'static str, &'static str, usize) = ($msg, file!(), line!());
-        ::core::panicking::panic(&_MSG_FILE_LINE)
+        /*static _MSG_FILE_LINE: (&'static str, &'static str, usize) = ($msg, file!(), line!());
+        ::core::panicking::panic(&_MSG_FILE_LINE)*/
+        unsafe { $crate::intrinsics::abort() }
     });
     ($fmt:expr, $($arg:tt)*) => ({
+        panic!("trans_panic");
         // The leading _'s are to avoid dead code warnings if this is
         // used inside a dead function. Just `#[allow(dead_code)]` is
         // insufficient, since the user may have
         // `#[forbid(dead_code)]` and which cannot be overridden.
-        static _FILE_LINE: (&'static str, usize) = (file!(), line!());
-        ::core::panicking::panic_fmt(format_args!($fmt, $($arg)*), &_FILE_LINE)
+        //static _FILE_LINE: (&'static str, usize) = (file!(), line!());
+        //::core::panicking::panic_fmt(format_args!($fmt, $($arg)*), &_FILE_LINE)
     });
 }
 
@@ -56,12 +58,12 @@ macro_rules! panic {
 macro_rules! assert {
     ($cond:expr) => (
         if !$cond {
-            panic!(concat!("assertion failed: ", stringify!($cond)))
+            panic!(/*concat!("assertion failed: ", stringify!($cond))*/)
         }
     );
     ($cond:expr, $($arg:tt)+) => (
         if !$cond {
-            panic!($($arg)+)
+            panic!(/*$($arg)+*/)
         }
     );
 }
diff --git a/src/libcore/slice.rs b/src/libcore/slice.rs
index f08978d..0fdb4b1 100644
--- a/src/libcore/slice.rs
+++ b/src/libcore/slice.rs
@@ -814,6 +814,13 @@ pub struct IterMut<'a, T: 'a> {
     marker: marker::ContravariantLifetime<'a>,
 }
 
+
+static mut fix_vec : [u8;3] = [1,2,3];
+
+/// 
+pub fn crust_init() -> (IterMut<'static,u8>,) {
+    (unsafe { fix_vec.as_mut_slice().iter_mut() },)
+}
 
 #[unstable]
 impl<'a, T> ops::Index<ops::Range<uint>> for IterMut<'a, T> {
